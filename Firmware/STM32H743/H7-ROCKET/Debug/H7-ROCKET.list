
H7-ROCKET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002320  0800ede8  0800ede8  0001ede8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011108  08011108  00021108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011110  08011110  00021110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011114  08011114  00021114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  24000000  08011118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000358  24000208  0801131c  00030208  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24000560  0801131c  00030560  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 10 .debug_info   000183d9  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003232  00000000  00000000  0004860b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f90  00000000  00000000  0004b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e28  00000000  00000000  0004c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384c8  00000000  00000000  0004d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018080  00000000  00000000  00085ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015af99  00000000  00000000  0009db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f8ad9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000054a8  00000000  00000000  001f8b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800edd0 	.word	0x0800edd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800edd0 	.word	0x0800edd0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b974 	b.w	8000c24 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	4604      	mov	r4, r0
 800095c:	468e      	mov	lr, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d14d      	bne.n	80009fe <__udivmoddi4+0xaa>
 8000962:	428a      	cmp	r2, r1
 8000964:	4694      	mov	ip, r2
 8000966:	d969      	bls.n	8000a3c <__udivmoddi4+0xe8>
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	b152      	cbz	r2, 8000984 <__udivmoddi4+0x30>
 800096e:	fa01 f302 	lsl.w	r3, r1, r2
 8000972:	f1c2 0120 	rsb	r1, r2, #32
 8000976:	fa20 f101 	lsr.w	r1, r0, r1
 800097a:	fa0c fc02 	lsl.w	ip, ip, r2
 800097e:	ea41 0e03 	orr.w	lr, r1, r3
 8000982:	4094      	lsls	r4, r2
 8000984:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000988:	0c21      	lsrs	r1, r4, #16
 800098a:	fbbe f6f8 	udiv	r6, lr, r8
 800098e:	fa1f f78c 	uxth.w	r7, ip
 8000992:	fb08 e316 	mls	r3, r8, r6, lr
 8000996:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800099a:	fb06 f107 	mul.w	r1, r6, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d90a      	bls.n	80009b8 <__udivmoddi4+0x64>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009aa:	f080 811f 	bcs.w	8000bec <__udivmoddi4+0x298>
 80009ae:	4299      	cmp	r1, r3
 80009b0:	f240 811c 	bls.w	8000bec <__udivmoddi4+0x298>
 80009b4:	3e02      	subs	r6, #2
 80009b6:	4463      	add	r3, ip
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c8:	fb00 f707 	mul.w	r7, r0, r7
 80009cc:	42a7      	cmp	r7, r4
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x92>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	f080 810a 	bcs.w	8000bf0 <__udivmoddi4+0x29c>
 80009dc:	42a7      	cmp	r7, r4
 80009de:	f240 8107 	bls.w	8000bf0 <__udivmoddi4+0x29c>
 80009e2:	4464      	add	r4, ip
 80009e4:	3802      	subs	r0, #2
 80009e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ea:	1be4      	subs	r4, r4, r7
 80009ec:	2600      	movs	r6, #0
 80009ee:	b11d      	cbz	r5, 80009f8 <__udivmoddi4+0xa4>
 80009f0:	40d4      	lsrs	r4, r2
 80009f2:	2300      	movs	r3, #0
 80009f4:	e9c5 4300 	strd	r4, r3, [r5]
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d909      	bls.n	8000a16 <__udivmoddi4+0xc2>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	f000 80ef 	beq.w	8000be6 <__udivmoddi4+0x292>
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0e:	4630      	mov	r0, r6
 8000a10:	4631      	mov	r1, r6
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	fab3 f683 	clz	r6, r3
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d14a      	bne.n	8000ab4 <__udivmoddi4+0x160>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xd4>
 8000a22:	4282      	cmp	r2, r0
 8000a24:	f200 80f9 	bhi.w	8000c1a <__udivmoddi4+0x2c6>
 8000a28:	1a84      	subs	r4, r0, r2
 8000a2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	469e      	mov	lr, r3
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d0e0      	beq.n	80009f8 <__udivmoddi4+0xa4>
 8000a36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a3a:	e7dd      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000a3c:	b902      	cbnz	r2, 8000a40 <__udivmoddi4+0xec>
 8000a3e:	deff      	udf	#255	; 0xff
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	f040 8092 	bne.w	8000b6e <__udivmoddi4+0x21a>
 8000a4a:	eba1 010c 	sub.w	r1, r1, ip
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2601      	movs	r6, #1
 8000a58:	0c20      	lsrs	r0, r4, #16
 8000a5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a66:	fb0e f003 	mul.w	r0, lr, r3
 8000a6a:	4288      	cmp	r0, r1
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x12c>
 8000a6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x12a>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2c0>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	1a09      	subs	r1, r1, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a88:	fb07 1110 	mls	r1, r7, r0, r1
 8000a8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x156>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x154>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2ca>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ab2:	e79c      	b.n	80009ee <__udivmoddi4+0x9a>
 8000ab4:	f1c6 0720 	rsb	r7, r6, #32
 8000ab8:	40b3      	lsls	r3, r6
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ac6:	fa01 f306 	lsl.w	r3, r1, r6
 8000aca:	431c      	orrs	r4, r3
 8000acc:	40f9      	lsrs	r1, r7
 8000ace:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ada:	0c20      	lsrs	r0, r4, #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ae4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae8:	fb08 f00e 	mul.w	r0, r8, lr
 8000aec:	4288      	cmp	r0, r1
 8000aee:	fa02 f206 	lsl.w	r2, r2, r6
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b8>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2bc>
 8000b00:	4288      	cmp	r0, r1
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2bc>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b14:	fb09 1110 	mls	r1, r9, r0, r1
 8000b18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	458e      	cmp	lr, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1e2>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2b4>
 8000b2e:	458e      	cmp	lr, r1
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2b4>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b3e:	eba1 010e 	sub.w	r1, r1, lr
 8000b42:	42a1      	cmp	r1, r4
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46a6      	mov	lr, r4
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x2a0>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x212>
 8000b4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b52:	eb61 010e 	sbc.w	r1, r1, lr
 8000b56:	fa01 f707 	lsl.w	r7, r1, r7
 8000b5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b5e:	40f1      	lsrs	r1, r6
 8000b60:	431f      	orrs	r7, r3
 8000b62:	e9c5 7100 	strd	r7, r1, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	40d8      	lsrs	r0, r3
 8000b74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b78:	fa21 f303 	lsr.w	r3, r1, r3
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	4301      	orrs	r1, r0
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b90:	0c0b      	lsrs	r3, r1, #16
 8000b92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b96:	fb00 f60e 	mul.w	r6, r0, lr
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x260>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b8>
 8000bac:	429e      	cmp	r6, r3
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b8>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x28a>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2b0>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2b0>
 8000bda:	3e02      	subs	r6, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	1ac9      	subs	r1, r1, r3
 8000be0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0x104>
 8000be6:	462e      	mov	r6, r5
 8000be8:	4628      	mov	r0, r5
 8000bea:	e705      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000bec:	4606      	mov	r6, r0
 8000bee:	e6e3      	b.n	80009b8 <__udivmoddi4+0x64>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	e6f8      	b.n	80009e6 <__udivmoddi4+0x92>
 8000bf4:	454b      	cmp	r3, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f8>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c00:	3801      	subs	r0, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f8>
 8000c04:	4646      	mov	r6, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x28a>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1e2>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x260>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b8>
 8000c14:	3b02      	subs	r3, #2
 8000c16:	4461      	add	r1, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x12c>
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	e709      	b.n	8000a32 <__udivmoddi4+0xde>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x156>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <FusionAhrsInitialise+0x74>)
 8000c46:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <FusionAhrsInitialise+0x78>)
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000c8e:	bf00      	nop
 8000c90:	372c      	adds	r7, #44	; 0x2c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	7f7fffff 	.word	0x7f7fffff
 8000ca0:	41200000 	.word	0x41200000

08000ca4 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cb0:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 8000cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 8000cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000cdc:	b490      	push	{r4, r7}
 8000cde:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ce8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000cec:	6018      	str	r0, [r3, #0]
 8000cee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000cf2:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8000cf6:	eeb0 5a61 	vmov.f32	s10, s3
 8000cfa:	eef0 5a42 	vmov.f32	s11, s4
 8000cfe:	eeb0 6a62 	vmov.f32	s12, s5
 8000d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d06:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000d0a:	eef0 6a43 	vmov.f32	s13, s6
 8000d0e:	eeb0 7a63 	vmov.f32	s14, s7
 8000d12:	eef0 7a44 	vmov.f32	s15, s8
 8000d16:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d1a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000d1e:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 8000d22:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8000d26:	edc0 4a00 	vstr	s9, [r0]
 8000d2a:	ed81 0a00 	vstr	s0, [r1]
 8000d2e:	edc1 0a01 	vstr	s1, [r1, #4]
 8000d32:	ed81 1a02 	vstr	s2, [r1, #8]
 8000d36:	ed82 5a00 	vstr	s10, [r2]
 8000d3a:	edc2 5a01 	vstr	s11, [r2, #4]
 8000d3e:	ed82 6a02 	vstr	s12, [r2, #8]
 8000d42:	edc3 6a00 	vstr	s13, [r3]
 8000d46:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d4a:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000d4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d60:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000d78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d7c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	d116      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000d8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d92:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d10b      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000da4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000da8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8000db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	f000 85b4 	beq.w	8001924 <FusionAhrsUpdate+0xc48>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000dbc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dc0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dce:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ddc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000de0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	edd3 6a03 	vldr	s13, [r3, #12]
 8000dea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e08:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000e0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e10:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e1a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e1e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e30:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e3e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e50:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e54:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e58:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000e5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e60:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e6e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e88:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	edd3 6a06 	vldr	s13, [r3, #24]
 8000e92:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e96:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000eb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8000eb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eb8:	f5a3 7167 	sub.w	r1, r3, #924	; 0x39c
 8000ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ec0:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ecc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed0:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8000ed4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed8:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8000edc:	460b      	mov	r3, r1
 8000ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000ee4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ee8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ef4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f04:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f08:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f10:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f24:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f28:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f30:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f40:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f44:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000f48:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000f60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f64:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000f68:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f7a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f7e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000f80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f84:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	105a      	asrs	r2, r3, #1
 8000f8c:	4bd1      	ldr	r3, [pc, #836]	; (80012d4 <FusionAhrsUpdate+0x5f8>)
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000f94:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8000f98:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000f9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fa4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fa8:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000faa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fae:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fc6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fde:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fee:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000ff6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ffa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ffe:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001000:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800100a:	f5a3 716f 	sub.w	r1, r3, #956	; 0x3bc
 800100e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001012:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001016:	460b      	mov	r3, r1
 8001018:	ca07      	ldmia	r2, {r0, r1, r2}
 800101a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800101e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001028:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800102a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800102e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001046:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800104a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800104e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001052:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001056:	ed93 7a01 	vldr	s14, [r3, #4]
 800105a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800106a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800106e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001072:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001076:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800107a:	ed93 7a02 	vldr	s14, [r3, #8]
 800107e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800108e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001096:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800109a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800109e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010a2:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80010a6:	460b      	mov	r3, r1
 80010a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010b2:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80010b6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80010bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80010c0:	bf00      	nop
 80010c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80010ca:	461c      	mov	r4, r3
 80010cc:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010dc:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80010e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010e4:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80010e8:	460b      	mov	r3, r1
 80010ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010f4:	f5a3 7175 	sub.w	r1, r3, #980	; 0x3d4
 80010f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010fc:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8001100:	460b      	mov	r3, r1
 8001102:	ca07      	ldmia	r2, {r0, r1, r2}
 8001104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001108:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800110c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001110:	ed93 7a01 	vldr	s14, [r3, #4]
 8001114:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001118:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001128:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800112c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001130:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001134:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001138:	edd3 7a01 	vldr	s15, [r3, #4]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001148:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800114c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001150:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001154:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001158:	ed93 7a02 	vldr	s14, [r3, #8]
 800115c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001160:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001170:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800117c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001180:	edd3 7a02 	vldr	s15, [r3, #8]
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001190:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001194:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001198:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800119c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011a8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011b8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011c4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011d8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80011dc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80011e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011e4:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 80011e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011ec:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 80011f0:	460b      	mov	r3, r1
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011fc:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8001200:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001204:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001208:	460b      	mov	r3, r1
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001214:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8001218:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800121c:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001220:	460b      	mov	r3, r1
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001228:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800122c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001238:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001248:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800124c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001250:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001254:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001258:	edd3 7a01 	vldr	s15, [r3, #4]
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001268:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800126c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001270:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001274:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001278:	edd3 7a02 	vldr	s15, [r3, #8]
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001284:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001288:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 800128c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001290:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	edd3 7a01 	vldr	s15, [r3, #4]
 800129a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	f100 833c 	bmi.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	f300 832b 	bgt.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012d0:	e002      	b.n	80012d8 <FusionAhrsUpdate+0x5fc>
 80012d2:	bf00      	nop
 80012d4:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80012d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012dc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80012e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012ea:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	edd3 6a03 	vldr	s13, [r3, #12]
 8001306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800130a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	edd3 7a06 	vldr	s15, [r3, #24]
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800131c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001320:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001324:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001328:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800132c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ed93 7a03 	vldr	s14, [r3, #12]
 8001336:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800133a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	edd3 7a03 	vldr	s15, [r3, #12]
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800134c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001350:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001354:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	edd3 6a05 	vldr	s13, [r3, #20]
 800135e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001362:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	edd3 7a05 	vldr	s15, [r3, #20]
 800136c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001374:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001378:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800137c:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001380:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001384:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	ed93 7a05 	vldr	s14, [r3, #20]
 800138e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001392:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	edd3 7a06 	vldr	s15, [r3, #24]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013a4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80013ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013c8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80013cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80013d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013d4:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80013d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013dc:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80013e0:	460b      	mov	r3, r1
 80013e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ec:	f5a3 713e 	sub.w	r1, r3, #760	; 0x2f8
 80013f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013f4:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 80013f8:	460b      	mov	r3, r1
 80013fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001400:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001404:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001408:	ed93 7a01 	vldr	s14, [r3, #4]
 800140c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001410:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001420:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001424:	edd3 6a02 	vldr	s13, [r3, #8]
 8001428:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800142c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001430:	edd3 7a01 	vldr	s15, [r3, #4]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001440:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001444:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001448:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800144c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001450:	ed93 7a02 	vldr	s14, [r3, #8]
 8001454:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001458:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001468:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001474:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001478:	edd3 7a02 	vldr	s15, [r3, #8]
 800147c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001488:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800148c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001490:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001494:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014a0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80014b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014bc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014dc:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80014e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80014f2:	461c      	mov	r4, r3
 80014f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001500:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001504:	f5a3 7147 	sub.w	r1, r3, #796	; 0x31c
 8001508:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800150c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001510:	460b      	mov	r3, r1
 8001512:	ca07      	ldmia	r2, {r0, r1, r2}
 8001514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001518:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800151c:	f5a3 714a 	sub.w	r1, r3, #808	; 0x328
 8001520:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001524:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001528:	460b      	mov	r3, r1
 800152a:	ca07      	ldmia	r2, {r0, r1, r2}
 800152c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001530:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001534:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001550:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001554:	edd3 6a01 	vldr	s13, [r3, #4]
 8001558:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800155c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001570:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001574:	edd3 6a02 	vldr	s13, [r3, #8]
 8001578:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800157c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001580:	edd3 7a02 	vldr	s15, [r3, #8]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001590:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001594:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80015ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015b0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015b4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015c6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015ca:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015d0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	105a      	asrs	r2, r3, #1
 80015d8:	4bd0      	ldr	r3, [pc, #832]	; (800191c <FusionAhrsUpdate+0xc40>)
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80015e0:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 80015e4:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015f0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015f4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015fa:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001612:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001626:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800162a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800163a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001642:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001646:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800164a:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800164c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001656:	f5a3 714f 	sub.w	r1, r3, #828	; 0x33c
 800165a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800165e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001662:	460b      	mov	r3, r1
 8001664:	ca07      	ldmia	r2, {r0, r1, r2}
 8001666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800166a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001674:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001676:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800167a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001692:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001696:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800169a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800169e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016b6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016ba:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016c2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ca:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016da:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016de:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016e6:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80016ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016f4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016f8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80016fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001702:	bf00      	nop
 8001704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001708:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800170c:	461c      	mov	r4, r3
 800170e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800171a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800171e:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8001722:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001726:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800172a:	460b      	mov	r3, r1
 800172c:	ca07      	ldmia	r2, {r0, r1, r2}
 800172e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001732:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001736:	f5a3 7155 	sub.w	r1, r3, #852	; 0x354
 800173a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800173e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8001742:	460b      	mov	r3, r1
 8001744:	ca07      	ldmia	r2, {r0, r1, r2}
 8001746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800174a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800174e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001752:	ed93 7a01 	vldr	s14, [r3, #4]
 8001756:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800175a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800175e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001766:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800176a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800176e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001772:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001776:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800177a:	edd3 7a01 	vldr	s15, [r3, #4]
 800177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800178a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800178e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001792:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001796:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800179a:	ed93 7a02 	vldr	s14, [r3, #8]
 800179e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017b2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017be:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017d2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80017d6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017de:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ea:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017fa:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001802:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001806:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800181a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800181e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001822:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001826:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 800182a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800183c:	461c      	mov	r4, r3
 800183e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800184a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800184e:	f5a3 7161 	sub.w	r1, r3, #900	; 0x384
 8001852:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001856:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800185a:	460b      	mov	r3, r1
 800185c:	ca07      	ldmia	r2, {r0, r1, r2}
 800185e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001862:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001866:	f5a3 715e 	sub.w	r1, r3, #888	; 0x378
 800186a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800186e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001872:	460b      	mov	r3, r1
 8001874:	ca07      	ldmia	r2, {r0, r1, r2}
 8001876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800187a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800187e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800188a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800189a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800189e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80018a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018b2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018c2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018c6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80018ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ce:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018da:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018de:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ea:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018ee:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018f6:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80018fa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001904:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001908:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800190c:	461c      	mov	r4, r3
 800190e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800191a:	e004      	b.n	8001926 <FusionAhrsUpdate+0xc4a>
 800191c:	5f3759df 	.word	0x5f3759df
 8001920:	3c8efa35 	.word	0x3c8efa35
            break;
 8001924:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001926:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800192a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d107      	bne.n	800194e <FusionAhrsUpdate+0xc72>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 800193e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001942:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 800194e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001952:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800195e:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001960:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001964:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800196e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001972:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	dd2f      	ble.n	80019e6 <FusionAhrsUpdate+0xd0a>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001986:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800198a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001994:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001998:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ae:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ba:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80019be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 80019d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019d8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80019e4:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 80019e6:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8001920 <FusionAhrsUpdate+0xc44>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 80019ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019f6:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80019fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019fe:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 8001a02:	460b      	mov	r3, r1
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001a0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a12:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a32:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a4a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a52:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a56:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a5a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a6a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a72:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8001a76:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a88:	461c      	mov	r4, r3
 8001a8a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a9a:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 8001a9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aa2:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001aae:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001ab8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001ad8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001adc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ae0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001af0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001af8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001afc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b04:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b14:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b1c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8001b20:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b2a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b32:	461c      	mov	r4, r3
 8001b34:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b44:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 8001b48:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b4c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001b50:	460b      	mov	r3, r1
 8001b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b58:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b5c:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8001b60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b64:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001b70:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001b98:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ba8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001bc0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bcc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001be0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001be4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8001bf0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c02:	461c      	mov	r4, r3
 8001c04:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001c08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c10:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c14:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8001c18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c1c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001c20:	460b      	mov	r3, r1
 8001c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c2c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001c36:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c3a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c4e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c52:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001c56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c5a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c62:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c6e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c72:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001c76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c7a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c82:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c8e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c92:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001c96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c9a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001c9e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ca8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cc2:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8001cc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cde:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8001ce2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ce6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8001cea:	460b      	mov	r3, r1
 8001cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001cf2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cf6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cfe:	eeb1 7a67 	vneg.f32	s14, s15
 8001d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d16:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d1e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d36:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d3e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d42:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d56:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d7e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d9e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001da2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001da6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001daa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dbe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001dc2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001dc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dd6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001de6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001df2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e06:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e0a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e26:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e2a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001e2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e32:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e4e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e52:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e6e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e72:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e7a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e8e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e92:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001e96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e9a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e9e:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec0:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8001ec4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4614      	mov	r4, r2
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ed8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001edc:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8001ee0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee8:	4614      	mov	r4, r2
 8001eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f00:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f10:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f14:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001f18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f28:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f38:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f3c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001f40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f4c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f50:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f60:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f64:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001f68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f74:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f78:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f88:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f8c:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001f90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f94:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f98:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fa2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fa6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001faa:	461c      	mov	r4, r3
 8001fac:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001fb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001fc4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001fc8:	f103 040c 	add.w	r4, r3, #12
 8001fcc:	4613      	mov	r3, r2
 8001fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fd4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fd8:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8001fdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fe0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	330c      	adds	r3, #12
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001ff0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ff4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002000:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002010:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002014:	edd3 6a01 	vldr	s13, [r3, #4]
 8002018:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800201c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002020:	edd3 7a01 	vldr	s15, [r3, #4]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002030:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002034:	edd3 6a02 	vldr	s13, [r3, #8]
 8002038:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800203c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002050:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002054:	edd3 6a03 	vldr	s13, [r3, #12]
 8002058:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800205c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002060:	edd3 7a03 	vldr	s15, [r3, #12]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206c:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8002070:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8002074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8002080:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002084:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002088:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 800208c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800208e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002098:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800209c:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800209e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020a2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	105a      	asrs	r2, r3, #1
 80020aa:	4bcc      	ldr	r3, [pc, #816]	; (80023dc <FusionAhrsUpdate+0x1700>)
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80020b2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80020b6:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80020b8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020c6:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80020c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020e0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002108:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800210c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8002110:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002114:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002118:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800211a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800211e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002122:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800213a:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800213e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002142:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002146:	ed93 7a01 	vldr	s14, [r3, #4]
 800214a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002156:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800215a:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800215e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002162:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002166:	ed93 7a02 	vldr	s14, [r3, #8]
 800216a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002176:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800217a:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800217e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002182:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002186:	ed93 7a03 	vldr	s14, [r3, #12]
 800218a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002196:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800219a:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 800219e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80021a6:	f507 7462 	add.w	r4, r7, #904	; 0x388
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021b8:	461c      	mov	r4, r3
 80021ba:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 80021c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021c8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80021d2:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 80021d6:	f103 040c 	add.w	r4, r3, #12
 80021da:	4613      	mov	r3, r2
 80021dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 80021e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80021f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002206:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002214:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	edd3 7a05 	vldr	s15, [r3, #20]
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800222a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800222e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002232:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8002236:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800223a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	ed93 7a03 	vldr	s14, [r3, #12]
 8002244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002248:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002256:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800225a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	edd3 6a05 	vldr	s13, [r3, #20]
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800227e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002282:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002286:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 800228a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800228e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	ed93 7a03 	vldr	s14, [r3, #12]
 8002298:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800229c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022b6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80022c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022c4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80022da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80022e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022ea:	f5a3 712f 	sub.w	r1, r3, #700	; 0x2bc
 80022ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022f2:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80022f6:	460b      	mov	r3, r1
 80022f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002302:	f5a3 712c 	sub.w	r1, r3, #688	; 0x2b0
 8002306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800230a:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800230e:	460b      	mov	r3, r1
 8002310:	ca07      	ldmia	r2, {r0, r1, r2}
 8002312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002316:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800231a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002326:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002336:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800233a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800233e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002342:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002346:	ed93 7a01 	vldr	s14, [r3, #4]
 800234a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800234e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800235e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002362:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002366:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800236a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800236e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002372:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002376:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800237a:	edd3 7a02 	vldr	s15, [r3, #8]
 800237e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002382:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002386:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800238a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800238e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002392:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8002396:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800239a:	ca07      	ldmia	r2, {r0, r1, r2}
 800239c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023a4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80023a8:	461c      	mov	r4, r3
 80023aa:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80023ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 80023b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023ba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80023c4:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 80023c8:	331c      	adds	r3, #28
 80023ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80023cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 80023d0:	bf00      	nop
 80023d2:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc90      	pop	{r4, r7}
 80023da:	4770      	bx	lr
 80023dc:	5f3759df 	.word	0x5f3759df

080023e0 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	61f8      	str	r0, [r7, #28]
 80023e8:	eeb0 5a40 	vmov.f32	s10, s0
 80023ec:	eef0 5a60 	vmov.f32	s11, s1
 80023f0:	eeb0 6a41 	vmov.f32	s12, s2
 80023f4:	eef0 6a61 	vmov.f32	s13, s3
 80023f8:	eeb0 7a42 	vmov.f32	s14, s4
 80023fc:	eef0 7a62 	vmov.f32	s15, s5
 8002400:	ed87 3a00 	vstr	s6, [r7]
 8002404:	ed87 5a04 	vstr	s10, [r7, #16]
 8002408:	edc7 5a05 	vstr	s11, [r7, #20]
 800240c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002410:	edc7 6a01 	vstr	s13, [r7, #4]
 8002414:	ed87 7a02 	vstr	s14, [r7, #8]
 8002418:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002432:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002436:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800243a:	ed97 5a01 	vldr	s10, [r7, #4]
 800243e:	edd7 5a02 	vldr	s11, [r7, #8]
 8002442:	ed97 6a03 	vldr	s12, [r7, #12]
 8002446:	edd7 6a04 	vldr	s13, [r7, #16]
 800244a:	ed97 7a05 	vldr	s14, [r7, #20]
 800244e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002452:	edd7 4a00 	vldr	s9, [r7]
 8002456:	eef0 1a45 	vmov.f32	s3, s10
 800245a:	eeb0 2a65 	vmov.f32	s4, s11
 800245e:	eef0 2a46 	vmov.f32	s5, s12
 8002462:	eeb0 0a66 	vmov.f32	s0, s13
 8002466:	eef0 0a47 	vmov.f32	s1, s14
 800246a:	eeb0 1a67 	vmov.f32	s2, s15
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7fe fc34 	bl	8000cdc <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002474:	69f8      	ldr	r0, [r7, #28]
 8002476:	f000 f862 	bl	800253e <FusionAhrsIsInitialising>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002488:	e00d      	b.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002494:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80024b0 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002498:	69f8      	ldr	r0, [r7, #28]
 800249a:	f000 f869 	bl	8002570 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80024a6:	bf00      	nop
 80024a8:	3730      	adds	r7, #48	; 0x30
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000

080024b4 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 80024b4:	b490      	push	{r4, r7}
 80024b6:	b096      	sub	sp, #88	; 0x58
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6178      	str	r0, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024c2:	330c      	adds	r3, #12
 80024c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80024ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024d2:	eef1 7a67 	vneg.f32	s15, s15
 80024d6:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80024da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024de:	eef1 7a67 	vneg.f32	s15, s15
 80024e2:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80024e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024ea:	eef1 7a67 	vneg.f32	s15, s15
 80024ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 80024f2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002500:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 800250e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002516:	ee06 0a10 	vmov	s12, r0
 800251a:	ee06 1a90 	vmov	s13, r1
 800251e:	ee07 2a10 	vmov	s14, r2
 8002522:	ee07 3a90 	vmov	s15, r3
}
 8002526:	eeb0 0a46 	vmov.f32	s0, s12
 800252a:	eef0 0a66 	vmov.f32	s1, s13
 800252e:	eeb0 1a47 	vmov.f32	s2, s14
 8002532:	eef0 1a67 	vmov.f32	s3, s15
 8002536:	3758      	adds	r7, #88	; 0x58
 8002538:	46bd      	mov	sp, r7
 800253a:	bc90      	pop	{r4, r7}
 800253c:	4770      	bx	lr

0800253e <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	bfcc      	ite	gt
 800255c:	2301      	movgt	r3, #1
 800255e:	2300      	movle	r3, #0
 8002560:	b2db      	uxtb	r3, r3
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b0af      	sub	sp, #188	; 0xbc
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	ed87 0a00 	vstr	s0, [r7]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002582:	330c      	adds	r3, #12
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800258a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800258e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002596:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800259a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800259e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80025aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80025ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	f00b fbc3 	bl	800dd54 <sqrtf>
 80025ce:	eeb0 7a40 	vmov.f32	s14, s0
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80025de:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80025ee:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80025f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80025fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002602:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800260e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002612:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 800261e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800262c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002630:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 040c 	add.w	r4, r3, #12
 8002640:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	edd3 7a05 	vldr	s15, [r3, #20]
 8002656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a06 	vldr	s15, [r3, #24]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ed93 7a03 	vldr	s14, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edd3 7a03 	vldr	s15, [r3, #12]
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002682:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 6a04 	vldr	s13, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	eef0 0a67 	vmov.f32	s1, s15
 800269e:	eeb0 0a46 	vmov.f32	s0, s12
 80026a2:	f00b fb55 	bl	800dd50 <atan2f>
 80026a6:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 80026b0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80026b4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002854 <FusionAhrsSetYaw+0x2e4>
 80026b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 80026bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 80026d0:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026d4:	f00a fedc 	bl	800d490 <cosf>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 80026dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 80026ee:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026f2:	f00b fa69 	bl	800dbc8 <sinf>
 80026f6:	eef0 7a40 	vmov.f32	s15, s0
 80026fa:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 80026fe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002702:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002716:	330c      	adds	r3, #12
 8002718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 800271e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002722:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800272e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800273e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800274e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 800275e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002762:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800276e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800277e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800278a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800278e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279a:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 800279e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80027ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027da:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 80027de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800280e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 800281e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800282c:	f107 0418 	add.w	r4, r7, #24
 8002830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 040c 	add.w	r4, r3, #12
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 800284a:	bf00      	nop
 800284c:	37bc      	adds	r7, #188	; 0xbc
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	3c8efa35 	.word	0x3c8efa35

08002858 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	ed87 0a02 	vstr	s0, [r7, #8]
 8002864:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edd3 7a01 	vldr	s15, [r3, #4]
 800287a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80028c0 <FusionBiasInitialise+0x68>
 8002882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edc3 7a02 	vstr	s15, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	f3af 8000 	nop.w
 80028c0:	8c0eff43 	.word	0x8c0eff43
 80028c4:	3fc015bf 	.word	0x3fc015bf

080028c8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b0b4      	sub	sp, #208	; 0xd0
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	61f8      	str	r0, [r7, #28]
 80028d0:	eef0 6a40 	vmov.f32	s13, s0
 80028d4:	eeb0 7a60 	vmov.f32	s14, s1
 80028d8:	eef0 7a41 	vmov.f32	s15, s2
 80028dc:	edc7 6a04 	vstr	s13, [r7, #16]
 80028e0:	ed87 7a05 	vstr	s14, [r7, #20]
 80028e4:	edc7 7a06 	vstr	s15, [r7, #24]
 80028e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ec:	f107 0210 	add.w	r2, r7, #16
 80028f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	3210      	adds	r2, #16
 80028fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002904:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002914:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002918:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002924:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002934:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002938:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800293c:	ca07      	ldmia	r2, {r0, r1, r2}
 800293e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800294a:	ca07      	ldmia	r2, {r0, r1, r2}
 800294c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	eeb0 7ae7 	vabs.f32	s14, s15
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	dc17      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	dc0b      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002980:	edd7 7a06 	vldr	s15, [r7, #24]
 8002984:	eeb0 7ae7 	vabs.f32	s14, s15
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd0b      	ble.n	80029b0 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
        return gyroscope;
 80029a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029ae:	e08f      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d512      	bpl.n	80029ea <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80029da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029e8:	e072      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	689c      	ldr	r4, [r3, #8]
 80029ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029f2:	f107 0210 	add.w	r2, r7, #16
 80029f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029fc:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002a00:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002a04:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8002a10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002a14:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002a20:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a24:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002a30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a34:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a42:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a52:	3210      	adds	r2, #16
 8002a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a5e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002a68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002a78:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002a88:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aaa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ac6:	f107 0210 	add.w	r2, r7, #16
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002adc:	ee06 1a90 	vmov	s13, r1
 8002ae0:	ee07 2a10 	vmov	s14, r2
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8002aec:	eef0 0a47 	vmov.f32	s1, s14
 8002af0:	eeb0 1a67 	vmov.f32	s2, s15
 8002af4:	37d0      	adds	r7, #208	; 0xd0
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc90      	pop	{r4, r7}
 8002afa:	4770      	bx	lr

08002afc <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b18:	eef0 0a67 	vmov.f32	s1, s15
 8002b1c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fe99 	bl	8002858 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 8002b26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b2a:	68b8      	ldr	r0, [r7, #8]
 8002b2c:	f7fe f87c 	bl	8000c28 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8002b30:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002b48 <initFusionAHRS+0x4c>
 8002b34:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fe f8b3 	bl	8000ca4 <FusionAhrsSetMagneticField>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	428c0000 	.word	0x428c0000

08002b4c <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b58:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002b5c:	6018      	str	r0, [r3, #0]
 8002b5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b62:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b66:	6019      	str	r1, [r3, #0]
 8002b68:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b6c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b76:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002b7a:	ed83 0a00 	vstr	s0, [r3]
 8002b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b82:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8002b86:	edc3 0a00 	vstr	s1, [r3]
 8002b8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b8e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002b92:	ed83 1a00 	vstr	s2, [r3]
 8002b96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b9a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002b9e:	edc3 1a00 	vstr	s3, [r3]
 8002ba2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ba6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002baa:	ed83 2a00 	vstr	s4, [r3]
 8002bae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bb2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bb6:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8002bba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bbe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002bc8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bcc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002bd6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bda:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002be4:	4bed      	ldr	r3, [pc, #948]	; (8002f9c <getFusionAHRS_6DoF+0x450>)
 8002be6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002bea:	461d      	mov	r5, r3
 8002bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c3c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c40:	461d      	mov	r5, r3
 8002c42:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c5a:	4ad1      	ldr	r2, [pc, #836]	; (8002fa0 <getFusionAHRS_6DoF+0x454>)
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c66:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8002c6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c6e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002c72:	460b      	mov	r3, r1
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c7e:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 8002c82:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c86:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c92:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c96:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8002c9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c9e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002caa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cb2:	ed93 7a00 	vldr	s14, [r3]
 8002cb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cce:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002cd2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cde:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ce2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cf2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002cfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d1e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002d22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d26:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8002d2a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d34:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d38:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d42:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d58:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d5c:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8002d60:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d64:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8002d70:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d90:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8002d98:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002da4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002db8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8002dc0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dcc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002de0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002de4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002de8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dec:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8002df0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dfa:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002dfe:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002e02:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e08:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e0c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8002e10:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e14:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e30:	461c      	mov	r4, r3
 8002e32:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8002e3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e42:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e46:	ed93 7a00 	vldr	s14, [r3]
 8002e4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e5e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e7e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e86:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8002ea6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eaa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eae:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ec6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eca:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ece:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ed2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ee6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eea:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ef2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f0a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8002f0e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f12:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f16:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f1a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f2e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f32:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f36:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f4e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f52:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f72:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002f76:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f7a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8002f7e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f88:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002f8c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002f90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 8002f96:	bf00      	nop
 8002f98:	e004      	b.n	8002fa4 <getFusionAHRS_6DoF+0x458>
 8002f9a:	bf00      	nop
 8002f9c:	0800ede8 	.word	0x0800ede8
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8002fa8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 8002fb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fba:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fbe:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fce:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fd2:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fe2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fe6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8002fee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ff2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ff6:	4aed      	ldr	r2, [pc, #948]	; (80033ac <getFusionAHRS_6DoF+0x860>)
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	4615      	mov	r5, r2
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800300c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800301a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003028:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003036:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800303a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800303e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003042:	460b      	mov	r3, r1
 8003044:	ca07      	ldmia	r2, {r0, r1, r2}
 8003046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800304a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800304e:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8003052:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003056:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800306e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8003072:	4acf      	ldr	r2, [pc, #828]	; (80033b0 <getFusionAHRS_6DoF+0x864>)
 8003074:	ca07      	ldmia	r2, {r0, r1, r2}
 8003076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800307a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800307e:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8003082:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003086:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800308a:	460b      	mov	r3, r1
 800308c:	ca07      	ldmia	r2, {r0, r1, r2}
 800308e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003092:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003096:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 800309a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800309e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80030a2:	460b      	mov	r3, r1
 80030a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ae:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80030b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030b6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80030ba:	460b      	mov	r3, r1
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80030c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030c6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030ca:	ed93 7a00 	vldr	s14, [r3]
 80030ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030e2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80030e6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80030ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800310a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800310e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003112:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003116:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800311a:	ed93 7a02 	vldr	s14, [r3, #8]
 800311e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003122:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003126:	edd3 7a02 	vldr	s15, [r3, #8]
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003132:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003136:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800313a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800313e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8003142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003146:	ca07      	ldmia	r2, {r0, r1, r2}
 8003148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800314c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003150:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003154:	ca07      	ldmia	r2, {r0, r1, r2}
 8003156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800315a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800315e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003162:	461c      	mov	r4, r3
 8003164:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800316c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003170:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003174:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 8003178:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800317c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8003180:	460b      	mov	r3, r1
 8003182:	ca07      	ldmia	r2, {r0, r1, r2}
 8003184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003188:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800318c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003190:	ed93 7a00 	vldr	s14, [r3]
 8003194:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003198:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031ac:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80031b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80031bc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031c0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031cc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80031d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031dc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80031e4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031fc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003200:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003204:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8003208:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800320c:	ca07      	ldmia	r2, {r0, r1, r2}
 800320e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003212:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003216:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800321a:	ca07      	ldmia	r2, {r0, r1, r2}
 800321c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003220:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003224:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003228:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800322c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003244:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003248:	461c      	mov	r4, r3
 800324a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800324e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003256:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800325a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003266:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003272:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003276:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800327a:	edd3 6a01 	vldr	s13, [r3, #4]
 800327e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003282:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003286:	edd3 7a01 	vldr	s15, [r3, #4]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003292:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003296:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800329a:	edd3 6a02 	vldr	s13, [r3, #8]
 800329e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80032ba:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80032be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ce:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032e2:	edd3 6a04 	vldr	s13, [r3, #16]
 80032e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003302:	edd3 6a05 	vldr	s13, [r3, #20]
 8003306:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800330a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800331e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003322:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003326:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800332a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800332e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003332:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003336:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003342:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003346:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800334a:	edd3 6a07 	vldr	s13, [r3, #28]
 800334e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003352:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003356:	edd3 7a01 	vldr	s15, [r3, #4]
 800335a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003362:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003366:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800336a:	edd3 6a08 	vldr	s13, [r3, #32]
 800336e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003372:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003376:	edd3 7a02 	vldr	s15, [r3, #8]
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003386:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800338a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800338e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003392:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003396:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800339a:	ca07      	ldmia	r2, {r0, r1, r2}
 800339c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033a0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80033a8:	e006      	b.n	80033b8 <getFusionAHRS_6DoF+0x86c>
 80033aa:	bf00      	nop
 80033ac:	0800ede8 	.word	0x0800ede8
 80033b0:	2400000c 	.word	0x2400000c
 80033b4:	42652ee0 	.word	0x42652ee0
 80033b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033be:	bf00      	nop
 80033c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033c8:	461c      	mov	r4, r3
 80033ca:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 80033d6:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 80033da:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 80033de:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80033e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80033ea:	eeb0 0a66 	vmov.f32	s0, s13
 80033ee:	eef0 0a47 	vmov.f32	s1, s14
 80033f2:	eeb0 1a67 	vmov.f32	s2, s15
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7ff fa66 	bl	80028c8 <FusionBiasUpdate>
 80033fc:	eef0 6a40 	vmov.f32	s13, s0
 8003400:	eeb0 7a60 	vmov.f32	s14, s1
 8003404:	eef0 7a41 	vmov.f32	s15, s2
 8003408:	edc7 6a87 	vstr	s13, [r7, #540]	; 0x21c
 800340c:	ed87 7a88 	vstr	s14, [r7, #544]	; 0x220
 8003410:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 8003414:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003418:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003422:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800342a:	ed93 5a00 	vldr	s10, [r3]
 800342e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003432:	ed93 6a02 	vldr	s12, [r3, #8]
 8003436:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 800343a:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 800343e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003442:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003446:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800344a:	eeb0 3a64 	vmov.f32	s6, s9
 800344e:	eef0 1a45 	vmov.f32	s3, s10
 8003452:	eeb0 2a65 	vmov.f32	s4, s11
 8003456:	eef0 2a46 	vmov.f32	s5, s12
 800345a:	eeb0 0a66 	vmov.f32	s0, s13
 800345e:	eef0 0a47 	vmov.f32	s1, s14
 8003462:	eeb0 1a67 	vmov.f32	s2, s15
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f7fe ffba 	bl	80023e0 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800346c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003470:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	f7ff f81d 	bl	80024b4 <FusionAhrsGetQuaternion>
 800347a:	eeb0 6a40 	vmov.f32	s12, s0
 800347e:	eef0 6a60 	vmov.f32	s13, s1
 8003482:	eeb0 7a41 	vmov.f32	s14, s2
 8003486:	eef0 7a61 	vmov.f32	s15, s3
 800348a:	ed87 6a8d 	vstr	s12, [r7, #564]	; 0x234
 800348e:	edc7 6a8e 	vstr	s13, [r7, #568]	; 0x238
 8003492:	ed87 7a8f 	vstr	s14, [r7, #572]	; 0x23c
 8003496:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240
 800349a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800349e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034a2:	461c      	mov	r4, r3
 80034a4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80034a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80034ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034b2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034be:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034d2:	edc7 7abb 	vstr	s15, [r7, #748]	; 0x2ec
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80034d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034da:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034de:	ed93 7a02 	vldr	s14, [r3, #8]
 80034e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034e6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034f6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034fa:	edd3 6a00 	vldr	s13, [r3]
 80034fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003502:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003506:	edd3 7a01 	vldr	s15, [r3, #4]
 800350a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003512:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003516:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800351a:	ed93 7a03 	vldr	s14, [r3, #12]
 800351e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003522:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003526:	edd3 7a03 	vldr	s15, [r3, #12]
 800352a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352e:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	eef0 0a67 	vmov.f32	s1, s15
 800353a:	eeb0 0a66 	vmov.f32	s0, s13
 800353e:	f00a fc07 	bl	800dd50 <atan2f>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	edc7 7aba 	vstr	s15, [r7, #744]	; 0x2e8
    return radians * (180.0f / (float) M_PI);
 800354a:	edd7 7aba 	vldr	s15, [r7, #744]	; 0x2e8
 800354e:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 8003552:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003556:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800355a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800355e:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003562:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003566:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800356a:	ed93 7a01 	vldr	s14, [r3, #4]
 800356e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003572:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003576:	edd3 7a03 	vldr	s15, [r3, #12]
 800357a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003582:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003586:	edd3 6a00 	vldr	s13, [r3]
 800358a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800358e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003592:	edd3 7a02 	vldr	s15, [r3, #8]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	f00a fba7 	bl	800dcf8 <asinf>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	edc7 7ab9 	vstr	s15, [r7, #740]	; 0x2e4
    return radians * (180.0f / (float) M_PI);
 80035b6:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 80035ba:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035c6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80035ca:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80035ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035d2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035de:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035ee:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035f2:	edd3 6a00 	vldr	s13, [r3]
 80035f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035fa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003606:	ee77 6a67 	vsub.f32	s13, s14, s15
 800360a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800360e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003612:	ed93 7a01 	vldr	s14, [r3, #4]
 8003616:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800361a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800361e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003626:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	eef0 0a67 	vmov.f32	s1, s15
 8003632:	eeb0 0a66 	vmov.f32	s0, s13
 8003636:	f00a fb8b 	bl	800dd50 <atan2f>
 800363a:	eef0 7a40 	vmov.f32	s15, s0
 800363e:	edc7 7ab8 	vstr	s15, [r7, #736]	; 0x2e0
    return radians * (180.0f / (float) M_PI);
 8003642:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 8003646:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 800364e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003652:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003656:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 800365a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800365e:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8003662:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003666:	ca07      	ldmia	r2, {r0, r1, r2}
 8003668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800366c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003670:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003674:	461c      	mov	r4, r3
 8003676:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800367a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800367e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 8003682:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003686:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003690:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 8003698:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 80036ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036b2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036bc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	bf00      	nop

080036d0 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	460b      	mov	r3, r1
 80036da:	ed87 0a01 	vstr	s0, [r7, #4]
 80036de:	edc7 0a00 	vstr	s1, [r7]
 80036e2:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 80036e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80037a4 <LPFTwoPole_Init+0xd4>
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d141      	bne.n	800377e <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 80036fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80037a8 <LPFTwoPole_Init+0xd8>
 8003702:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370e:	edd7 7a00 	vldr	s15, [r7]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	edd7 7a00 	vldr	s15, [r7]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 8003724:	edd7 7a05 	vldr	s15, [r7, #20]
 8003728:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80037ac <LPFTwoPole_Init+0xdc>
 800372c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003730:	edd7 7a00 	vldr	s15, [r7]
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	edd3 7a03 	vldr	s15, [r3, #12]
 8003746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003758:	edd7 7a05 	vldr	s15, [r7, #20]
 800375c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80037ac <LPFTwoPole_Init+0xdc>
 8003760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003764:	edd7 7a00 	vldr	s15, [r7]
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003774:	eef1 7a67 	vneg.f32	s15, s15
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40c90fdb 	.word	0x40c90fdb
 80037a8:	3fcfa0f9 	.word	0x3fcfa0f9
 80037ac:	400d2f1b 	.word	0x400d2f1b

080037b0 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80037d8:	edd7 7a00 	vldr	s15, [r7]
 80037dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	ed93 6a05 	vldr	s12, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80037fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	ee07 3a90 	vmov	s15, r3
}
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	ed2d 8b02 	vpush	{d8}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003830:	edc7 0a01 	vstr	s1, [r7, #4]
 8003834:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003838:	edd7 7a02 	vldr	s15, [r7, #8]
 800383c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003840:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003920 <NotchFilterInit+0x100>
 8003844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800384c:	edc7 7a06 	vstr	s15, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003850:	edd7 7a01 	vldr	s15, [r7, #4]
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003920 <NotchFilterInit+0x100>
 800385c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003860:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003864:	edc7 7a05 	vstr	s15, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 8003868:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800386c:	edd7 7a00 	vldr	s15, [r7]
 8003870:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003874:	edd7 7a06 	vldr	s15, [r7, #24]
 8003878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800387c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003880:	edd7 7a00 	vldr	s15, [r7]
 8003884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	f00a f946 	bl	800db1c <tanf>
 8003890:	eef0 7a40 	vmov.f32	s15, s0
 8003894:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003898:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 800389c:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80038b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 80038be:	ed97 7a05 	vldr	s14, [r7, #20]
 80038c2:	edd7 7a00 	vldr	s15, [r7]
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	e013      	b.n	8003906 <NotchFilterInit+0xe6>
	{
		filt->x[n] = 0.0f;
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3304      	adds	r3, #4
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	dde8      	ble.n	80038de <NotchFilterInit+0xbe>
	}
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	ecbd 8b02 	vpop	{d8}
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	f3af 8000 	nop.w
 8003920:	54442d18 	.word	0x54442d18
 8003924:	401921fb 	.word	0x401921fb

08003928 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	edd3 7a02 	vldr	s15, [r3, #8]
 8003966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003978:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	edd3 7a04 	vldr	s15, [r3, #16]
 8003996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399a:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80039a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80039b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	ed93 6a00 	vldr	s12, [r3]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80039d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d8:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	ed93 7a00 	vldr	s14, [r3]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
}
 80039fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a22:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a28:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a40:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a46:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a5e:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a82:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa0:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aaa:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003abe:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4828      	ldr	r0, [pc, #160]	; (8003b7c <MX_GPIO_Init+0x170>)
 8003adc:	f002 fce6 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003ae6:	4826      	ldr	r0, [pc, #152]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003ae8:	f002 fce0 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K1_Pin;
 8003aec:	2308      	movs	r3, #8
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K1_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	4619      	mov	r1, r3
 8003afe:	4821      	ldr	r0, [pc, #132]	; (8003b84 <MX_GPIO_Init+0x178>)
 8003b00:	f002 fb24 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4818      	ldr	r0, [pc, #96]	; (8003b7c <MX_GPIO_Init+0x170>)
 8003b1c:	f002 fb16 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K2_Pin;
 8003b20:	2320      	movs	r3, #32
 8003b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b24:	2300      	movs	r3, #0
 8003b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K2_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	f107 031c 	add.w	r3, r7, #28
 8003b30:	4619      	mov	r1, r3
 8003b32:	4815      	ldr	r0, [pc, #84]	; (8003b88 <MX_GPIO_Init+0x17c>)
 8003b34:	f002 fb0a 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003b52:	f002 fafb 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BMI160_INT_Pin|MPU9250_INT_Pin;
 8003b56:	2360      	movs	r3, #96	; 0x60
 8003b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003b6a:	f002 faef 	bl	800614c <HAL_GPIO_Init>

}
 8003b6e:	bf00      	nop
 8003b70:	3730      	adds	r7, #48	; 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020000 	.word	0x58020000
 8003b80:	58020c00 	.word	0x58020c00
 8003b84:	58021000 	.word	0x58021000
 8003b88:	58020800 	.word	0x58020800

08003b8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <MX_I2C1_Init+0x7c>)
 8003b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <MX_I2C1_Init+0x80>)
 8003b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bc6:	480f      	ldr	r0, [pc, #60]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bc8:	f002 fc8a 	bl	80064e0 <HAL_I2C_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bd2:	f000 fb9f 	bl	8004314 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bda:	f003 f9e5 	bl	8006fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003be4:	f000 fb96 	bl	8004314 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be8:	2100      	movs	r1, #0
 8003bea:	4806      	ldr	r0, [pc, #24]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bec:	f003 fa27 	bl	800703e <HAL_I2CEx_ConfigDigitalFilter>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bf6:	f000 fb8d 	bl	8004314 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f003 fa6c 	bl	80070d8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	24000224 	.word	0x24000224
 8003c08:	40005400 	.word	0x40005400
 8003c0c:	00401242 	.word	0x00401242

08003c10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <MX_I2C2_Init+0x7c>)
 8003c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401242;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <MX_I2C2_Init+0x80>)
 8003c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c4a:	480f      	ldr	r0, [pc, #60]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c4c:	f002 fc48 	bl	80064e0 <HAL_I2C_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003c56:	f000 fb5d 	bl	8004314 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	480a      	ldr	r0, [pc, #40]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c5e:	f003 f9a3 	bl	8006fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003c68:	f000 fb54 	bl	8004314 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4806      	ldr	r0, [pc, #24]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c70:	f003 f9e5 	bl	800703e <HAL_I2CEx_ConfigDigitalFilter>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003c7a:	f000 fb4b 	bl	8004314 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f003 fa2a 	bl	80070d8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	24000270 	.word	0x24000270
 8003c8c:	40005800 	.word	0x40005800
 8003c90:	00401242 	.word	0x00401242

08003c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b0ba      	sub	sp, #232	; 0xe8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	22bc      	movs	r2, #188	; 0xbc
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f006 febf 	bl	800aa38 <memset>
  if(i2cHandle->Instance==I2C1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a49      	ldr	r2, [pc, #292]	; (8003de4 <HAL_I2C_MspInit+0x150>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d142      	bne.n	8003d4a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cce:	f107 0318 	add.w	r3, r7, #24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fa18 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cde:	f000 fb19 	bl	8004314 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce8:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d00:	23c0      	movs	r3, #192	; 0xc0
 8003d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d06:	2312      	movs	r3, #18
 8003d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4831      	ldr	r0, [pc, #196]	; (8003dec <HAL_I2C_MspInit+0x158>)
 8003d26:	f002 fa11 	bl	800614c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003d48:	e047      	b.n	8003dda <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <HAL_I2C_MspInit+0x15c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d142      	bne.n	8003dda <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d54:	2308      	movs	r3, #8
 8003d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d5e:	f107 0318 	add.w	r3, r7, #24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 f9d0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8003d6e:	f000 fad1 	bl	8004314 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d78:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d98:	2312      	movs	r3, #18
 8003d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003daa:	2304      	movs	r3, #4
 8003dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db4:	4619      	mov	r1, r3
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <HAL_I2C_MspInit+0x158>)
 8003db8:	f002 f9c8 	bl	800614c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	37e8      	adds	r7, #232	; 0xe8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40005400 	.word	0x40005400
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58020400 	.word	0x58020400
 8003df0:	40005800 	.word	0x40005800

08003df4 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <DWT_Init+0x28>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <DWT_Init+0x28>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <DWT_Init+0x2c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <DWT_Init+0x2c>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000edf0 	.word	0xe000edf0
 8003e20:	e0001000 	.word	0xe0001000

08003e24 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8003e24:	b4b0      	push	{r4, r5, r7}
 8003e26:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <micros+0x2c>)
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <micros+0x30>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <micros+0x34>)
 8003e32:	fba1 1303 	umull	r1, r3, r1, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	461c      	mov	r4, r3
 8003e40:	4615      	mov	r5, r2
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
}
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bcb0      	pop	{r4, r5, r7}
 8003e4e:	4770      	bx	lr
 8003e50:	e0001000 	.word	0xe0001000
 8003e54:	24000024 	.word	0x24000024
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4804      	ldr	r0, [pc, #16]	; (8003e84 <_write+0x28>)
 8003e74:	f005 fd00 	bl	8009878 <HAL_UART_Transmit>
	return len;
 8003e78:	687b      	ldr	r3, [r7, #4]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	240004bc 	.word	0x240004bc

08003e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8e:	f001 ffb7 	bl	8005e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e92:	f000 f9c5 	bl	8004220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e96:	f7ff fdb9 	bl	8003a0c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8003e9a:	f001 fed3 	bl	8005c44 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8003e9e:	f7ff fe75 	bl	8003b8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003ea2:	f7ff feb5 	bl	8003c10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Init DWT Clock for proper us time tick
  DWT_Init();
 8003ea6:	f7ff ffa5 	bl	8003df4 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003eaa:	4bc3      	ldr	r3, [pc, #780]	; (80041b8 <main+0x330>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	eef0 0a67 	vmov.f32	s1, s15
 8003eb4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80041bc <main+0x334>
 8003eb8:	2101      	movs	r1, #1
 8003eba:	48c1      	ldr	r0, [pc, #772]	; (80041c0 <main+0x338>)
 8003ebc:	f7ff fc08 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003ec0:	4bbd      	ldr	r3, [pc, #756]	; (80041b8 <main+0x330>)
 8003ec2:	edd3 7a00 	vldr	s15, [r3]
 8003ec6:	eef0 0a67 	vmov.f32	s1, s15
 8003eca:	ed9f 0abc 	vldr	s0, [pc, #752]	; 80041bc <main+0x334>
 8003ece:	2101      	movs	r1, #1
 8003ed0:	48bc      	ldr	r0, [pc, #752]	; (80041c4 <main+0x33c>)
 8003ed2:	f7ff fbfd 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003ed6:	4bb8      	ldr	r3, [pc, #736]	; (80041b8 <main+0x330>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	eef0 0a67 	vmov.f32	s1, s15
 8003ee0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80041bc <main+0x334>
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	48b8      	ldr	r0, [pc, #736]	; (80041c8 <main+0x340>)
 8003ee8:	f7ff fbf2 	bl	80036d0 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003eec:	4bb2      	ldr	r3, [pc, #712]	; (80041b8 <main+0x330>)
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eef0 0a67 	vmov.f32	s1, s15
 8003ef6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 80041cc <main+0x344>
 8003efa:	2101      	movs	r1, #1
 8003efc:	48b4      	ldr	r0, [pc, #720]	; (80041d0 <main+0x348>)
 8003efe:	f7ff fbe7 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003f02:	4bad      	ldr	r3, [pc, #692]	; (80041b8 <main+0x330>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	eef0 0a67 	vmov.f32	s1, s15
 8003f0c:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80041cc <main+0x344>
 8003f10:	2101      	movs	r1, #1
 8003f12:	48b0      	ldr	r0, [pc, #704]	; (80041d4 <main+0x34c>)
 8003f14:	f7ff fbdc 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003f18:	4ba7      	ldr	r3, [pc, #668]	; (80041b8 <main+0x330>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	eef0 0a67 	vmov.f32	s1, s15
 8003f22:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 80041cc <main+0x344>
 8003f26:	2101      	movs	r1, #1
 8003f28:	48ab      	ldr	r0, [pc, #684]	; (80041d8 <main+0x350>)
 8003f2a:	f7ff fbd1 	bl	80036d0 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f2e:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <main+0x330>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	eeb0 1a67 	vmov.f32	s2, s15
 8003f38:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f3c:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80041dc <main+0x354>
 8003f40:	48a7      	ldr	r0, [pc, #668]	; (80041e0 <main+0x358>)
 8003f42:	f7ff fc6d 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f46:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <main+0x330>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	eeb0 1a67 	vmov.f32	s2, s15
 8003f50:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f54:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80041dc <main+0x354>
 8003f58:	48a2      	ldr	r0, [pc, #648]	; (80041e4 <main+0x35c>)
 8003f5a:	f7ff fc61 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f5e:	4b96      	ldr	r3, [pc, #600]	; (80041b8 <main+0x330>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	eeb0 1a67 	vmov.f32	s2, s15
 8003f68:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f6c:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80041dc <main+0x354>
 8003f70:	489d      	ldr	r0, [pc, #628]	; (80041e8 <main+0x360>)
 8003f72:	f7ff fc55 	bl	8003820 <NotchFilterInit>

  //Init state estimators
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8003f76:	4b90      	ldr	r3, [pc, #576]	; (80041b8 <main+0x330>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	4a9a      	ldr	r2, [pc, #616]	; (80041ec <main+0x364>)
 8003f82:	499b      	ldr	r1, [pc, #620]	; (80041f0 <main+0x368>)
 8003f84:	489b      	ldr	r0, [pc, #620]	; (80041f4 <main+0x36c>)
 8003f86:	f7fe fdb9 	bl	8002afc <initFusionAHRS>

  //Init sensors
	while (MPU6050_Init(&hi2c1, &imu_t));
 8003f8a:	bf00      	nop
 8003f8c:	499a      	ldr	r1, [pc, #616]	; (80041f8 <main+0x370>)
 8003f8e:	489b      	ldr	r0, [pc, #620]	; (80041fc <main+0x374>)
 8003f90:	f000 f9c6 	bl	8004320 <MPU6050_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f8      	bne.n	8003f8c <main+0x104>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 8003f9a:	4b97      	ldr	r3, [pc, #604]	; (80041f8 <main+0x370>)
 8003f9c:	7e1b      	ldrb	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d104      	bne.n	8003fac <main+0x124>
	{
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	4896      	ldr	r0, [pc, #600]	; (8004200 <main+0x378>)
 8003fa8:	f002 fa80 	bl	80064ac <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Get system time in us
	timer_u64 = micros();
 8003fac:	f7ff ff3a 	bl	8003e24 <micros>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4993      	ldr	r1, [pc, #588]	; (8004204 <main+0x37c>)
 8003fb6:	e9c1 2300 	strd	r2, r3, [r1]

	if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 8003fba:	4b92      	ldr	r3, [pc, #584]	; (8004204 <main+0x37c>)
 8003fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <main+0x380>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	1a84      	subs	r4, r0, r2
 8003fc8:	eb61 0503 	sbc.w	r5, r1, r3
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc fc62 	bl	8000898 <__aeabi_ul2f>
 8003fd4:	ee07 0a10 	vmov	s14, r0
 8003fd8:	4b8c      	ldr	r3, [pc, #560]	; (800420c <main+0x384>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	f2c0 80c2 	blt.w	800416e <main+0x2e6>
 8003fea:	4b83      	ldr	r3, [pc, #524]	; (80041f8 <main+0x370>)
 8003fec:	7e1b      	ldrb	r3, [r3, #24]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f040 80bd 	bne.w	800416e <main+0x2e6>
	{
		lastTime_u64 = micros();
 8003ff4:	f7ff ff16 	bl	8003e24 <micros>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4982      	ldr	r1, [pc, #520]	; (8004208 <main+0x380>)
 8003ffe:	e9c1 2300 	strd	r2, r3, [r1]

		//Read MPU6050 sensor data
		readMPU6050(&hi2c1, &imu_t);
 8004002:	497d      	ldr	r1, [pc, #500]	; (80041f8 <main+0x370>)
 8004004:	487d      	ldr	r0, [pc, #500]	; (80041fc <main+0x374>)
 8004006:	f000 f9f1 	bl	80043ec <readMPU6050>

		//Get accelerometer data in "g" and run LPF
		accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.AccelX_MPU6050_f32));
 800400a:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <main+0x370>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	eeb0 0a67 	vmov.f32	s0, s15
 8004014:	486a      	ldr	r0, [pc, #424]	; (80041c0 <main+0x338>)
 8004016:	f7ff fbcb 	bl	80037b0 <LPFTwoPole_Update>
 800401a:	eef0 7a40 	vmov.f32	s15, s0
 800401e:	4b7c      	ldr	r3, [pc, #496]	; (8004210 <main+0x388>)
 8004020:	edc3 7a00 	vstr	s15, [r3]
		accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.AccelY_MPU6050_f32));
 8004024:	4b74      	ldr	r3, [pc, #464]	; (80041f8 <main+0x370>)
 8004026:	edd3 7a01 	vldr	s15, [r3, #4]
 800402a:	eeb0 0a67 	vmov.f32	s0, s15
 800402e:	4865      	ldr	r0, [pc, #404]	; (80041c4 <main+0x33c>)
 8004030:	f7ff fbbe 	bl	80037b0 <LPFTwoPole_Update>
 8004034:	eef0 7a40 	vmov.f32	s15, s0
 8004038:	4b75      	ldr	r3, [pc, #468]	; (8004210 <main+0x388>)
 800403a:	edc3 7a01 	vstr	s15, [r3, #4]
		accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.AccelZ_MPU6050_f32));
 800403e:	4b6e      	ldr	r3, [pc, #440]	; (80041f8 <main+0x370>)
 8004040:	edd3 7a02 	vldr	s15, [r3, #8]
 8004044:	eeb0 0a67 	vmov.f32	s0, s15
 8004048:	485f      	ldr	r0, [pc, #380]	; (80041c8 <main+0x340>)
 800404a:	f7ff fbb1 	bl	80037b0 <LPFTwoPole_Update>
 800404e:	eef0 7a40 	vmov.f32	s15, s0
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <main+0x388>)
 8004054:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get gyro data in "deg/s" and run LPF
		gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.GyroX_MPU6050_f32);
 8004058:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <main+0x370>)
 800405a:	edd3 7a03 	vldr	s15, [r3, #12]
 800405e:	eeb0 0a67 	vmov.f32	s0, s15
 8004062:	485f      	ldr	r0, [pc, #380]	; (80041e0 <main+0x358>)
 8004064:	f7ff fc60 	bl	8003928 <NotchFilter_Update>
 8004068:	eef0 7a40 	vmov.f32	s15, s0
 800406c:	4b69      	ldr	r3, [pc, #420]	; (8004214 <main+0x38c>)
 800406e:	edc3 7a00 	vstr	s15, [r3]
		gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.GyroY_MPU6050_f32);
 8004072:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <main+0x370>)
 8004074:	edd3 7a04 	vldr	s15, [r3, #16]
 8004078:	eeb0 0a67 	vmov.f32	s0, s15
 800407c:	4859      	ldr	r0, [pc, #356]	; (80041e4 <main+0x35c>)
 800407e:	f7ff fc53 	bl	8003928 <NotchFilter_Update>
 8004082:	eef0 7a40 	vmov.f32	s15, s0
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <main+0x38c>)
 8004088:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.GyroZ_MPU6050_f32);
 800408c:	4b5a      	ldr	r3, [pc, #360]	; (80041f8 <main+0x370>)
 800408e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004092:	eeb0 0a67 	vmov.f32	s0, s15
 8004096:	4854      	ldr	r0, [pc, #336]	; (80041e8 <main+0x360>)
 8004098:	f7ff fc46 	bl	8003928 <NotchFilter_Update>
 800409c:	eef0 7a40 	vmov.f32	s15, s0
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <main+0x38c>)
 80040a2:	edc3 7a02 	vstr	s15, [r3, #8]

		//Put gyro data into Notch Filter to flat-out any data in specific frequency band
		gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 80040a6:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <main+0x38c>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	eeb0 0a67 	vmov.f32	s0, s15
 80040b0:	4847      	ldr	r0, [pc, #284]	; (80041d0 <main+0x348>)
 80040b2:	f7ff fb7d 	bl	80037b0 <LPFTwoPole_Update>
 80040b6:	eef0 7a40 	vmov.f32	s15, s0
 80040ba:	4b57      	ldr	r3, [pc, #348]	; (8004218 <main+0x390>)
 80040bc:	edc3 7a00 	vstr	s15, [r3]
		gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 80040c0:	4b54      	ldr	r3, [pc, #336]	; (8004214 <main+0x38c>)
 80040c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040c6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ca:	4842      	ldr	r0, [pc, #264]	; (80041d4 <main+0x34c>)
 80040cc:	f7ff fb70 	bl	80037b0 <LPFTwoPole_Update>
 80040d0:	eef0 7a40 	vmov.f32	s15, s0
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <main+0x390>)
 80040d6:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 80040da:	4b4e      	ldr	r3, [pc, #312]	; (8004214 <main+0x38c>)
 80040dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80040e0:	eeb0 0a67 	vmov.f32	s0, s15
 80040e4:	483c      	ldr	r0, [pc, #240]	; (80041d8 <main+0x350>)
 80040e6:	f7ff fb63 	bl	80037b0 <LPFTwoPole_Update>
 80040ea:	eef0 7a40 	vmov.f32	s15, s0
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <main+0x390>)
 80040f0:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get state estimations, using quaternion and fusion-quaternion based estimators
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80040f4:	4b46      	ldr	r3, [pc, #280]	; (8004210 <main+0x388>)
 80040f6:	edd3 5a00 	vldr	s11, [r3]
 80040fa:	4b45      	ldr	r3, [pc, #276]	; (8004210 <main+0x388>)
 80040fc:	ed93 5a01 	vldr	s10, [r3, #4]
 8004100:	4b43      	ldr	r3, [pc, #268]	; (8004210 <main+0x388>)
 8004102:	edd3 4a02 	vldr	s9, [r3, #8]
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8004106:	4b44      	ldr	r3, [pc, #272]	; (8004218 <main+0x390>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004110:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80041b0 <main+0x328>
 8004114:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8004118:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 800411c:	4b3e      	ldr	r3, [pc, #248]	; (8004218 <main+0x390>)
 800411e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004126:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80041b0 <main+0x328>
 800412a:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 800412e:	eef7 3bc7 	vcvt.f32.f64	s7, d7
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <main+0x390>)
 8004134:	edd3 7a02 	vldr	s15, [r3, #8]
 8004138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800413c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80041b0 <main+0x328>
 8004140:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8004144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004148:	eef0 2a67 	vmov.f32	s5, s15
 800414c:	eeb0 2a63 	vmov.f32	s4, s7
 8004150:	eef0 1a44 	vmov.f32	s3, s8
 8004154:	eeb0 1a64 	vmov.f32	s2, s9
 8004158:	eef0 0a45 	vmov.f32	s1, s10
 800415c:	eeb0 0a65 	vmov.f32	s0, s11
 8004160:	4a22      	ldr	r2, [pc, #136]	; (80041ec <main+0x364>)
 8004162:	4923      	ldr	r1, [pc, #140]	; (80041f0 <main+0x368>)
 8004164:	4823      	ldr	r0, [pc, #140]	; (80041f4 <main+0x36c>)
 8004166:	f7fe fcf1 	bl	8002b4c <getFusionAHRS_6DoF>

		newData_u8 = TRUE; //Set newData to high for activate UART printer
 800416a:	2301      	movs	r3, #1
 800416c:	71fb      	strb	r3, [r7, #7]

	}//end of timer if

	if(newData_u8)
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f43f af1b 	beq.w	8003fac <main+0x124>
	{
		printf("%f, %f, %f\r\n",
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <main+0x364>)
 8004178:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f\r\n",
 800417c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <main+0x364>)
 8004182:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("%f, %f, %f\r\n",
 8004186:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <main+0x364>)
 800418c:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("%f, %f, %f\r\n",
 8004190:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004194:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004198:	ed8d 7b00 	vstr	d7, [sp]
 800419c:	ec53 2b15 	vmov	r2, r3, d5
 80041a0:	481e      	ldr	r0, [pc, #120]	; (800421c <main+0x394>)
 80041a2:	f007 f893 	bl	800b2cc <iprintf>
		newData_u8 = FALSE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	71fb      	strb	r3, [r7, #7]
	timer_u64 = micros();
 80041aa:	e6ff      	b.n	8003fac <main+0x124>
 80041ac:	f3af 8000 	nop.w
 80041b0:	a2529d39 	.word	0xa2529d39
 80041b4:	3f91df46 	.word	0x3f91df46
 80041b8:	24000018 	.word	0x24000018
 80041bc:	43820000 	.word	0x43820000
 80041c0:	24000394 	.word	0x24000394
 80041c4:	240003ac 	.word	0x240003ac
 80041c8:	240003c4 	.word	0x240003c4
 80041cc:	43800000 	.word	0x43800000
 80041d0:	240003dc 	.word	0x240003dc
 80041d4:	240003f4 	.word	0x240003f4
 80041d8:	2400040c 	.word	0x2400040c
 80041dc:	42940000 	.word	0x42940000
 80041e0:	24000334 	.word	0x24000334
 80041e4:	24000354 	.word	0x24000354
 80041e8:	24000374 	.word	0x24000374
 80041ec:	24000324 	.word	0x24000324
 80041f0:	240002f4 	.word	0x240002f4
 80041f4:	240002d8 	.word	0x240002d8
 80041f8:	240002bc 	.word	0x240002bc
 80041fc:	24000224 	.word	0x24000224
 8004200:	58020000 	.word	0x58020000
 8004204:	24000448 	.word	0x24000448
 8004208:	24000450 	.word	0x24000450
 800420c:	2400001c 	.word	0x2400001c
 8004210:	24000424 	.word	0x24000424
 8004214:	24000430 	.word	0x24000430
 8004218:	2400043c 	.word	0x2400043c
 800421c:	0800ee0c 	.word	0x0800ee0c

08004220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b09c      	sub	sp, #112	; 0x70
 8004224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422a:	224c      	movs	r2, #76	; 0x4c
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f006 fc02 	bl	800aa38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	2220      	movs	r2, #32
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f006 fbfc 	bl	800aa38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004240:	2002      	movs	r0, #2
 8004242:	f002 ff6d 	bl	8007120 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004246:	2300      	movs	r3, #0
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <SystemClock_Config+0xec>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <SystemClock_Config+0xec>)
 8004250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004254:	6193      	str	r3, [r2, #24]
 8004256:	4b2d      	ldr	r3, [pc, #180]	; (800430c <SystemClock_Config+0xec>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <SystemClock_Config+0xf0>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <SystemClock_Config+0xf0>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <SystemClock_Config+0xf0>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004278:	bf00      	nop
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <SystemClock_Config+0xec>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d1f8      	bne.n	800427a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004288:	2301      	movs	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800428c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004292:	2302      	movs	r3, #2
 8004294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004296:	2302      	movs	r3, #2
 8004298:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800429a:	2302      	movs	r3, #2
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80042a2:	2302      	movs	r3, #2
 80042a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 80042aa:	2308      	movs	r3, #8
 80042ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80042ae:	230c      	movs	r3, #12
 80042b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 ff68 	bl	8007194 <HAL_RCC_OscConfig>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80042ca:	f000 f823 	bl	8004314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ce:	233f      	movs	r3, #63	; 0x3f
 80042d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042d2:	2303      	movs	r3, #3
 80042d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80042da:	2308      	movs	r3, #8
 80042dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80042de:	2340      	movs	r3, #64	; 0x40
 80042e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80042e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f003 fb7b 	bl	80079f0 <HAL_RCC_ClockConfig>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004300:	f000 f808 	bl	8004314 <Error_Handler>
  }
}
 8004304:	bf00      	nop
 8004306:	3770      	adds	r7, #112	; 0x70
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	58024800 	.word	0x58024800
 8004310:	58000400 	.word	0x58000400

08004314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i
}
 800431a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800431c:	e7fe      	b.n	800431c <Error_Handler+0x8>
	...

08004320 <MPU6050_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af04      	add	r7, sp, #16
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
	// Init user variables

	DataStruct->CALIBRATIN_OK_u8 = 0;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	761a      	strb	r2, [r3, #24]

	//pre-def. vars
	uint8_t readData;

	printf("MPU6050 is starting... \r\n");
 8004330:	4825      	ldr	r0, [pc, #148]	; (80043c8 <MPU6050_Init+0xa8>)
 8004332:	f007 f851 	bl	800b3d8 <puts>
	printf("-------------------------\r\n");
 8004336:	4825      	ldr	r0, [pc, #148]	; (80043cc <MPU6050_Init+0xac>)
 8004338:	f007 f84e 	bl	800b3d8 <puts>

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 800433c:	2364      	movs	r3, #100	; 0x64
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	2301      	movs	r3, #1
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	f107 030f 	add.w	r3, r7, #15
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2301      	movs	r3, #1
 800434c:	2275      	movs	r2, #117	; 0x75
 800434e:	21d0      	movs	r1, #208	; 0xd0
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f002 fa69 	bl	8006828 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {
		printf("MPU6050 -WHO AM I- is: (Must return 104) %d\r\n", readData);
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	4619      	mov	r1, r3
 800435a:	481d      	ldr	r0, [pc, #116]	; (80043d0 <MPU6050_Init+0xb0>)
 800435c:	f006 ffb6 	bl	800b2cc <iprintf>
		printf("-------------------------\r\n");
 8004360:	481a      	ldr	r0, [pc, #104]	; (80043cc <MPU6050_Init+0xac>)
 8004362:	f007 f839 	bl	800b3d8 <puts>
	}

	if (readData == 104) {
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b68      	cmp	r3, #104	; 0x68
 800436a:	d128      	bne.n	80043be <MPU6050_Init+0x9e>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 800436c:	4919      	ldr	r1, [pc, #100]	; (80043d4 <MPU6050_Init+0xb4>)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fec2 	bl	80050f8 <MPU6050SelfTest>
		if(SerialDebugA){
			printf("MPU6050 Self-Test Succesful! \r\n");
 8004374:	4818      	ldr	r0, [pc, #96]	; (80043d8 <MPU6050_Init+0xb8>)
 8004376:	f007 f82f 	bl	800b3d8 <puts>
			printf("-------------------------\r\n");
 800437a:	4814      	ldr	r0, [pc, #80]	; (80043cc <MPU6050_Init+0xac>)
 800437c:	f007 f82c 	bl	800b3d8 <puts>
		}

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <MPU6050_Init+0xbc>)
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <MPU6050_Init+0xc0>)
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa8a 	bl	80048a0 <calibrateMPU6050>
		if(SerialDebugA){
			printf("MPU6050 Calibration Succesful! \r\n");
 800438c:	4815      	ldr	r0, [pc, #84]	; (80043e4 <MPU6050_Init+0xc4>)
 800438e:	f007 f823 	bl	800b3d8 <puts>
			printf("-------------------------\r\n");
 8004392:	480e      	ldr	r0, [pc, #56]	; (80043cc <MPU6050_Init+0xac>)
 8004394:	f007 f820 	bl	800b3d8 <puts>
		}
		HAL_Delay(1000);
 8004398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800439c:	f001 fdc2 	bl	8005f24 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f99b 	bl	80046dc <initMPU6050>
		if(SerialDebugA){
			printf("MPU6050 Init Succesful! \r\n");
 80043a6:	4810      	ldr	r0, [pc, #64]	; (80043e8 <MPU6050_Init+0xc8>)
 80043a8:	f007 f816 	bl	800b3d8 <puts>
			printf("-------------------------\r\n");
 80043ac:	4807      	ldr	r0, [pc, #28]	; (80043cc <MPU6050_Init+0xac>)
 80043ae:	f007 f813 	bl	800b3d8 <puts>
		}
		HAL_Delay(1000);
 80043b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043b6:	f001 fdb5 	bl	8005f24 <HAL_Delay>

		return 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <MPU6050_Init+0xa0>
	}
	return 1; // Loop forever if communication doesn't happen
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	0800ee1c 	.word	0x0800ee1c
 80043cc:	0800ee38 	.word	0x0800ee38
 80043d0:	0800ee54 	.word	0x0800ee54
 80043d4:	24000488 	.word	0x24000488
 80043d8:	0800ee84 	.word	0x0800ee84
 80043dc:	2400047c 	.word	0x2400047c
 80043e0:	24000470 	.word	0x24000470
 80043e4:	0800eea4 	.word	0x0800eea4
 80043e8:	0800eec8 	.word	0x0800eec8

080043ec <readMPU6050>:

void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80043f6:	2364      	movs	r3, #100	; 0x64
 80043f8:	9302      	str	r3, [sp, #8]
 80043fa:	2301      	movs	r3, #1
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f107 030f 	add.w	r3, r7, #15
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	223a      	movs	r2, #58	; 0x3a
 8004408:	21d0      	movs	r1, #208	; 0xd0
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f002 fa0c 	bl	8006828 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d07d      	beq.n	8004516 <readMPU6050+0x12a>
		readMPU6050AccelData(I2Cx, accelCount_MPU6050);  // Read the x/y/z adc values
 800441a:	4941      	ldr	r1, [pc, #260]	; (8004520 <readMPU6050+0x134>)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8f7 	bl	8004610 <readMPU6050AccelData>
		getMPU6050Ares();
 8004422:	f000 f8c5 	bl	80045b0 <getMPU6050Ares>

		// Now we'll calculate the accleration value into actual g's
		ax_MPU6050 = (float)accelCount_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <readMPU6050+0x134>)
 8004428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <readMPU6050+0x138>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <readMPU6050+0x13c>)
 8004440:	edc3 7a00 	vstr	s15, [r3]
		ay_MPU6050 = (float)accelCount_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <readMPU6050+0x134>)
 8004446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004452:	4b34      	ldr	r3, [pc, #208]	; (8004524 <readMPU6050+0x138>)
 8004454:	edd3 7a00 	vldr	s15, [r3]
 8004458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445c:	4b33      	ldr	r3, [pc, #204]	; (800452c <readMPU6050+0x140>)
 800445e:	edc3 7a00 	vstr	s15, [r3]
		az_MPU6050 = (float)accelCount_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 8004462:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <readMPU6050+0x134>)
 8004464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <readMPU6050+0x138>)
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <readMPU6050+0x144>)
 800447c:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX_MPU6050_f32 = ax_MPU6050;
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <readMPU6050+0x13c>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY_MPU6050_f32 = ay_MPU6050;
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <readMPU6050+0x140>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ_MPU6050_f32 = az_MPU6050;
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <readMPU6050+0x144>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	609a      	str	r2, [r3, #8]

		readMPU6050GyroData(I2Cx, gyroCount_MPU6050);  // Read the x/y/z adc values
 8004498:	4926      	ldr	r1, [pc, #152]	; (8004534 <readMPU6050+0x148>)
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8eb 	bl	8004676 <readMPU6050GyroData>
		getMPU6050Gres();
 80044a0:	f000 f852 	bl	8004548 <getMPU6050Gres>

		// Calculate the gyro value into actual degrees per second
		gx_MPU6050 = (float)gyroCount_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <readMPU6050+0x148>)
 80044a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044b2:	4b21      	ldr	r3, [pc, #132]	; (8004538 <readMPU6050+0x14c>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044bc:	4b1f      	ldr	r3, [pc, #124]	; (800453c <readMPU6050+0x150>)
 80044be:	edc3 7a00 	vstr	s15, [r3]
		gy_MPU6050 = (float)gyroCount_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <readMPU6050+0x148>)
 80044c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <readMPU6050+0x14c>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <readMPU6050+0x154>)
 80044dc:	edc3 7a00 	vstr	s15, [r3]
		gz_MPU6050 = (float)gyroCount_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <readMPU6050+0x148>)
 80044e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <readMPU6050+0x14c>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <readMPU6050+0x158>)
 80044fa:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX_MPU6050_f32 = gx_MPU6050;
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <readMPU6050+0x150>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY_MPU6050_f32 = gy_MPU6050;
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <readMPU6050+0x154>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ_MPU6050_f32 = gz_MPU6050;
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <readMPU6050+0x158>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	615a      	str	r2, [r3, #20]
	}
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	24000460 	.word	0x24000460
 8004524:	24000458 	.word	0x24000458
 8004528:	240004a0 	.word	0x240004a0
 800452c:	240004a4 	.word	0x240004a4
 8004530:	240004a8 	.word	0x240004a8
 8004534:	24000468 	.word	0x24000468
 8004538:	2400045c 	.word	0x2400045c
 800453c:	240004ac 	.word	0x240004ac
 8004540:	240004b0 	.word	0x240004b0
 8004544:	240004b4 	.word	0x240004b4

08004548 <getMPU6050Gres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMPU6050Gres() {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <getMPU6050Gres+0x50>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d81b      	bhi.n	800458c <getMPU6050Gres+0x44>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <getMPU6050Gres+0x14>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004575 	.word	0x08004575
 8004564:	0800457d 	.word	0x0800457d
 8004568:	08004585 	.word	0x08004585
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <getMPU6050Gres+0x54>)
 800456e:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <getMPU6050Gres+0x58>)
 8004570:	601a      	str	r2, [r3, #0]
          break;
 8004572:	e00b      	b.n	800458c <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <getMPU6050Gres+0x54>)
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <getMPU6050Gres+0x5c>)
 8004578:	601a      	str	r2, [r3, #0]
          break;
 800457a:	e007      	b.n	800458c <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <getMPU6050Gres+0x54>)
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <getMPU6050Gres+0x60>)
 8004580:	601a      	str	r2, [r3, #0]
          break;
 8004582:	e003      	b.n	800458c <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <getMPU6050Gres+0x54>)
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <getMPU6050Gres+0x64>)
 8004588:	601a      	str	r2, [r3, #0]
          break;
 800458a:	bf00      	nop
  }
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	24000020 	.word	0x24000020
 800459c:	2400045c 	.word	0x2400045c
 80045a0:	3bfa0000 	.word	0x3bfa0000
 80045a4:	3c7a0000 	.word	0x3c7a0000
 80045a8:	3cfa0000 	.word	0x3cfa0000
 80045ac:	3d7a0000 	.word	0x3d7a0000

080045b0 <getMPU6050Ares>:

void getMPU6050Ares() {
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <getMPU6050Ares+0x58>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d81f      	bhi.n	80045fc <getMPU6050Ares+0x4c>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <getMPU6050Ares+0x14>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045df 	.word	0x080045df
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	080045f3 	.word	0x080045f3
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <getMPU6050Ares+0x5c>)
 80045d6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80045da:	601a      	str	r2, [r3, #0]
          break;
 80045dc:	e00e      	b.n	80045fc <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <getMPU6050Ares+0x5c>)
 80045e0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80045e4:	601a      	str	r2, [r3, #0]
          break;
 80045e6:	e009      	b.n	80045fc <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <getMPU6050Ares+0x5c>)
 80045ea:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80045ee:	601a      	str	r2, [r3, #0]
          break;
 80045f0:	e004      	b.n	80045fc <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <getMPU6050Ares+0x5c>)
 80045f4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80045f8:	601a      	str	r2, [r3, #0]
          break;
 80045fa:	bf00      	nop
  }
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	24000021 	.word	0x24000021
 800460c:	24000458 	.word	0x24000458

08004610 <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af04      	add	r7, sp, #16
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800461a:	2364      	movs	r3, #100	; 0x64
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	2306      	movs	r3, #6
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	223b      	movs	r2, #59	; 0x3b
 800462c:	21d0      	movs	r1, #208	; 0xd0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 f8fa 	bl	8006828 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004634:	7a3b      	ldrb	r3, [r7, #8]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	b21a      	sxth	r2, r3
 800463a:	7a7b      	ldrb	r3, [r7, #9]
 800463c:	b21b      	sxth	r3, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	b21a      	sxth	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004646:	7abb      	ldrb	r3, [r7, #10]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b219      	sxth	r1, r3
 800464c:	7afb      	ldrb	r3, [r7, #11]
 800464e:	b21a      	sxth	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	3302      	adds	r3, #2
 8004654:	430a      	orrs	r2, r1
 8004656:	b212      	sxth	r2, r2
 8004658:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 800465a:	7b3b      	ldrb	r3, [r7, #12]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	b219      	sxth	r1, r3
 8004660:	7b7b      	ldrb	r3, [r7, #13]
 8004662:	b21a      	sxth	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3304      	adds	r3, #4
 8004668:	430a      	orrs	r2, r1
 800466a:	b212      	sxth	r2, r2
 800466c:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af04      	add	r7, sp, #16
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8004680:	2364      	movs	r3, #100	; 0x64
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2306      	movs	r3, #6
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2301      	movs	r3, #1
 8004690:	2243      	movs	r2, #67	; 0x43
 8004692:	21d0      	movs	r1, #208	; 0xd0
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f002 f8c7 	bl	8006828 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 800469a:	7a3b      	ldrb	r3, [r7, #8]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	b21a      	sxth	r2, r3
 80046a0:	7a7b      	ldrb	r3, [r7, #9]
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b21a      	sxth	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80046ac:	7abb      	ldrb	r3, [r7, #10]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b219      	sxth	r1, r3
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	b21a      	sxth	r2, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	3302      	adds	r3, #2
 80046ba:	430a      	orrs	r2, r1
 80046bc:	b212      	sxth	r2, r2
 80046be:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80046c0:	7b3b      	ldrb	r3, [r7, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	b219      	sxth	r1, r3
 80046c6:	7b7b      	ldrb	r3, [r7, #13]
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	430a      	orrs	r2, r1
 80046d0:	b212      	sxth	r2, r2
 80046d2:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80046e8:	2364      	movs	r3, #100	; 0x64
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	2301      	movs	r3, #1
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	f107 030e 	add.w	r3, r7, #14
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2301      	movs	r3, #1
 80046f8:	226b      	movs	r2, #107	; 0x6b
 80046fa:	21d0      	movs	r1, #208	; 0xd0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 ff7f 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004702:	2064      	movs	r0, #100	; 0x64
 8004704:	f001 fc0e 	bl	8005f24 <HAL_Delay>

	writeData = 0x01;
 8004708:	2301      	movs	r3, #1
 800470a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 800470c:	2364      	movs	r3, #100	; 0x64
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	2301      	movs	r3, #1
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	f107 030e 	add.w	r3, r7, #14
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2301      	movs	r3, #1
 800471c:	226b      	movs	r2, #107	; 0x6b
 800471e:	21d0      	movs	r1, #208	; 0xd0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 ff6d 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004726:	2064      	movs	r0, #100	; 0x64
 8004728:	f001 fbfc 	bl	8005f24 <HAL_Delay>

	writeData = 0x03;
 800472c:	2303      	movs	r3, #3
 800472e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8004730:	2364      	movs	r3, #100	; 0x64
 8004732:	9302      	str	r3, [sp, #8]
 8004734:	2301      	movs	r3, #1
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	f107 030e 	add.w	r3, r7, #14
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2301      	movs	r3, #1
 8004740:	221a      	movs	r2, #26
 8004742:	21d0      	movs	r1, #208	; 0xd0
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 ff5b 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800474a:	2064      	movs	r0, #100	; 0x64
 800474c:	f001 fbea 	bl	8005f24 <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8004750:	2300      	movs	r3, #0
 8004752:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004754:	2364      	movs	r3, #100	; 0x64
 8004756:	9302      	str	r3, [sp, #8]
 8004758:	2301      	movs	r3, #1
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	f107 030e 	add.w	r3, r7, #14
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2301      	movs	r3, #1
 8004764:	2219      	movs	r2, #25
 8004766:	21d0      	movs	r1, #208	; 0xd0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 ff49 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800476e:	2064      	movs	r0, #100	; 0x64
 8004770:	f001 fbd8 	bl	8005f24 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004774:	2364      	movs	r3, #100	; 0x64
 8004776:	9302      	str	r3, [sp, #8]
 8004778:	2301      	movs	r3, #1
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	f107 030f 	add.w	r3, r7, #15
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2301      	movs	r3, #1
 8004784:	221b      	movs	r2, #27
 8004786:	21d0      	movs	r1, #208	; 0xd0
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f002 f84d 	bl	8006828 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	f023 0318 	bic.w	r3, r3, #24
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <initMPU6050+0x1bc>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	b25a      	sxtb	r2, r3
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80047b6:	2064      	movs	r0, #100	; 0x64
 80047b8:	f001 fbb4 	bl	8005f24 <HAL_Delay>

	writeData = readData;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80047c0:	2364      	movs	r3, #100	; 0x64
 80047c2:	9302      	str	r3, [sp, #8]
 80047c4:	2301      	movs	r3, #1
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	f107 030e 	add.w	r3, r7, #14
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2301      	movs	r3, #1
 80047d0:	221b      	movs	r2, #27
 80047d2:	21d0      	movs	r1, #208	; 0xd0
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 ff13 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80047da:	2064      	movs	r0, #100	; 0x64
 80047dc:	f001 fba2 	bl	8005f24 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 80047e0:	2364      	movs	r3, #100	; 0x64
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	2301      	movs	r3, #1
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	f107 030f 	add.w	r3, r7, #15
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2301      	movs	r3, #1
 80047f0:	221c      	movs	r2, #28
 80047f2:	21d0      	movs	r1, #208	; 0xd0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f002 f817 	bl	8006828 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	f023 0318 	bic.w	r3, r3, #24
 8004800:	b2db      	uxtb	r3, r3
 8004802:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <initMPU6050+0x1c0>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	b25a      	sxtb	r2, r3
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	b25b      	sxtb	r3, r3
 8004810:	4313      	orrs	r3, r2
 8004812:	b25b      	sxtb	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800481c:	2364      	movs	r3, #100	; 0x64
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	2301      	movs	r3, #1
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	f107 030e 	add.w	r3, r7, #14
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2301      	movs	r3, #1
 800482c:	221c      	movs	r2, #28
 800482e:	21d0      	movs	r1, #208	; 0xd0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 fee5 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004836:	2064      	movs	r0, #100	; 0x64
 8004838:	f001 fb74 	bl	8005f24 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 800483c:	2364      	movs	r3, #100	; 0x64
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	2301      	movs	r3, #1
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	f107 030f 	add.w	r3, r7, #15
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2301      	movs	r3, #1
 800484c:	221d      	movs	r2, #29
 800484e:	21d0      	movs	r1, #208	; 0xd0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 ffe9 	bl	8006828 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	f023 030f 	bic.w	r3, r3, #15
 800485c:	b2db      	uxtb	r3, r3
 800485e:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	f043 0303 	orr.w	r3, r3, #3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 800486e:	2364      	movs	r3, #100	; 0x64
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	2301      	movs	r3, #1
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	f107 030e 	add.w	r3, r7, #14
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2301      	movs	r3, #1
 800487e:	221d      	movs	r2, #29
 8004880:	21d0      	movs	r1, #208	; 0xd0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 febc 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	f001 fb4b 	bl	8005f24 <HAL_Delay>
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	24000020 	.word	0x24000020
 800489c:	24000021 	.word	0x24000021

080048a0 <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b09e      	sub	sp, #120	; 0x78
 80048a4:	af04      	add	r7, sp, #16
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80048ae:	2300      	movs	r3, #0
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	2300      	movs	r3, #0
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	2300      	movs	r3, #0
 80048b8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ba:	2300      	movs	r3, #0
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	2300      	movs	r3, #0
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	2301      	movs	r3, #1
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2301      	movs	r3, #1
 80048dc:	226b      	movs	r2, #107	; 0x6b
 80048de:	21d0      	movs	r1, #208	; 0xd0
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f001 fe8d 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80048e6:	2064      	movs	r0, #100	; 0x64
 80048e8:	f001 fb1c 	bl	8005f24 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80048f2:	2364      	movs	r3, #100	; 0x64
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	2301      	movs	r3, #1
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2301      	movs	r3, #1
 8004902:	226b      	movs	r2, #107	; 0x6b
 8004904:	21d0      	movs	r1, #208	; 0xd0
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f001 fe7a 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8004912:	2364      	movs	r3, #100	; 0x64
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	2301      	movs	r3, #1
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2301      	movs	r3, #1
 8004922:	226c      	movs	r2, #108	; 0x6c
 8004924:	21d0      	movs	r1, #208	; 0xd0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f001 fe6a 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800492c:	20c8      	movs	r0, #200	; 0xc8
 800492e:	f001 faf9 	bl	8005f24 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8004932:	2300      	movs	r3, #0
 8004934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8004938:	2364      	movs	r3, #100	; 0x64
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	2301      	movs	r3, #1
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2301      	movs	r3, #1
 8004948:	2238      	movs	r2, #56	; 0x38
 800494a:	21d0      	movs	r1, #208	; 0xd0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f001 fe57 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004958:	2364      	movs	r3, #100	; 0x64
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	2301      	movs	r3, #1
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	2301      	movs	r3, #1
 8004968:	2223      	movs	r2, #35	; 0x23
 800496a:	21d0      	movs	r1, #208	; 0xd0
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f001 fe47 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004978:	2364      	movs	r3, #100	; 0x64
 800497a:	9302      	str	r3, [sp, #8]
 800497c:	2301      	movs	r3, #1
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2301      	movs	r3, #1
 8004988:	226b      	movs	r2, #107	; 0x6b
 800498a:	21d0      	movs	r1, #208	; 0xd0
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f001 fe37 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004998:	2364      	movs	r3, #100	; 0x64
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	2301      	movs	r3, #1
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2301      	movs	r3, #1
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	21d0      	movs	r1, #208	; 0xd0
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f001 fe27 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 80049b8:	2364      	movs	r3, #100	; 0x64
 80049ba:	9302      	str	r3, [sp, #8]
 80049bc:	2301      	movs	r3, #1
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2301      	movs	r3, #1
 80049c8:	226a      	movs	r2, #106	; 0x6a
 80049ca:	21d0      	movs	r1, #208	; 0xd0
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fe17 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 80049d2:	230c      	movs	r3, #12
 80049d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 80049d8:	2364      	movs	r3, #100	; 0x64
 80049da:	9302      	str	r3, [sp, #8]
 80049dc:	2301      	movs	r3, #1
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2301      	movs	r3, #1
 80049e8:	226a      	movs	r2, #106	; 0x6a
 80049ea:	21d0      	movs	r1, #208	; 0xd0
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f001 fe07 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 80049f2:	200f      	movs	r0, #15
 80049f4:	f001 fa96 	bl	8005f24 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 80049fe:	2364      	movs	r3, #100	; 0x64
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	2301      	movs	r3, #1
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	221a      	movs	r2, #26
 8004a10:	21d0      	movs	r1, #208	; 0xd0
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f001 fdf4 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004a1e:	2364      	movs	r3, #100	; 0x64
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	2301      	movs	r3, #1
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	2219      	movs	r2, #25
 8004a30:	21d0      	movs	r1, #208	; 0xd0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f001 fde4 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004a3e:	2364      	movs	r3, #100	; 0x64
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	2301      	movs	r3, #1
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	221b      	movs	r2, #27
 8004a50:	21d0      	movs	r1, #208	; 0xd0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f001 fdd4 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004a5e:	2364      	movs	r3, #100	; 0x64
 8004a60:	9302      	str	r3, [sp, #8]
 8004a62:	2301      	movs	r3, #1
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	221c      	movs	r2, #28
 8004a70:	21d0      	movs	r1, #208	; 0xd0
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f001 fdc4 	bl	8006600 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004a78:	2383      	movs	r3, #131	; 0x83
 8004a7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004a86:	2340      	movs	r3, #64	; 0x40
 8004a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004a8c:	2364      	movs	r3, #100	; 0x64
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	2301      	movs	r3, #1
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	226a      	movs	r2, #106	; 0x6a
 8004a9e:	21d0      	movs	r1, #208	; 0xd0
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f001 fdad 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004aa6:	2378      	movs	r3, #120	; 0x78
 8004aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004aac:	2364      	movs	r3, #100	; 0x64
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2301      	movs	r3, #1
 8004abc:	2223      	movs	r2, #35	; 0x23
 8004abe:	21d0      	movs	r1, #208	; 0xd0
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f001 fd9d 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004ac6:	2028      	movs	r0, #40	; 0x28
 8004ac8:	f001 fa2c 	bl	8005f24 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004ad2:	2364      	movs	r3, #100	; 0x64
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	2223      	movs	r2, #35	; 0x23
 8004ae4:	21d0      	movs	r1, #208	; 0xd0
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f001 fd8a 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004aec:	2364      	movs	r3, #100	; 0x64
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	2302      	movs	r3, #2
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	2272      	movs	r2, #114	; 0x72
 8004afe:	21d0      	movs	r1, #208	; 0xd0
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f001 fe91 	bl	8006828 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004b06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004b1c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004b20:	4a5a      	ldr	r2, [pc, #360]	; (8004c8c <calibrateMPU6050+0x3ec>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b32:	e077      	b.n	8004c24 <calibrateMPU6050+0x384>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004b34:	2300      	movs	r3, #0
 8004b36:	833b      	strh	r3, [r7, #24]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	837b      	strh	r3, [r7, #26]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	83bb      	strh	r3, [r7, #28]
 8004b40:	2300      	movs	r3, #0
 8004b42:	823b      	strh	r3, [r7, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	827b      	strh	r3, [r7, #18]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004b4c:	2364      	movs	r3, #100	; 0x64
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	230c      	movs	r3, #12
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	2274      	movs	r2, #116	; 0x74
 8004b5e:	21d0      	movs	r1, #208	; 0xd0
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f001 fe61 	bl	8006828 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004b66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	b21a      	sxth	r2, r3
 8004b6e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004b72:	b21b      	sxth	r3, r3
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b21b      	sxth	r3, r3
 8004b78:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004b7a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004b8e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	b21a      	sxth	r2, r3
 8004b96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004ba2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004bb6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	b21a      	sxth	r2, r3
 8004bbe:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004bca:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	b21a      	sxth	r2, r3
 8004bd2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b21b      	sxth	r3, r3
 8004bdc:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004be4:	4413      	add	r3, r2
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004bee:	4413      	add	r3, r2
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c08:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004c1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004c24:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004c28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d381      	bcc.n	8004b34 <calibrateMPU6050+0x294>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8004c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8004c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8004c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8004c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c62:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c6a:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8004c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c72:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c76:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	dd08      	ble.n	8004c90 <calibrateMPU6050+0x3f0>
 8004c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c88:	e007      	b.n	8004c9a <calibrateMPU6050+0x3fa>
 8004c8a:	bf00      	nop
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c96:	4413      	add	r3, r2
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da00      	bge.n	8004ca4 <calibrateMPU6050+0x404>
 8004ca2:	3303      	adds	r3, #3
 8004ca4:	109b      	asrs	r3, r3, #2
 8004ca6:	121b      	asrs	r3, r3, #8
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da00      	bge.n	8004cb8 <calibrateMPU6050+0x418>
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	109b      	asrs	r3, r3, #2
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	425b      	negs	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da00      	bge.n	8004cca <calibrateMPU6050+0x42a>
 8004cc8:	3303      	adds	r3, #3
 8004cca:	109b      	asrs	r3, r3, #2
 8004ccc:	121b      	asrs	r3, r3, #8
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd6:	425b      	negs	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da00      	bge.n	8004cde <calibrateMPU6050+0x43e>
 8004cdc:	3303      	adds	r3, #3
 8004cde:	109b      	asrs	r3, r3, #2
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	425b      	negs	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da00      	bge.n	8004cf0 <calibrateMPU6050+0x450>
 8004cee:	3303      	adds	r3, #3
 8004cf0:	109b      	asrs	r3, r3, #2
 8004cf2:	121b      	asrs	r3, r3, #8
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da00      	bge.n	8004d04 <calibrateMPU6050+0x464>
 8004d02:	3303      	adds	r3, #3
 8004d04:	109b      	asrs	r3, r3, #2
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8004d0c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004d14:	2364      	movs	r3, #100	; 0x64
 8004d16:	9302      	str	r3, [sp, #8]
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2301      	movs	r3, #1
 8004d24:	2213      	movs	r2, #19
 8004d26:	21d0      	movs	r1, #208	; 0xd0
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f001 fc69 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004d2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004d36:	2364      	movs	r3, #100	; 0x64
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2301      	movs	r3, #1
 8004d46:	2214      	movs	r2, #20
 8004d48:	21d0      	movs	r1, #208	; 0xd0
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 fc58 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004d50:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004d58:	2364      	movs	r3, #100	; 0x64
 8004d5a:	9302      	str	r3, [sp, #8]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2301      	movs	r3, #1
 8004d68:	2215      	movs	r2, #21
 8004d6a:	21d0      	movs	r1, #208	; 0xd0
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f001 fc47 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004d72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004d7a:	2364      	movs	r3, #100	; 0x64
 8004d7c:	9302      	str	r3, [sp, #8]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2301      	movs	r3, #1
 8004d8a:	2216      	movs	r2, #22
 8004d8c:	21d0      	movs	r1, #208	; 0xd0
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f001 fc36 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004d94:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004d9c:	2364      	movs	r3, #100	; 0x64
 8004d9e:	9302      	str	r3, [sp, #8]
 8004da0:	2301      	movs	r3, #1
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2301      	movs	r3, #1
 8004dac:	2217      	movs	r2, #23
 8004dae:	21d0      	movs	r1, #208	; 0xd0
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f001 fc25 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004db6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004dbe:	2364      	movs	r3, #100	; 0x64
 8004dc0:	9302      	str	r3, [sp, #8]
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	2218      	movs	r2, #24
 8004dd0:	21d0      	movs	r1, #208	; 0xd0
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f001 fc14 	bl	8006600 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004de2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e16:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8004e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3308      	adds	r3, #8
 8004e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e38:	edc3 7a00 	vstr	s15, [r3]

		printf("-------------------------\r\n");
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e40:	2300      	movs	r3, #0
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e44:	2300      	movs	r3, #0
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8004e48:	2364      	movs	r3, #100	; 0x64
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2301      	movs	r3, #1
 8004e58:	2277      	movs	r2, #119	; 0x77
 8004e5a:	21d0      	movs	r1, #208	; 0xd0
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f001 fce3 	bl	8006828 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004e62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004e70:	2364      	movs	r3, #100	; 0x64
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	2302      	movs	r3, #2
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	227a      	movs	r2, #122	; 0x7a
 8004e82:	21d0      	movs	r1, #208	; 0xd0
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f001 fccf 	bl	8006828 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004e8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004e98:	2364      	movs	r3, #100	; 0x64
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	227d      	movs	r2, #125	; 0x7d
 8004eaa:	21d0      	movs	r1, #208	; 0xd0
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f001 fcbb 	bl	8006828 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004eb2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8004ec4:	4a8a      	ldr	r2, [pc, #552]	; (80050f0 <calibrateMPU6050+0x850>)
 8004ec6:	f107 0320 	add.w	r3, r7, #32
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	8019      	strh	r1, [r3, #0]
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	0c12      	lsrs	r2, r2, #16
 8004ed4:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004edc:	e017      	b.n	8004f0e <calibrateMPU6050+0x66e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8004ede:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	3368      	adds	r3, #104	; 0x68
 8004ee6:	443b      	add	r3, r7
 8004ee8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <calibrateMPU6050+0x664>
 8004ef6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004efa:	3368      	adds	r3, #104	; 0x68
 8004efc:	443b      	add	r3, r7
 8004efe:	2201      	movs	r2, #1
 8004f00:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8004f04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d9e3      	bls.n	8004ede <calibrateMPU6050+0x63e>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da00      	bge.n	8004f20 <calibrateMPU6050+0x680>
 8004f1e:	3307      	adds	r3, #7
 8004f20:	10db      	asrs	r3, r3, #3
 8004f22:	425b      	negs	r3, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da00      	bge.n	8004f32 <calibrateMPU6050+0x692>
 8004f30:	3307      	adds	r3, #7
 8004f32:	10db      	asrs	r3, r3, #3
 8004f34:	425b      	negs	r3, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da00      	bge.n	8004f44 <calibrateMPU6050+0x6a4>
 8004f42:	3307      	adds	r3, #7
 8004f44:	10db      	asrs	r3, r3, #3
 8004f46:	425b      	negs	r3, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	121b      	asrs	r3, r3, #8
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004f5e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	121b      	asrs	r3, r3, #8
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004f80:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004f84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	121b      	asrs	r3, r3, #8
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004fa2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004fa6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8004fb2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004fba:	2364      	movs	r3, #100	; 0x64
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	2277      	movs	r2, #119	; 0x77
 8004fcc:	21d0      	movs	r1, #208	; 0xd0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f001 fb16 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004fd4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004fdc:	2364      	movs	r3, #100	; 0x64
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	2278      	movs	r2, #120	; 0x78
 8004fee:	21d0      	movs	r1, #208	; 0xd0
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f001 fb05 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004ff6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004ffe:	2364      	movs	r3, #100	; 0x64
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	2301      	movs	r3, #1
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	227a      	movs	r2, #122	; 0x7a
 8005010:	21d0      	movs	r1, #208	; 0xd0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f001 faf4 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8005018:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800501c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005020:	2364      	movs	r3, #100	; 0x64
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	2301      	movs	r3, #1
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2301      	movs	r3, #1
 8005030:	227b      	movs	r2, #123	; 0x7b
 8005032:	21d0      	movs	r1, #208	; 0xd0
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f001 fae3 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800503a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800503e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005042:	2364      	movs	r3, #100	; 0x64
 8005044:	9302      	str	r3, [sp, #8]
 8005046:	2301      	movs	r3, #1
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2301      	movs	r3, #1
 8005052:	227d      	movs	r2, #125	; 0x7d
 8005054:	21d0      	movs	r1, #208	; 0xd0
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f001 fad2 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800505c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005064:	2364      	movs	r3, #100	; 0x64
 8005066:	9302      	str	r3, [sp, #8]
 8005068:	2301      	movs	r3, #1
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2301      	movs	r3, #1
 8005074:	227e      	movs	r2, #126	; 0x7e
 8005076:	21d0      	movs	r1, #208	; 0xd0
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f001 fac1 	bl	8006600 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005088:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800508c:	ee07 3a90 	vmov	s15, r3
 8005090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050bc:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050de:	edc3 7a00 	vstr	s15, [r3]
		printf("Accel bias Z: %f\r\n", accelBias_MPU6050Z);

		printf("-------------------------\r\n");
	}
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2201      	movs	r2, #1
 80050e6:	761a      	strb	r2, [r3, #24]

}
 80050e8:	bf00      	nop
 80050ea:	3768      	adds	r7, #104	; 0x68
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	0800eee4 	.word	0x0800eee4
 80050f4:	00000000 	.word	0x00000000

080050f8 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	ed2d 8b02 	vpush	{d8}
 80050fe:	b0a8      	sub	sp, #160	; 0xa0
 8005100:	af04      	add	r7, sp, #16
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8005106:	4aa2      	ldr	r2, [pc, #648]	; (8005390 <MPU6050SelfTest+0x298>)
 8005108:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800510c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005110:	6018      	str	r0, [r3, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	8019      	strh	r1, [r3, #0]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8005116:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
 800512c:	609a      	str	r2, [r3, #8]
 800512e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	605a      	str	r2, [r3, #4]
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8005152:	2364      	movs	r3, #100	; 0x64
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	2301      	movs	r3, #1
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2301      	movs	r3, #1
 8005162:	2219      	movs	r2, #25
 8005164:	21d0      	movs	r1, #208	; 0xd0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fa4a 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800516c:	2302      	movs	r3, #2
 800516e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005172:	2364      	movs	r3, #100	; 0x64
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	2301      	movs	r3, #1
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2301      	movs	r3, #1
 8005182:	221a      	movs	r2, #26
 8005184:	21d0      	movs	r1, #208	; 0xd0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fa3a 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800518c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8005198:	2364      	movs	r3, #100	; 0x64
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	2301      	movs	r3, #1
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	2301      	movs	r3, #1
 80051a8:	221b      	movs	r2, #27
 80051aa:	21d0      	movs	r1, #208	; 0xd0
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fa27 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80051b2:	2302      	movs	r3, #2
 80051b4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80051b8:	2364      	movs	r3, #100	; 0x64
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	2301      	movs	r3, #1
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2301      	movs	r3, #1
 80051c8:	221d      	movs	r2, #29
 80051ca:	21d0      	movs	r1, #208	; 0xd0
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fa17 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80051d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80051de:	2364      	movs	r3, #100	; 0x64
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	2301      	movs	r3, #1
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2301      	movs	r3, #1
 80051ee:	221c      	movs	r2, #28
 80051f0:	21d0      	movs	r1, #208	; 0xd0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fa04 	bl	8006600 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80051f8:	2300      	movs	r3, #0
 80051fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051fe:	e066      	b.n	80052ce <MPU6050SelfTest+0x1d6>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005200:	2364      	movs	r3, #100	; 0x64
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	2306      	movs	r3, #6
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	2301      	movs	r3, #1
 8005210:	223b      	movs	r2, #59	; 0x3b
 8005212:	21d0      	movs	r1, #208	; 0xd0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fb07 	bl	8006828 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521c:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005220:	0212      	lsls	r2, r2, #8
 8005222:	b211      	sxth	r1, r2
 8005224:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8005228:	b212      	sxth	r2, r2
 800522a:	430a      	orrs	r2, r1
 800522c:	b212      	sxth	r2, r2
 800522e:	4413      	add	r3, r2
 8005230:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005234:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8005238:	0212      	lsls	r2, r2, #8
 800523a:	b211      	sxth	r1, r2
 800523c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005240:	b212      	sxth	r2, r2
 8005242:	430a      	orrs	r2, r1
 8005244:	b212      	sxth	r2, r2
 8005246:	4413      	add	r3, r2
 8005248:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800524a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800524c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005250:	0212      	lsls	r2, r2, #8
 8005252:	b211      	sxth	r1, r2
 8005254:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005258:	b212      	sxth	r2, r2
 800525a:	430a      	orrs	r2, r1
 800525c:	b212      	sxth	r2, r2
 800525e:	4413      	add	r3, r2
 8005260:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8005262:	2364      	movs	r3, #100	; 0x64
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	2306      	movs	r3, #6
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	2243      	movs	r2, #67	; 0x43
 8005274:	21d0      	movs	r1, #208	; 0xd0
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fad6 	bl	8006828 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800527c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527e:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005282:	0212      	lsls	r2, r2, #8
 8005284:	b211      	sxth	r1, r2
 8005286:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800528a:	b212      	sxth	r2, r2
 800528c:	430a      	orrs	r2, r1
 800528e:	b212      	sxth	r2, r2
 8005290:	4413      	add	r3, r2
 8005292:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005296:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800529a:	0212      	lsls	r2, r2, #8
 800529c:	b211      	sxth	r1, r2
 800529e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80052a2:	b212      	sxth	r2, r2
 80052a4:	430a      	orrs	r2, r1
 80052a6:	b212      	sxth	r2, r2
 80052a8:	4413      	add	r3, r2
 80052aa:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80052ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ae:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80052b2:	0212      	lsls	r2, r2, #8
 80052b4:	b211      	sxth	r1, r2
 80052b6:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80052ba:	b212      	sxth	r2, r2
 80052bc:	430a      	orrs	r2, r1
 80052be:	b212      	sxth	r2, r2
 80052c0:	4413      	add	r3, r2
 80052c2:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 80052c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d2:	2bc7      	cmp	r3, #199	; 0xc7
 80052d4:	dd94      	ble.n	8005200 <MPU6050SelfTest+0x108>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052dc:	e02c      	b.n	8005338 <MPU6050SelfTest+0x240>
		aAvg[ii] /= 200;
 80052de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	3390      	adds	r3, #144	; 0x90
 80052e6:	443b      	add	r3, r7
 80052e8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80052ec:	4a29      	ldr	r2, [pc, #164]	; (8005394 <MPU6050SelfTest+0x29c>)
 80052ee:	fb82 1203 	smull	r1, r2, r2, r3
 80052f2:	1192      	asrs	r2, r2, #6
 80052f4:	17db      	asrs	r3, r3, #31
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	3390      	adds	r3, #144	; 0x90
 8005300:	443b      	add	r3, r7
 8005302:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8005306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	3390      	adds	r3, #144	; 0x90
 800530e:	443b      	add	r3, r7
 8005310:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <MPU6050SelfTest+0x29c>)
 8005316:	fb82 1203 	smull	r1, r2, r2, r3
 800531a:	1192      	asrs	r2, r2, #6
 800531c:	17db      	asrs	r3, r3, #31
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3390      	adds	r3, #144	; 0x90
 8005328:	443b      	add	r3, r7
 800532a:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 800532e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005332:	3301      	adds	r3, #1
 8005334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800533c:	2b02      	cmp	r3, #2
 800533e:	ddce      	ble.n	80052de <MPU6050SelfTest+0x1e6>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8005340:	23e0      	movs	r3, #224	; 0xe0
 8005342:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8005346:	2364      	movs	r3, #100	; 0x64
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	2301      	movs	r3, #1
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2301      	movs	r3, #1
 8005356:	221c      	movs	r2, #28
 8005358:	21d0      	movs	r1, #208	; 0xd0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 f950 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8005360:	23e0      	movs	r3, #224	; 0xe0
 8005362:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005366:	2364      	movs	r3, #100	; 0x64
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	2301      	movs	r3, #1
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2301      	movs	r3, #1
 8005376:	221b      	movs	r2, #27
 8005378:	21d0      	movs	r1, #208	; 0xd0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f940 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005380:	2019      	movs	r0, #25
 8005382:	f000 fdcf 	bl	8005f24 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800538c:	e06b      	b.n	8005466 <MPU6050SelfTest+0x36e>
 800538e:	bf00      	nop
 8005390:	0800eee8 	.word	0x0800eee8
 8005394:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005398:	2364      	movs	r3, #100	; 0x64
 800539a:	9302      	str	r3, [sp, #8]
 800539c:	2306      	movs	r3, #6
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2301      	movs	r3, #1
 80053a8:	223b      	movs	r2, #59	; 0x3b
 80053aa:	21d0      	movs	r1, #208	; 0xd0
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fa3b 	bl	8006828 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80053b8:	0212      	lsls	r2, r2, #8
 80053ba:	b211      	sxth	r1, r2
 80053bc:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80053c0:	b212      	sxth	r2, r2
 80053c2:	430a      	orrs	r2, r1
 80053c4:	b212      	sxth	r2, r2
 80053c6:	4413      	add	r3, r2
 80053c8:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80053d0:	0212      	lsls	r2, r2, #8
 80053d2:	b211      	sxth	r1, r2
 80053d4:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80053d8:	b212      	sxth	r2, r2
 80053da:	430a      	orrs	r2, r1
 80053dc:	b212      	sxth	r2, r2
 80053de:	4413      	add	r3, r2
 80053e0:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80053e8:	0212      	lsls	r2, r2, #8
 80053ea:	b211      	sxth	r1, r2
 80053ec:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80053f0:	b212      	sxth	r2, r2
 80053f2:	430a      	orrs	r2, r1
 80053f4:	b212      	sxth	r2, r2
 80053f6:	4413      	add	r3, r2
 80053f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80053fa:	2364      	movs	r3, #100	; 0x64
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	2306      	movs	r3, #6
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2301      	movs	r3, #1
 800540a:	2243      	movs	r2, #67	; 0x43
 800540c:	21d0      	movs	r1, #208	; 0xd0
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fa0a 	bl	8006828 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800541a:	0212      	lsls	r2, r2, #8
 800541c:	b211      	sxth	r1, r2
 800541e:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8005422:	b212      	sxth	r2, r2
 8005424:	430a      	orrs	r2, r1
 8005426:	b212      	sxth	r2, r2
 8005428:	4413      	add	r3, r2
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8005432:	0212      	lsls	r2, r2, #8
 8005434:	b211      	sxth	r1, r2
 8005436:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800543a:	b212      	sxth	r2, r2
 800543c:	430a      	orrs	r2, r1
 800543e:	b212      	sxth	r2, r2
 8005440:	4413      	add	r3, r2
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800544a:	0212      	lsls	r2, r2, #8
 800544c:	b211      	sxth	r1, r2
 800544e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005452:	b212      	sxth	r2, r2
 8005454:	430a      	orrs	r2, r1
 8005456:	b212      	sxth	r2, r2
 8005458:	4413      	add	r3, r2
 800545a:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 800545c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005460:	3301      	adds	r3, #1
 8005462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800546a:	2bc7      	cmp	r3, #199	; 0xc7
 800546c:	dd94      	ble.n	8005398 <MPU6050SelfTest+0x2a0>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005474:	e02c      	b.n	80054d0 <MPU6050SelfTest+0x3d8>
		aSTAvg[ii] /= 200;
 8005476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	3390      	adds	r3, #144	; 0x90
 800547e:	443b      	add	r3, r7
 8005480:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005484:	4ac6      	ldr	r2, [pc, #792]	; (80057a0 <MPU6050SelfTest+0x6a8>)
 8005486:	fb82 1203 	smull	r1, r2, r2, r3
 800548a:	1192      	asrs	r2, r2, #6
 800548c:	17db      	asrs	r3, r3, #31
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3390      	adds	r3, #144	; 0x90
 8005498:	443b      	add	r3, r7
 800549a:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 800549e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3390      	adds	r3, #144	; 0x90
 80054a6:	443b      	add	r3, r7
 80054a8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80054ac:	4abc      	ldr	r2, [pc, #752]	; (80057a0 <MPU6050SelfTest+0x6a8>)
 80054ae:	fb82 1203 	smull	r1, r2, r2, r3
 80054b2:	1192      	asrs	r2, r2, #6
 80054b4:	17db      	asrs	r3, r3, #31
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3390      	adds	r3, #144	; 0x90
 80054c0:	443b      	add	r3, r7
 80054c2:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 80054c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ca:	3301      	adds	r3, #1
 80054cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	ddce      	ble.n	8005476 <MPU6050SelfTest+0x37e>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80054de:	2364      	movs	r3, #100	; 0x64
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	2301      	movs	r3, #1
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2301      	movs	r3, #1
 80054ee:	221c      	movs	r2, #28
 80054f0:	21d0      	movs	r1, #208	; 0xd0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 f884 	bl	8006600 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80054fe:	2364      	movs	r3, #100	; 0x64
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	2301      	movs	r3, #1
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2301      	movs	r3, #1
 800550e:	221b      	movs	r2, #27
 8005510:	21d0      	movs	r1, #208	; 0xd0
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f874 	bl	8006600 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005518:	2019      	movs	r0, #25
 800551a:	f000 fd03 	bl	8005f24 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 800551e:	2364      	movs	r3, #100	; 0x64
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	2301      	movs	r3, #1
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2301      	movs	r3, #1
 800552e:	220d      	movs	r2, #13
 8005530:	21d0      	movs	r1, #208	; 0xd0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 f978 	bl	8006828 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 8005538:	2364      	movs	r3, #100	; 0x64
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	2301      	movs	r3, #1
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005544:	3301      	adds	r3, #1
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	2301      	movs	r3, #1
 800554a:	220e      	movs	r2, #14
 800554c:	21d0      	movs	r1, #208	; 0xd0
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f96a 	bl	8006828 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 8005554:	2364      	movs	r3, #100	; 0x64
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	2301      	movs	r3, #1
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005560:	3302      	adds	r3, #2
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	220f      	movs	r2, #15
 8005568:	21d0      	movs	r1, #208	; 0xd0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 f95c 	bl	8006828 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 8005570:	2364      	movs	r3, #100	; 0x64
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	2301      	movs	r3, #1
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800557c:	3303      	adds	r3, #3
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2301      	movs	r3, #1
 8005582:	2200      	movs	r2, #0
 8005584:	21d0      	movs	r1, #208	; 0xd0
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 f94e 	bl	8006828 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 800558c:	2364      	movs	r3, #100	; 0x64
 800558e:	9302      	str	r3, [sp, #8]
 8005590:	2301      	movs	r3, #1
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005598:	3304      	adds	r3, #4
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2301      	movs	r3, #1
 800559e:	2201      	movs	r2, #1
 80055a0:	21d0      	movs	r1, #208	; 0xd0
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 f940 	bl	8006828 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 80055a8:	2364      	movs	r3, #100	; 0x64
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	2301      	movs	r3, #1
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80055b4:	3305      	adds	r3, #5
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2301      	movs	r3, #1
 80055ba:	2202      	movs	r2, #2
 80055bc:	21d0      	movs	r1, #208	; 0xd0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f932 	bl	8006828 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 80055c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80055c8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80055dc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80055f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055f4:	eeb0 1b47 	vmov.f64	d1, d7
 80055f8:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8005798 <MPU6050SelfTest+0x6a0>
 80055fc:	f008 f83c 	bl	800d678 <pow>
 8005600:	eeb0 7b40 	vmov.f64	d7, d0
 8005604:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005608:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800560c:	edc7 7a08 	vstr	s15, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 8005610:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005614:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005624:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005628:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005638:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800563c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005640:	eeb0 1b47 	vmov.f64	d1, d7
 8005644:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8005798 <MPU6050SelfTest+0x6a0>
 8005648:	f008 f816 	bl	800d678 <pow>
 800564c:	eeb0 7b40 	vmov.f64	d7, d0
 8005650:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005654:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005658:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 800565c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005660:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005670:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005674:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005680:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005684:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005688:	ee37 7b46 	vsub.f64	d7, d7, d6
 800568c:	eeb0 1b47 	vmov.f64	d1, d7
 8005690:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8005798 <MPU6050SelfTest+0x6a0>
 8005694:	f007 fff0 	bl	800d678 <pow>
 8005698:	eeb0 7b40 	vmov.f64	d7, d0
 800569c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80056a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80056a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 80056a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80056ac:	f640 223c 	movw	r2, #2620	; 0xa3c
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056bc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80056c0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056d8:	eeb0 1b47 	vmov.f64	d1, d7
 80056dc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8005798 <MPU6050SelfTest+0x6a0>
 80056e0:	f007 ffca 	bl	800d678 <pow>
 80056e4:	eeb0 7b40 	vmov.f64	d7, d0
 80056e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80056ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80056f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 80056f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80056f8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005708:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800570c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800571c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005720:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005724:	eeb0 1b47 	vmov.f64	d1, d7
 8005728:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8005798 <MPU6050SelfTest+0x6a0>
 800572c:	f007 ffa4 	bl	800d678 <pow>
 8005730:	eeb0 7b40 	vmov.f64	d7, d0
 8005734:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005738:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800573c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005740:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005744:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005754:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005758:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005764:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005768:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800576c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005770:	eeb0 1b47 	vmov.f64	d1, d7
 8005774:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8005798 <MPU6050SelfTest+0x6a0>
 8005778:	f007 ff7e 	bl	800d678 <pow>
 800577c:	eeb0 7b40 	vmov.f64	d7, d0
 8005780:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005784:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005788:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 800578c:	2300      	movs	r3, #0
 800578e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005790:	e06d      	b.n	800586e <MPU6050SelfTest+0x776>
 8005792:	bf00      	nop
 8005794:	f3af 8000 	nop.w
 8005798:	c28f5c29 	.word	0xc28f5c29
 800579c:	3ff028f5 	.word	0x3ff028f5
 80057a0:	51eb851f 	.word	0x51eb851f
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80057a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	3390      	adds	r3, #144	; 0x90
 80057aa:	443b      	add	r3, r7
 80057ac:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80057b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	3390      	adds	r3, #144	; 0x90
 80057b6:	443b      	add	r3, r7
 80057b8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057ca:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8005950 <MPU6050SelfTest+0x858>
 80057ce:	ee27 5b06 	vmul.f64	d5, d7, d6
 80057d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	3390      	adds	r3, #144	; 0x90
 80057d8:	443b      	add	r3, r7
 80057da:	3b70      	subs	r3, #112	; 0x70
 80057dc:	edd3 7a00 	vldr	s15, [r3]
 80057e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80057e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057e8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8005950 <MPU6050SelfTest+0x858>
 80057ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80057f4:	ee17 2a90 	vmov	r2, s15
 80057f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	3390      	adds	r3, #144	; 0x90
 80057fe:	443b      	add	r3, r7
 8005800:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3390      	adds	r3, #144	; 0x90
 800580a:	443b      	add	r3, r7
 800580c:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	3390      	adds	r3, #144	; 0x90
 8005816:	443b      	add	r3, r7
 8005818:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005826:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800582a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8005950 <MPU6050SelfTest+0x858>
 800582e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005834:	3303      	adds	r3, #3
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3390      	adds	r3, #144	; 0x90
 800583a:	443b      	add	r3, r7
 800583c:	3b70      	subs	r3, #112	; 0x70
 800583e:	edd3 7a00 	vldr	s15, [r3]
 8005842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005846:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800584a:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005950 <MPU6050SelfTest+0x858>
 800584e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005854:	3303      	adds	r3, #3
 8005856:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800585a:	ee17 2a90 	vmov	r2, s15
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	3390      	adds	r3, #144	; 0x90
 8005862:	443b      	add	r3, r7
 8005864:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8005868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800586a:	3301      	adds	r3, #1
 800586c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800586e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005870:	2b02      	cmp	r3, #2
 8005872:	dd97      	ble.n	80057a4 <MPU6050SelfTest+0x6ac>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
	}

   for (int i = 0; i < 3; i++) {
 8005874:	2300      	movs	r3, #0
 8005876:	67bb      	str	r3, [r7, #120]	; 0x78
 8005878:	e060      	b.n	800593c <MPU6050SelfTest+0x844>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800587a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3390      	adds	r3, #144	; 0x90
 8005880:	443b      	add	r3, r7
 8005882:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3390      	adds	r3, #144	; 0x90
 800588c:	443b      	add	r3, r7
 800588e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800589c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058a0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8005950 <MPU6050SelfTest+0x858>
 80058a4:	ee27 5b06 	vmul.f64	d5, d7, d6
 80058a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	3390      	adds	r3, #144	; 0x90
 80058ae:	443b      	add	r3, r7
 80058b0:	3b70      	subs	r3, #112	; 0x70
 80058b2:	edd3 7a00 	vldr	s15, [r3]
 80058b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80058ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058be:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005950 <MPU6050SelfTest+0x858>
 80058c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058d2:	edc3 7a00 	vstr	s15, [r3]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80058d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	3390      	adds	r3, #144	; 0x90
 80058dc:	443b      	add	r3, r7
 80058de:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80058e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	3390      	adds	r3, #144	; 0x90
 80058e8:	443b      	add	r3, r7
 80058ea:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058fc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8005950 <MPU6050SelfTest+0x858>
 8005900:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005906:	3303      	adds	r3, #3
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3390      	adds	r3, #144	; 0x90
 800590c:	443b      	add	r3, r7
 800590e:	3b70      	subs	r3, #112	; 0x70
 8005910:	edd3 7a00 	vldr	s15, [r3]
 8005914:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005918:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800591c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005950 <MPU6050SelfTest+0x858>
 8005920:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	3303      	adds	r3, #3
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	4413      	add	r3, r2
 800592e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005932:	edc3 7a00 	vstr	s15, [r3]
   for (int i = 0; i < 3; i++) {
 8005936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005938:	3301      	adds	r3, #1
 800593a:	67bb      	str	r3, [r7, #120]	; 0x78
 800593c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593e:	2b02      	cmp	r3, #2
 8005940:	dd9b      	ble.n	800587a <MPU6050SelfTest+0x782>
   }
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	3790      	adds	r7, #144	; 0x90
 8005948:	46bd      	mov	sp, r7
 800594a:	ecbd 8b02 	vpop	{d8}
 800594e:	bd80      	pop	{r7, pc}
 8005950:	00000000 	.word	0x00000000
 8005954:	40590000 	.word	0x40590000

08005958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_MspInit+0x30>)
 8005960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <HAL_MspInit+0x30>)
 8005966:	f043 0302 	orr.w	r3, r3, #2
 800596a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_MspInit+0x30>)
 8005970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	58024400 	.word	0x58024400

0800598c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005990:	e7fe      	b.n	8005990 <NMI_Handler+0x4>

08005992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005996:	e7fe      	b.n	8005996 <HardFault_Handler+0x4>

08005998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800599c:	e7fe      	b.n	800599c <MemManage_Handler+0x4>

0800599e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059a2:	e7fe      	b.n	80059a2 <BusFault_Handler+0x4>

080059a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059a8:	e7fe      	b.n	80059a8 <UsageFault_Handler+0x4>

080059aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059c6:	b480      	push	{r7}
 80059c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059d8:	f000 fa84 	bl	8005ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}

080059e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
	return 1;
 80059e4:	2301      	movs	r3, #1
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <_kill>:

int _kill(int pid, int sig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059fa:	f004 fff3 	bl	800a9e4 <__errno>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2216      	movs	r2, #22
 8005a02:	601a      	str	r2, [r3, #0]
	return -1;
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_exit>:

void _exit (int status)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a18:	f04f 31ff 	mov.w	r1, #4294967295
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ffe7 	bl	80059f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a22:	e7fe      	b.n	8005a22 <_exit+0x12>

08005a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e00a      	b.n	8005a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a36:	f3af 8000 	nop.w
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	60ba      	str	r2, [r7, #8]
 8005a42:	b2ca      	uxtb	r2, r1
 8005a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	dbf0      	blt.n	8005a36 <_read+0x12>
	}

return len;
 8005a54:	687b      	ldr	r3, [r7, #4]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
	return -1;
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a86:	605a      	str	r2, [r3, #4]
	return 0;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <_isatty>:

int _isatty(int file)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8005a9e:	2301      	movs	r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <_sbrk+0x5c>)
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <_sbrk+0x60>)
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <_sbrk+0x64>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <_sbrk+0x64>)
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <_sbrk+0x68>)
 8005ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <_sbrk+0x64>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d207      	bcs.n	8005b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005af8:	f004 ff74 	bl	800a9e4 <__errno>
 8005afc:	4603      	mov	r3, r0
 8005afe:	220c      	movs	r2, #12
 8005b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	e009      	b.n	8005b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <_sbrk+0x64>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <_sbrk+0x64>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <_sbrk+0x64>)
 8005b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	24080000 	.word	0x24080000
 8005b28:	00000800 	.word	0x00000800
 8005b2c:	240004b8 	.word	0x240004b8
 8005b30:	24000560 	.word	0x24000560

08005b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b38:	4b37      	ldr	r3, [pc, #220]	; (8005c18 <SystemInit+0xe4>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	4a36      	ldr	r2, [pc, #216]	; (8005c18 <SystemInit+0xe4>)
 8005b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b48:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <SystemInit+0xe8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d807      	bhi.n	8005b64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b54:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <SystemInit+0xe8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f023 030f 	bic.w	r3, r3, #15
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <SystemInit+0xe8>)
 8005b5e:	f043 0307 	orr.w	r3, r3, #7
 8005b62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b64:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <SystemInit+0xec>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <SystemInit+0xec>)
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b70:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <SystemInit+0xec>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <SystemInit+0xec>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4929      	ldr	r1, [pc, #164]	; (8005c20 <SystemInit+0xec>)
 8005b7c:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <SystemInit+0xf0>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <SystemInit+0xe8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b8e:	4b23      	ldr	r3, [pc, #140]	; (8005c1c <SystemInit+0xe8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 030f 	bic.w	r3, r3, #15
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <SystemInit+0xe8>)
 8005b98:	f043 0307 	orr.w	r3, r3, #7
 8005b9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <SystemInit+0xec>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <SystemInit+0xec>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <SystemInit+0xec>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005bb0:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <SystemInit+0xec>)
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <SystemInit+0xf4>)
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <SystemInit+0xec>)
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <SystemInit+0xf8>)
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005bbc:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <SystemInit+0xec>)
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <SystemInit+0xfc>)
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <SystemInit+0xec>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <SystemInit+0xec>)
 8005bca:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <SystemInit+0xfc>)
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <SystemInit+0xec>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <SystemInit+0xec>)
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <SystemInit+0xfc>)
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <SystemInit+0xec>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <SystemInit+0xec>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <SystemInit+0xec>)
 8005be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <SystemInit+0xec>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <SystemInit+0x100>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <SystemInit+0x104>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfe:	d202      	bcs.n	8005c06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <SystemInit+0x108>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <SystemInit+0x10c>)
 8005c08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005c0c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	e000ed00 	.word	0xe000ed00
 8005c1c:	52002000 	.word	0x52002000
 8005c20:	58024400 	.word	0x58024400
 8005c24:	eaf6ed7f 	.word	0xeaf6ed7f
 8005c28:	02020200 	.word	0x02020200
 8005c2c:	01ff0000 	.word	0x01ff0000
 8005c30:	01010280 	.word	0x01010280
 8005c34:	5c001000 	.word	0x5c001000
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	51008108 	.word	0x51008108
 8005c40:	52004000 	.word	0x52004000

08005c44 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005c48:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c4a:	4a23      	ldr	r2, [pc, #140]	; (8005cd8 <MX_LPUART1_UART_Init+0x94>)
 8005c4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 8005c4e:	4b21      	ldr	r3, [pc, #132]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c50:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <MX_LPUART1_UART_Init+0x98>)
 8005c52:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c54:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005c60:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005c66:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c68:	220c      	movs	r2, #12
 8005c6a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c72:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005c8a:	4812      	ldr	r0, [pc, #72]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c8c:	f003 fda4 	bl	80097d8 <HAL_UART_Init>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8005c96:	f7fe fb3d 	bl	8004314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005c9e:	f004 fdd7 	bl	800a850 <HAL_UARTEx_SetTxFifoThreshold>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8005ca8:	f7fe fb34 	bl	8004314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cac:	2100      	movs	r1, #0
 8005cae:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005cb0:	f004 fe0c 	bl	800a8cc <HAL_UARTEx_SetRxFifoThreshold>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8005cba:	f7fe fb2b 	bl	8004314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005cbe:	4805      	ldr	r0, [pc, #20]	; (8005cd4 <MX_LPUART1_UART_Init+0x90>)
 8005cc0:	f004 fd8d 	bl	800a7de <HAL_UARTEx_DisableFifoMode>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8005cca:	f7fe fb23 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	240004bc 	.word	0x240004bc
 8005cd8:	58000c00 	.word	0x58000c00
 8005cdc:	000f4240 	.word	0x000f4240

08005ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b0b8      	sub	sp, #224	; 0xe0
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	22bc      	movs	r2, #188	; 0xbc
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f004 fe99 	bl	800aa38 <memset>
  if(uartHandle->Instance==LPUART1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <HAL_UART_MspInit+0xc0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d142      	bne.n	8005d96 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005d10:	2304      	movs	r3, #4
 8005d12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d1a:	f107 0310 	add.w	r3, r7, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f002 f9f2 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005d2a:	f7fe faf3 	bl	8004314 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d36:	f043 0308 	orr.w	r3, r3, #8
 8005d3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d4c:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d52:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_UART_MspInit+0xc4>)
 8005d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d72:	2302      	movs	r3, #2
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8005d84:	2303      	movs	r3, #3
 8005d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4805      	ldr	r0, [pc, #20]	; (8005da8 <HAL_UART_MspInit+0xc8>)
 8005d92:	f000 f9db 	bl	800614c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8005d96:	bf00      	nop
 8005d98:	37e0      	adds	r7, #224	; 0xe0
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	58000c00 	.word	0x58000c00
 8005da4:	58024400 	.word	0x58024400
 8005da8:	58020000 	.word	0x58020000

08005dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005db0:	f7ff fec0 	bl	8005b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005db6:	490d      	ldr	r1, [pc, #52]	; (8005dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005db8:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dbc:	e002      	b.n	8005dc4 <LoopCopyDataInit>

08005dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dc2:	3304      	adds	r3, #4

08005dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dc8:	d3f9      	bcc.n	8005dbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005dcc:	4c0a      	ldr	r4, [pc, #40]	; (8005df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dd0:	e001      	b.n	8005dd6 <LoopFillZerobss>

08005dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dd4:	3204      	adds	r2, #4

08005dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dd8:	d3fb      	bcc.n	8005dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dda:	f004 fe09 	bl	800a9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dde:	f7fe f853 	bl	8003e88 <main>
  bx  lr
 8005de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005de4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005de8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005dec:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8005df0:	08011118 	.word	0x08011118
  ldr r2, =_sbss
 8005df4:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8005df8:	24000560 	.word	0x24000560

08005dfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dfc:	e7fe      	b.n	8005dfc <ADC3_IRQHandler>
	...

08005e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e06:	2003      	movs	r0, #3
 8005e08:	f000 f96e 	bl	80060e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e0c:	f001 ffa6 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 8005e10:	4602      	mov	r2, r0
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_Init+0x68>)
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	4913      	ldr	r1, [pc, #76]	; (8005e6c <HAL_Init+0x6c>)
 8005e1e:	5ccb      	ldrb	r3, [r1, r3]
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
 8005e28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <HAL_Init+0x68>)
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <HAL_Init+0x6c>)
 8005e34:	5cd3      	ldrb	r3, [r2, r3]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <HAL_Init+0x70>)
 8005e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e44:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <HAL_Init+0x74>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e4a:	200f      	movs	r0, #15
 8005e4c:	f000 f814 	bl	8005e78 <HAL_InitTick>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e002      	b.n	8005e60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005e5a:	f7ff fd7d 	bl	8005958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	0800eef0 	.word	0x0800eef0
 8005e70:	24000028 	.word	0x24000028
 8005e74:	24000024 	.word	0x24000024

08005e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005e80:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_InitTick+0x60>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e021      	b.n	8005ed0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_InitTick+0x64>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <HAL_InitTick+0x60>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f945 	bl	8006132 <HAL_SYSTICK_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e00e      	b.n	8005ed0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b0f      	cmp	r3, #15
 8005eb6:	d80a      	bhi.n	8005ece <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	f000 f91d 	bl	80060fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ec4:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <HAL_InitTick+0x68>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e000      	b.n	8005ed0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	24000030 	.word	0x24000030
 8005edc:	24000024 	.word	0x24000024
 8005ee0:	2400002c 	.word	0x2400002c

08005ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <HAL_IncTick+0x20>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_IncTick+0x24>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <HAL_IncTick+0x24>)
 8005ef6:	6013      	str	r3, [r2, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	24000030 	.word	0x24000030
 8005f08:	2400054c 	.word	0x2400054c

08005f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <HAL_GetTick+0x14>)
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	2400054c 	.word	0x2400054c

08005f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f2c:	f7ff ffee 	bl	8005f0c <HAL_GetTick>
 8005f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d005      	beq.n	8005f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <HAL_Delay+0x44>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f4a:	bf00      	nop
 8005f4c:	f7ff ffde 	bl	8005f0c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d8f7      	bhi.n	8005f4c <HAL_Delay+0x28>
  {
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	24000030 	.word	0x24000030

08005f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_GetREVID+0x14>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	0c1b      	lsrs	r3, r3, #16
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	5c001000 	.word	0x5c001000

08005f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	60d3      	str	r3, [r2, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00
 8005fc8:	05fa0000 	.word	0x05fa0000

08005fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0a1b      	lsrs	r3, r3, #8
 8005fd6:	f003 0307 	and.w	r3, r3, #7
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	e000ed00 	.word	0xe000ed00

08005fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db0a      	blt.n	8006012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	490c      	ldr	r1, [pc, #48]	; (8006034 <__NVIC_SetPriority+0x4c>)
 8006002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	440b      	add	r3, r1
 800600c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006010:	e00a      	b.n	8006028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	4908      	ldr	r1, [pc, #32]	; (8006038 <__NVIC_SetPriority+0x50>)
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	3b04      	subs	r3, #4
 8006020:	0112      	lsls	r2, r2, #4
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	440b      	add	r3, r1
 8006026:	761a      	strb	r2, [r3, #24]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	e000e100 	.word	0xe000e100
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f1c3 0307 	rsb	r3, r3, #7
 8006056:	2b04      	cmp	r3, #4
 8006058:	bf28      	it	cs
 800605a:	2304      	movcs	r3, #4
 800605c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3304      	adds	r3, #4
 8006062:	2b06      	cmp	r3, #6
 8006064:	d902      	bls.n	800606c <NVIC_EncodePriority+0x30>
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3b03      	subs	r3, #3
 800606a:	e000      	b.n	800606e <NVIC_EncodePriority+0x32>
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	401a      	ands	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006084:	f04f 31ff 	mov.w	r1, #4294967295
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	43d9      	mvns	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	4313      	orrs	r3, r2
         );
}
 8006096:	4618      	mov	r0, r3
 8006098:	3724      	adds	r7, #36	; 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060b4:	d301      	bcc.n	80060ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00f      	b.n	80060da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <SysTick_Config+0x40>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3b01      	subs	r3, #1
 80060c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060c2:	210f      	movs	r1, #15
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	f7ff ff8e 	bl	8005fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <SysTick_Config+0x40>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060d2:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <SysTick_Config+0x40>)
 80060d4:	2207      	movs	r2, #7
 80060d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000e010 	.word	0xe000e010

080060e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff47 	bl	8005f84 <__NVIC_SetPriorityGrouping>
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800610c:	f7ff ff5e 	bl	8005fcc <__NVIC_GetPriorityGrouping>
 8006110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	f7ff ff90 	bl	800603c <NVIC_EncodePriority>
 800611c:	4602      	mov	r2, r0
 800611e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006122:	4611      	mov	r1, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff5f 	bl	8005fe8 <__NVIC_SetPriority>
}
 800612a:	bf00      	nop
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ffb2 	bl	80060a4 <SysTick_Config>
 8006140:	4603      	mov	r3, r0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	; 0x24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800615a:	4b89      	ldr	r3, [pc, #548]	; (8006380 <HAL_GPIO_Init+0x234>)
 800615c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800615e:	e194      	b.n	800648a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	2101      	movs	r1, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	4013      	ands	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8186 	beq.w	8006484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d005      	beq.n	8006190 <HAL_GPIO_Init+0x44>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d130      	bne.n	80061f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	2203      	movs	r2, #3
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061c6:	2201      	movs	r2, #1
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	f003 0201 	and.w	r2, r3, #1
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d017      	beq.n	800622e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	2203      	movs	r2, #3
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d123      	bne.n	8006282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	08da      	lsrs	r2, r3, #3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3208      	adds	r2, #8
 8006242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	220f      	movs	r2, #15
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	08da      	lsrs	r2, r3, #3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3208      	adds	r2, #8
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	2203      	movs	r2, #3
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 0203 	and.w	r2, r3, #3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80e0 	beq.w	8006484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062c4:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062ca:	4a2e      	ldr	r2, [pc, #184]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062cc:	f043 0302 	orr.w	r3, r3, #2
 80062d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e2:	4a29      	ldr	r2, [pc, #164]	; (8006388 <HAL_GPIO_Init+0x23c>)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	3302      	adds	r3, #2
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	220f      	movs	r2, #15
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_GPIO_Init+0x240>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d052      	beq.n	80063b4 <HAL_GPIO_Init+0x268>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <HAL_GPIO_Init+0x244>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_GPIO_Init+0x22e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_GPIO_Init+0x248>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02b      	beq.n	8006376 <HAL_GPIO_Init+0x22a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_GPIO_Init+0x24c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d025      	beq.n	8006372 <HAL_GPIO_Init+0x226>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_GPIO_Init+0x250>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <HAL_GPIO_Init+0x222>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a1b      	ldr	r2, [pc, #108]	; (80063a0 <HAL_GPIO_Init+0x254>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d019      	beq.n	800636a <HAL_GPIO_Init+0x21e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_GPIO_Init+0x258>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_Init+0x21a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_GPIO_Init+0x25c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00d      	beq.n	8006362 <HAL_GPIO_Init+0x216>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_GPIO_Init+0x260>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <HAL_GPIO_Init+0x212>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_GPIO_Init+0x264>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_GPIO_Init+0x20e>
 8006356:	2309      	movs	r3, #9
 8006358:	e02d      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800635a:	230a      	movs	r3, #10
 800635c:	e02b      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800635e:	2308      	movs	r3, #8
 8006360:	e029      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006362:	2307      	movs	r3, #7
 8006364:	e027      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006366:	2306      	movs	r3, #6
 8006368:	e025      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800636a:	2305      	movs	r3, #5
 800636c:	e023      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800636e:	2304      	movs	r3, #4
 8006370:	e021      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006372:	2303      	movs	r3, #3
 8006374:	e01f      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006376:	2302      	movs	r3, #2
 8006378:	e01d      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800637a:	2301      	movs	r3, #1
 800637c:	e01b      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800637e:	bf00      	nop
 8006380:	58000080 	.word	0x58000080
 8006384:	58024400 	.word	0x58024400
 8006388:	58000400 	.word	0x58000400
 800638c:	58020000 	.word	0x58020000
 8006390:	58020400 	.word	0x58020400
 8006394:	58020800 	.word	0x58020800
 8006398:	58020c00 	.word	0x58020c00
 800639c:	58021000 	.word	0x58021000
 80063a0:	58021400 	.word	0x58021400
 80063a4:	58021800 	.word	0x58021800
 80063a8:	58021c00 	.word	0x58021c00
 80063ac:	58022000 	.word	0x58022000
 80063b0:	58022400 	.word	0x58022400
 80063b4:	2300      	movs	r3, #0
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	f002 0203 	and.w	r2, r2, #3
 80063bc:	0092      	lsls	r2, r2, #2
 80063be:	4093      	lsls	r3, r2
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c6:	4938      	ldr	r1, [pc, #224]	; (80064a8 <HAL_GPIO_Init+0x35c>)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	3302      	adds	r3, #2
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	43db      	mvns	r3, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4013      	ands	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	43db      	mvns	r3, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4013      	ands	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	f47f ae63 	bne.w	8006160 <HAL_GPIO_Init+0x14>
  }
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	3724      	adds	r7, #36	; 0x24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	58000400 	.word	0x58000400

080064ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064c8:	e003      	b.n	80064d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	041a      	lsls	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	619a      	str	r2, [r3, #24]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e07f      	b.n	80065f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fd fbc4 	bl	8003c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2224      	movs	r2, #36	; 0x24
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0201 	bic.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006530:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006540:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d107      	bne.n	800655a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	e006      	b.n	8006568 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006566:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d104      	bne.n	800657a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_I2C_Init+0x11c>)
 8006586:	430b      	orrs	r3, r1
 8006588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69d9      	ldr	r1, [r3, #28]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	02008000 	.word	0x02008000

08006600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	817b      	strh	r3, [r7, #10]
 8006612:	460b      	mov	r3, r1
 8006614:	813b      	strh	r3, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b20      	cmp	r3, #32
 8006624:	f040 80f9 	bne.w	800681a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_I2C_Mem_Write+0x34>
 800662e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0ed      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_I2C_Mem_Write+0x4e>
 800664a:	2302      	movs	r3, #2
 800664c:	e0e6      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006656:	f7ff fc59 	bl	8005f0c <HAL_GetTick>
 800665a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2319      	movs	r3, #25
 8006662:	2201      	movs	r2, #1
 8006664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fac3 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0d1      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2221      	movs	r2, #33	; 0x21
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2240      	movs	r2, #64	; 0x40
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066a0:	88f8      	ldrh	r0, [r7, #6]
 80066a2:	893a      	ldrh	r2, [r7, #8]
 80066a4:	8979      	ldrh	r1, [r7, #10]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4603      	mov	r3, r0
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f9d3 	bl	8006a5c <I2C_RequestMemoryWrite>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0a9      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	d90e      	bls.n	80066f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	8979      	ldrh	r1, [r7, #10]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fc2b 	bl	8006f44 <I2C_TransferConfig>
 80066ee:	e00f      	b.n	8006710 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	8979      	ldrh	r1, [r7, #10]
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fc1a 	bl	8006f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 faad 	bl	8006c74 <I2C_WaitOnTXISFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e07b      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d034      	beq.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d130      	bne.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fa3f 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e04d      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2bff      	cmp	r3, #255	; 0xff
 8006788:	d90e      	bls.n	80067a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	2300      	movs	r3, #0
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fbcf 	bl	8006f44 <I2C_TransferConfig>
 80067a6:	e00f      	b.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	8979      	ldrh	r1, [r7, #10]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fbbe 	bl	8006f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d19e      	bne.n	8006710 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa8c 	bl	8006cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e01a      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2220      	movs	r2, #32
 80067ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6859      	ldr	r1, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <HAL_I2C_Mem_Write+0x224>)
 80067fa:	400b      	ands	r3, r1
 80067fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	fe00e800 	.word	0xfe00e800

08006828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	461a      	mov	r2, r3
 8006836:	4603      	mov	r3, r0
 8006838:	817b      	strh	r3, [r7, #10]
 800683a:	460b      	mov	r3, r1
 800683c:	813b      	strh	r3, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	f040 80fd 	bne.w	8006a4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_I2C_Mem_Read+0x34>
 8006856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0f1      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_I2C_Mem_Read+0x4e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0ea      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800687e:	f7ff fb45 	bl	8005f0c <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2319      	movs	r3, #25
 800688a:	2201      	movs	r2, #1
 800688c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f9af 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0d5      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2222      	movs	r2, #34	; 0x22
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c8:	88f8      	ldrh	r0, [r7, #6]
 80068ca:	893a      	ldrh	r2, [r7, #8]
 80068cc:	8979      	ldrh	r1, [r7, #10]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4603      	mov	r3, r0
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f913 	bl	8006b04 <I2C_RequestMemoryRead>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0ad      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2bff      	cmp	r3, #255	; 0xff
 80068f8:	d90e      	bls.n	8006918 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	22ff      	movs	r2, #255	; 0xff
 80068fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006904:	b2da      	uxtb	r2, r3
 8006906:	8979      	ldrh	r1, [r7, #10]
 8006908:	4b52      	ldr	r3, [pc, #328]	; (8006a54 <HAL_I2C_Mem_Read+0x22c>)
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fb17 	bl	8006f44 <I2C_TransferConfig>
 8006916:	e00f      	b.n	8006938 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006926:	b2da      	uxtb	r2, r3
 8006928:	8979      	ldrh	r1, [r7, #10]
 800692a:	4b4a      	ldr	r3, [pc, #296]	; (8006a54 <HAL_I2C_Mem_Read+0x22c>)
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fb06 	bl	8006f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	2200      	movs	r2, #0
 8006940:	2104      	movs	r1, #4
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f956 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07c      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d034      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	d130      	bne.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2200      	movs	r2, #0
 800699e:	2180      	movs	r1, #128	; 0x80
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f927 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e04d      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2bff      	cmp	r3, #255	; 0xff
 80069b8:	d90e      	bls.n	80069d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	8979      	ldrh	r1, [r7, #10]
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fab7 	bl	8006f44 <I2C_TransferConfig>
 80069d6:	e00f      	b.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	8979      	ldrh	r1, [r7, #10]
 80069ea:	2300      	movs	r3, #0
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 faa6 	bl	8006f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d19a      	bne.n	8006938 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f974 	bl	8006cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e01a      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_I2C_Mem_Read+0x230>)
 8006a2a:	400b      	ands	r3, r1
 8006a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	80002400 	.word	0x80002400
 8006a58:	fe00e800 	.word	0xfe00e800

08006a5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	813b      	strh	r3, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	8979      	ldrh	r1, [r7, #10]
 8006a7c:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <I2C_RequestMemoryWrite+0xa4>)
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fa5d 	bl	8006f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	69b9      	ldr	r1, [r7, #24]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f8f0 	bl	8006c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e02c      	b.n	8006af8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	629a      	str	r2, [r3, #40]	; 0x28
 8006aae:	e015      	b.n	8006adc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab0:	893b      	ldrh	r3, [r7, #8]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	69b9      	ldr	r1, [r7, #24]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f8d6 	bl	8006c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e012      	b.n	8006af8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f884 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	80002000 	.word	0x80002000

08006b04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	817b      	strh	r3, [r7, #10]
 8006b16:	460b      	mov	r3, r1
 8006b18:	813b      	strh	r3, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	8979      	ldrh	r1, [r7, #10]
 8006b24:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <I2C_RequestMemoryRead+0xa4>)
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fa0a 	bl	8006f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f89d 	bl	8006c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e02c      	b.n	8006b9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d105      	bne.n	8006b56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4a:	893b      	ldrh	r3, [r7, #8]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
 8006b54:	e015      	b.n	8006b82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b56:	893b      	ldrh	r3, [r7, #8]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	69b9      	ldr	r1, [r7, #24]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f883 	bl	8006c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e012      	b.n	8006b9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2140      	movs	r1, #64	; 0x40
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f831 	bl	8006bf4 <I2C_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	80002000 	.word	0x80002000

08006bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d007      	beq.n	8006be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	619a      	str	r2, [r3, #24]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c04:	e022      	b.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d01e      	beq.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0e:	f7ff f97d 	bl	8005f0c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d113      	bne.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	f043 0220 	orr.w	r2, r3, #32
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e00f      	b.n	8006c6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4013      	ands	r3, r2
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2301      	moveq	r3, #1
 8006c5e:	2300      	movne	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d0cd      	beq.n	8006c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c80:	e02c      	b.n	8006cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f870 	bl	8006d6c <I2C_IsErrorOccurred>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e02a      	b.n	8006cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d01e      	beq.n	8006cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7ff f935 	bl	8005f0c <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d113      	bne.n	8006cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e007      	b.n	8006cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d1cb      	bne.n	8006c82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d00:	e028      	b.n	8006d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f830 	bl	8006d6c <I2C_IsErrorOccurred>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e026      	b.n	8006d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d16:	f7ff f8f9 	bl	8005f0c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d302      	bcc.n	8006d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d113      	bne.n	8006d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e007      	b.n	8006d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d1cf      	bne.n	8006d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d075      	beq.n	8006e84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006da0:	e056      	b.n	8006e50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d052      	beq.n	8006e50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7ff f8af 	bl	8005f0c <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <I2C_IsErrorOccurred+0x54>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d147      	bne.n	8006e50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de2:	d12e      	bne.n	8006e42 <I2C_IsErrorOccurred+0xd6>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dea:	d02a      	beq.n	8006e42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d027      	beq.n	8006e42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e02:	f7ff f883 	bl	8005f0c <HAL_GetTick>
 8006e06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e08:	e01b      	b.n	8006e42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e0a:	f7ff f87f 	bl	8005f0c <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b19      	cmp	r3, #25
 8006e16:	d914      	bls.n	8006e42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f003 0320 	and.w	r3, r3, #32
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d1dc      	bne.n	8006e0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d003      	beq.n	8006e66 <I2C_IsErrorOccurred+0xfa>
 8006e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d09d      	beq.n	8006da2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2220      	movs	r2, #32
 8006e74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00b      	beq.n	8006eae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f043 0308 	orr.w	r3, r3, #8
 8006ebe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01c      	beq.n	8006f34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff fe56 	bl	8006bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <I2C_IsErrorOccurred+0x1d4>)
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3728      	adds	r7, #40	; 0x28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	fe00e800 	.word	0xfe00e800

08006f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	817b      	strh	r3, [r7, #10]
 8006f52:	4613      	mov	r3, r2
 8006f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f56:	897b      	ldrh	r3, [r7, #10]
 8006f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f5c:	7a7b      	ldrb	r3, [r7, #9]
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f64:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f72:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	0d5b      	lsrs	r3, r3, #21
 8006f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f82:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <I2C_TransferConfig+0x60>)
 8006f84:	430b      	orrs	r3, r1
 8006f86:	43db      	mvns	r3, r3
 8006f88:	ea02 0103 	and.w	r1, r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	03ff63ff 	.word	0x03ff63ff

08006fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d138      	bne.n	8007030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e032      	b.n	8007032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	; 0x24
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6819      	ldr	r1, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	e000      	b.n	8007032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007030:	2302      	movs	r3, #2
  }
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b20      	cmp	r3, #32
 8007052:	d139      	bne.n	80070c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800705e:	2302      	movs	r3, #2
 8007060:	e033      	b.n	80070ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2224      	movs	r2, #36	; 0x24
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80070e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070e6:	4a0c      	ldr	r2, [pc, #48]	; (8007118 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80070f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4906      	ldr	r1, [pc, #24]	; (800711c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4313      	orrs	r3, r2
 8007108:	604b      	str	r3, [r1, #4]
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58024400 	.word	0x58024400
 800711c:	58000400 	.word	0x58000400

08007120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007128:	4b19      	ldr	r3, [pc, #100]	; (8007190 <HAL_PWREx_ConfigSupply+0x70>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b04      	cmp	r3, #4
 8007132:	d00a      	beq.n	800714a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007134:	4b16      	ldr	r3, [pc, #88]	; (8007190 <HAL_PWREx_ConfigSupply+0x70>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d001      	beq.n	8007146 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e01f      	b.n	8007186 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e01d      	b.n	8007186 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800714a:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_PWREx_ConfigSupply+0x70>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f023 0207 	bic.w	r2, r3, #7
 8007152:	490f      	ldr	r1, [pc, #60]	; (8007190 <HAL_PWREx_ConfigSupply+0x70>)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4313      	orrs	r3, r2
 8007158:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800715a:	f7fe fed7 	bl	8005f0c <HAL_GetTick>
 800715e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007160:	e009      	b.n	8007176 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007162:	f7fe fed3 	bl	8005f0c <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007170:	d901      	bls.n	8007176 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e007      	b.n	8007186 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <HAL_PWREx_ConfigSupply+0x70>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	d1ee      	bne.n	8007162 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	58024800 	.word	0x58024800

08007194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	; 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f000 bc1d 	b.w	80079e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8087 	beq.w	80072c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071b6:	4b99      	ldr	r3, [pc, #612]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071c0:	4b96      	ldr	r3, [pc, #600]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d007      	beq.n	80071dc <HAL_RCC_OscConfig+0x48>
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	2b18      	cmp	r3, #24
 80071d0:	d110      	bne.n	80071f4 <HAL_RCC_OscConfig+0x60>
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d10b      	bne.n	80071f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	4b8f      	ldr	r3, [pc, #572]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d06c      	beq.n	80072c2 <HAL_RCC_OscConfig+0x12e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d168      	bne.n	80072c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e3f6      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fc:	d106      	bne.n	800720c <HAL_RCC_OscConfig+0x78>
 80071fe:	4b87      	ldr	r3, [pc, #540]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a86      	ldr	r2, [pc, #536]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	e02e      	b.n	800726a <HAL_RCC_OscConfig+0xd6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10c      	bne.n	800722e <HAL_RCC_OscConfig+0x9a>
 8007214:	4b81      	ldr	r3, [pc, #516]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a80      	ldr	r2, [pc, #512]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800721a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	4b7e      	ldr	r3, [pc, #504]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a7d      	ldr	r2, [pc, #500]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	e01d      	b.n	800726a <HAL_RCC_OscConfig+0xd6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007236:	d10c      	bne.n	8007252 <HAL_RCC_OscConfig+0xbe>
 8007238:	4b78      	ldr	r3, [pc, #480]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a77      	ldr	r2, [pc, #476]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800723e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	4b75      	ldr	r3, [pc, #468]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a74      	ldr	r2, [pc, #464]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800724a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e00b      	b.n	800726a <HAL_RCC_OscConfig+0xd6>
 8007252:	4b72      	ldr	r3, [pc, #456]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a71      	ldr	r2, [pc, #452]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	4b6f      	ldr	r3, [pc, #444]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a6e      	ldr	r2, [pc, #440]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007268:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d013      	beq.n	800729a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007272:	f7fe fe4b 	bl	8005f0c <HAL_GetTick>
 8007276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800727a:	f7fe fe47 	bl	8005f0c <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b64      	cmp	r3, #100	; 0x64
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e3aa      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728c:	4b63      	ldr	r3, [pc, #396]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0xe6>
 8007298:	e014      	b.n	80072c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729a:	f7fe fe37 	bl	8005f0c <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a2:	f7fe fe33 	bl	8005f0c <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b64      	cmp	r3, #100	; 0x64
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e396      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072b4:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f0      	bne.n	80072a2 <HAL_RCC_OscConfig+0x10e>
 80072c0:	e000      	b.n	80072c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80cb 	beq.w	8007468 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d2:	4b52      	ldr	r3, [pc, #328]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072dc:	4b4f      	ldr	r3, [pc, #316]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <HAL_RCC_OscConfig+0x164>
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2b18      	cmp	r3, #24
 80072ec:	d156      	bne.n	800739c <HAL_RCC_OscConfig+0x208>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d151      	bne.n	800739c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072f8:	4b48      	ldr	r3, [pc, #288]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_RCC_OscConfig+0x17c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e368      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007310:	4b42      	ldr	r3, [pc, #264]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f023 0219 	bic.w	r2, r3, #25
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	493f      	ldr	r1, [pc, #252]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800731e:	4313      	orrs	r3, r2
 8007320:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007322:	f7fe fdf3 	bl	8005f0c <HAL_GetTick>
 8007326:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007328:	e008      	b.n	800733c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800732a:	f7fe fdef 	bl	8005f0c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e352      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800733c:	4b37      	ldr	r3, [pc, #220]	; (800741c <HAL_RCC_OscConfig+0x288>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007348:	f7fe fe10 	bl	8005f6c <HAL_GetREVID>
 800734c:	4603      	mov	r3, r0
 800734e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007352:	4293      	cmp	r3, r2
 8007354:	d817      	bhi.n	8007386 <HAL_RCC_OscConfig+0x1f2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d108      	bne.n	8007370 <HAL_RCC_OscConfig+0x1dc>
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007366:	4a2d      	ldr	r2, [pc, #180]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800736c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800736e:	e07b      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007370:	4b2a      	ldr	r3, [pc, #168]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	4927      	ldr	r1, [pc, #156]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007380:	4313      	orrs	r3, r2
 8007382:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007384:	e070      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4b25      	ldr	r3, [pc, #148]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	4921      	ldr	r1, [pc, #132]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007396:	4313      	orrs	r3, r2
 8007398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800739a:	e065      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d048      	beq.n	8007436 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073a4:	4b1d      	ldr	r3, [pc, #116]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f023 0219 	bic.w	r2, r3, #25
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	491a      	ldr	r1, [pc, #104]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b6:	f7fe fda9 	bl	8005f0c <HAL_GetTick>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073be:	f7fe fda5 	bl	8005f0c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e308      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	f7fe fdc6 	bl	8005f6c <HAL_GetREVID>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d81a      	bhi.n	8007420 <HAL_RCC_OscConfig+0x28c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d108      	bne.n	8007404 <HAL_RCC_OscConfig+0x270>
 80073f2:	4b0a      	ldr	r3, [pc, #40]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_RCC_OscConfig+0x288>)
 80073fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007400:	6053      	str	r3, [r2, #4]
 8007402:	e031      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	031b      	lsls	r3, r3, #12
 8007412:	4902      	ldr	r1, [pc, #8]	; (800741c <HAL_RCC_OscConfig+0x288>)
 8007414:	4313      	orrs	r3, r2
 8007416:	604b      	str	r3, [r1, #4]
 8007418:	e026      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
 800741a:	bf00      	nop
 800741c:	58024400 	.word	0x58024400
 8007420:	4b9a      	ldr	r3, [pc, #616]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	4997      	ldr	r1, [pc, #604]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	e018      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007436:	4b95      	ldr	r3, [pc, #596]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a94      	ldr	r2, [pc, #592]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007442:	f7fe fd63 	bl	8005f0c <HAL_GetTick>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800744a:	f7fe fd5f 	bl	8005f0c <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e2c2      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800745c:	4b8b      	ldr	r3, [pc, #556]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f0      	bne.n	800744a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a9 	beq.w	80075c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007476:	4b85      	ldr	r3, [pc, #532]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800747e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007480:	4b82      	ldr	r3, [pc, #520]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d007      	beq.n	800749c <HAL_RCC_OscConfig+0x308>
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b18      	cmp	r3, #24
 8007490:	d13a      	bne.n	8007508 <HAL_RCC_OscConfig+0x374>
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d135      	bne.n	8007508 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800749c:	4b7b      	ldr	r3, [pc, #492]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_RCC_OscConfig+0x320>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e296      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074b4:	f7fe fd5a 	bl	8005f6c <HAL_GetREVID>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80074be:	4293      	cmp	r3, r2
 80074c0:	d817      	bhi.n	80074f2 <HAL_RCC_OscConfig+0x35e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d108      	bne.n	80074dc <HAL_RCC_OscConfig+0x348>
 80074ca:	4b70      	ldr	r3, [pc, #448]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074d2:	4a6e      	ldr	r2, [pc, #440]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074da:	e075      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074dc:	4b6b      	ldr	r3, [pc, #428]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	069b      	lsls	r3, r3, #26
 80074ea:	4968      	ldr	r1, [pc, #416]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074f0:	e06a      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074f2:	4b66      	ldr	r3, [pc, #408]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	061b      	lsls	r3, r3, #24
 8007500:	4962      	ldr	r1, [pc, #392]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007502:	4313      	orrs	r3, r2
 8007504:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007506:	e05f      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d042      	beq.n	8007596 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007510:	4b5e      	ldr	r3, [pc, #376]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5d      	ldr	r2, [pc, #372]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fe fcf6 	bl	8005f0c <HAL_GetTick>
 8007520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007524:	f7fe fcf2 	bl	8005f0c <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e255      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007536:	4b55      	ldr	r3, [pc, #340]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007542:	f7fe fd13 	bl	8005f6c <HAL_GetREVID>
 8007546:	4603      	mov	r3, r0
 8007548:	f241 0203 	movw	r2, #4099	; 0x1003
 800754c:	4293      	cmp	r3, r2
 800754e:	d817      	bhi.n	8007580 <HAL_RCC_OscConfig+0x3ec>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	2b20      	cmp	r3, #32
 8007556:	d108      	bne.n	800756a <HAL_RCC_OscConfig+0x3d6>
 8007558:	4b4c      	ldr	r3, [pc, #304]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007560:	4a4a      	ldr	r2, [pc, #296]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007566:	6053      	str	r3, [r2, #4]
 8007568:	e02e      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
 800756a:	4b48      	ldr	r3, [pc, #288]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	069b      	lsls	r3, r3, #26
 8007578:	4944      	ldr	r1, [pc, #272]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800757a:	4313      	orrs	r3, r2
 800757c:	604b      	str	r3, [r1, #4]
 800757e:	e023      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
 8007580:	4b42      	ldr	r3, [pc, #264]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	493f      	ldr	r1, [pc, #252]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007590:	4313      	orrs	r3, r2
 8007592:	60cb      	str	r3, [r1, #12]
 8007594:	e018      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007596:	4b3d      	ldr	r3, [pc, #244]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3c      	ldr	r2, [pc, #240]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a2:	f7fe fcb3 	bl	8005f0c <HAL_GetTick>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80075aa:	f7fe fcaf 	bl	8005f0c <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e212      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075bc:	4b33      	ldr	r3, [pc, #204]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d036      	beq.n	8007642 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d019      	beq.n	8007610 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e0:	4a2a      	ldr	r2, [pc, #168]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e8:	f7fe fc90 	bl	8005f0c <HAL_GetTick>
 80075ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f0:	f7fe fc8c 	bl	8005f0c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e1ef      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007602:	4b22      	ldr	r3, [pc, #136]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0f0      	beq.n	80075f0 <HAL_RCC_OscConfig+0x45c>
 800760e:	e018      	b.n	8007642 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007610:	4b1e      	ldr	r3, [pc, #120]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007614:	4a1d      	ldr	r2, [pc, #116]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fe fc76 	bl	8005f0c <HAL_GetTick>
 8007620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007624:	f7fe fc72 	bl	8005f0c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e1d5      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007636:	4b15      	ldr	r3, [pc, #84]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d039      	beq.n	80076c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01c      	beq.n	8007690 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a0c      	ldr	r2, [pc, #48]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800765c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007662:	f7fe fc53 	bl	8005f0c <HAL_GetTick>
 8007666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800766a:	f7fe fc4f 	bl	8005f0c <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e1b2      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800767c:	4b03      	ldr	r3, [pc, #12]	; (800768c <HAL_RCC_OscConfig+0x4f8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <HAL_RCC_OscConfig+0x4d6>
 8007688:	e01b      	b.n	80076c2 <HAL_RCC_OscConfig+0x52e>
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007690:	4b9b      	ldr	r3, [pc, #620]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a9a      	ldr	r2, [pc, #616]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800769a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800769c:	f7fe fc36 	bl	8005f0c <HAL_GetTick>
 80076a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80076a4:	f7fe fc32 	bl	8005f0c <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e195      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b6:	4b92      	ldr	r3, [pc, #584]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f0      	bne.n	80076a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8081 	beq.w	80077d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076d0:	4b8c      	ldr	r3, [pc, #560]	; (8007904 <HAL_RCC_OscConfig+0x770>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a8b      	ldr	r2, [pc, #556]	; (8007904 <HAL_RCC_OscConfig+0x770>)
 80076d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076dc:	f7fe fc16 	bl	8005f0c <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076e4:	f7fe fc12 	bl	8005f0c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b64      	cmp	r3, #100	; 0x64
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e175      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076f6:	4b83      	ldr	r3, [pc, #524]	; (8007904 <HAL_RCC_OscConfig+0x770>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f0      	beq.n	80076e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d106      	bne.n	8007718 <HAL_RCC_OscConfig+0x584>
 800770a:	4b7d      	ldr	r3, [pc, #500]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	4a7c      	ldr	r2, [pc, #496]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6713      	str	r3, [r2, #112]	; 0x70
 8007716:	e02d      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10c      	bne.n	800773a <HAL_RCC_OscConfig+0x5a6>
 8007720:	4b77      	ldr	r3, [pc, #476]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007724:	4a76      	ldr	r2, [pc, #472]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	6713      	str	r3, [r2, #112]	; 0x70
 800772c:	4b74      	ldr	r3, [pc, #464]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007730:	4a73      	ldr	r2, [pc, #460]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007732:	f023 0304 	bic.w	r3, r3, #4
 8007736:	6713      	str	r3, [r2, #112]	; 0x70
 8007738:	e01c      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b05      	cmp	r3, #5
 8007740:	d10c      	bne.n	800775c <HAL_RCC_OscConfig+0x5c8>
 8007742:	4b6f      	ldr	r3, [pc, #444]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	4a6e      	ldr	r2, [pc, #440]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	6713      	str	r3, [r2, #112]	; 0x70
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007752:	4a6b      	ldr	r2, [pc, #428]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	6713      	str	r3, [r2, #112]	; 0x70
 800775a:	e00b      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 800775c:	4b68      	ldr	r3, [pc, #416]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007760:	4a67      	ldr	r2, [pc, #412]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	6713      	str	r3, [r2, #112]	; 0x70
 8007768:	4b65      	ldr	r3, [pc, #404]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	4a64      	ldr	r2, [pc, #400]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800776e:	f023 0304 	bic.w	r3, r3, #4
 8007772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777c:	f7fe fbc6 	bl	8005f0c <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007782:	e00a      	b.n	800779a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007784:	f7fe fbc2 	bl	8005f0c <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e123      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800779a:	4b59      	ldr	r3, [pc, #356]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ee      	beq.n	8007784 <HAL_RCC_OscConfig+0x5f0>
 80077a6:	e014      	b.n	80077d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a8:	f7fe fbb0 	bl	8005f0c <HAL_GetTick>
 80077ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077ae:	e00a      	b.n	80077c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077b0:	f7fe fbac 	bl	8005f0c <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e10d      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077c6:	4b4e      	ldr	r3, [pc, #312]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1ee      	bne.n	80077b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8102 	beq.w	80079e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077dc:	4b48      	ldr	r3, [pc, #288]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077e4:	2b18      	cmp	r3, #24
 80077e6:	f000 80bd 	beq.w	8007964 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	f040 809e 	bne.w	8007930 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f4:	4b42      	ldr	r3, [pc, #264]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a41      	ldr	r2, [pc, #260]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fe fb84 	bl	8005f0c <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007808:	f7fe fb80 	bl	8005f0c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e0e3      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800781a:	4b39      	ldr	r3, [pc, #228]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800782a:	4b37      	ldr	r3, [pc, #220]	; (8007908 <HAL_RCC_OscConfig+0x774>)
 800782c:	4013      	ands	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007836:	0112      	lsls	r2, r2, #4
 8007838:	430a      	orrs	r2, r1
 800783a:	4931      	ldr	r1, [pc, #196]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800783c:	4313      	orrs	r3, r2
 800783e:	628b      	str	r3, [r1, #40]	; 0x28
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	3b01      	subs	r3, #1
 8007846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	3b01      	subs	r3, #1
 8007850:	025b      	lsls	r3, r3, #9
 8007852:	b29b      	uxth	r3, r3
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	3b01      	subs	r3, #1
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	3b01      	subs	r3, #1
 800786a:	061b      	lsls	r3, r3, #24
 800786c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007870:	4923      	ldr	r1, [pc, #140]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007876:	4b22      	ldr	r3, [pc, #136]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a21      	ldr	r2, [pc, #132]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007886:	4b21      	ldr	r3, [pc, #132]	; (800790c <HAL_RCC_OscConfig+0x778>)
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800788e:	00d2      	lsls	r2, r2, #3
 8007890:	491b      	ldr	r1, [pc, #108]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f023 020c 	bic.w	r2, r3, #12
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	4917      	ldr	r1, [pc, #92]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f023 0202 	bic.w	r2, r3, #2
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b4:	4912      	ldr	r1, [pc, #72]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a10      	ldr	r2, [pc, #64]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	4a0d      	ldr	r2, [pc, #52]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80078de:	4b08      	ldr	r3, [pc, #32]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	4a07      	ldr	r2, [pc, #28]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a04      	ldr	r2, [pc, #16]	; (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f6:	f7fe fb09 	bl	8005f0c <HAL_GetTick>
 80078fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078fc:	e011      	b.n	8007922 <HAL_RCC_OscConfig+0x78e>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	58024800 	.word	0x58024800
 8007908:	fffffc0c 	.word	0xfffffc0c
 800790c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007910:	f7fe fafc 	bl	8005f0c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e05f      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007922:	4b32      	ldr	r3, [pc, #200]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x77c>
 800792e:	e057      	b.n	80079e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b2e      	ldr	r3, [pc, #184]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2d      	ldr	r2, [pc, #180]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fe fae6 	bl	8005f0c <HAL_GetTick>
 8007940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007944:	f7fe fae2 	bl	8005f0c <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e045      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007956:	4b25      	ldr	r3, [pc, #148]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x7b0>
 8007962:	e03d      	b.n	80079e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007964:	4b21      	ldr	r3, [pc, #132]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800796a:	4b20      	ldr	r3, [pc, #128]	; (80079ec <HAL_RCC_OscConfig+0x858>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b01      	cmp	r3, #1
 8007976:	d031      	beq.n	80079dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f003 0203 	and.w	r2, r3, #3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007982:	429a      	cmp	r2, r3
 8007984:	d12a      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d122      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d11a      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0a5b      	lsrs	r3, r3, #9
 80079aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d111      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d108      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d001      	beq.n	80079e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3730      	adds	r7, #48	; 0x30
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	58024400 	.word	0x58024400

080079f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e19c      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a04:	4b8a      	ldr	r3, [pc, #552]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d910      	bls.n	8007a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a12:	4b87      	ldr	r3, [pc, #540]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f023 020f 	bic.w	r2, r3, #15
 8007a1a:	4985      	ldr	r1, [pc, #532]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a22:	4b83      	ldr	r3, [pc, #524]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d001      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e184      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d010      	beq.n	8007a62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691a      	ldr	r2, [r3, #16]
 8007a44:	4b7b      	ldr	r3, [pc, #492]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d908      	bls.n	8007a62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a50:	4b78      	ldr	r3, [pc, #480]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4975      	ldr	r1, [pc, #468]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d010      	beq.n	8007a90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	4b70      	ldr	r3, [pc, #448]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d908      	bls.n	8007a90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a7e:	4b6d      	ldr	r3, [pc, #436]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	496a      	ldr	r1, [pc, #424]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d010      	beq.n	8007abe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	4b64      	ldr	r3, [pc, #400]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d908      	bls.n	8007abe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007aac:	4b61      	ldr	r3, [pc, #388]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	495e      	ldr	r1, [pc, #376]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d010      	beq.n	8007aec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69da      	ldr	r2, [r3, #28]
 8007ace:	4b59      	ldr	r3, [pc, #356]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d908      	bls.n	8007aec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ada:	4b56      	ldr	r3, [pc, #344]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	4953      	ldr	r1, [pc, #332]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	4b4d      	ldr	r3, [pc, #308]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d908      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b08:	4b4a      	ldr	r3, [pc, #296]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f023 020f 	bic.w	r2, r3, #15
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4947      	ldr	r1, [pc, #284]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d055      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b26:	4b43      	ldr	r3, [pc, #268]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	4940      	ldr	r1, [pc, #256]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b40:	4b3c      	ldr	r3, [pc, #240]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d121      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0f6      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d107      	bne.n	8007b68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0ea      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b70:	4b30      	ldr	r3, [pc, #192]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0de      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b80:	4b2c      	ldr	r3, [pc, #176]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0d6      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f023 0207 	bic.w	r2, r3, #7
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4925      	ldr	r1, [pc, #148]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba2:	f7fe f9b3 	bl	8005f0c <HAL_GetTick>
 8007ba6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba8:	e00a      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007baa:	f7fe f9af 	bl	8005f0c <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e0be      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1eb      	bne.n	8007baa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d010      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d208      	bcs.n	8007c00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bee:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f023 020f 	bic.w	r2, r3, #15
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	490e      	ldr	r1, [pc, #56]	; (8007c34 <HAL_RCC_ClockConfig+0x244>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c00:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d214      	bcs.n	8007c38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0e:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 020f 	bic.w	r2, r3, #15
 8007c16:	4906      	ldr	r1, [pc, #24]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <HAL_RCC_ClockConfig+0x240>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e086      	b.n	8007d3e <HAL_RCC_ClockConfig+0x34e>
 8007c30:	52002000 	.word	0x52002000
 8007c34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	4b3f      	ldr	r3, [pc, #252]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d208      	bcs.n	8007c66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c54:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4939      	ldr	r1, [pc, #228]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d010      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695a      	ldr	r2, [r3, #20]
 8007c76:	4b34      	ldr	r3, [pc, #208]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d208      	bcs.n	8007c94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c82:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	492e      	ldr	r1, [pc, #184]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d010      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d208      	bcs.n	8007cc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	4922      	ldr	r1, [pc, #136]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d010      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69da      	ldr	r2, [r3, #28]
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d208      	bcs.n	8007cf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007cde:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	4917      	ldr	r1, [pc, #92]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007cf0:	f000 f834 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	4912      	ldr	r1, [pc, #72]	; (8007d4c <HAL_RCC_ClockConfig+0x35c>)
 8007d02:	5ccb      	ldrb	r3, [r1, r3]
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d0e:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <HAL_RCC_ClockConfig+0x358>)
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <HAL_RCC_ClockConfig+0x35c>)
 8007d18:	5cd3      	ldrb	r3, [r2, r3]
 8007d1a:	f003 031f 	and.w	r3, r3, #31
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
 8007d24:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <HAL_RCC_ClockConfig+0x360>)
 8007d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <HAL_RCC_ClockConfig+0x364>)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <HAL_RCC_ClockConfig+0x368>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe f8a0 	bl	8005e78 <HAL_InitTick>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	0800eef0 	.word	0x0800eef0
 8007d50:	24000028 	.word	0x24000028
 8007d54:	24000024 	.word	0x24000024
 8007d58:	2400002c 	.word	0x2400002c

08007d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	; 0x24
 8007d60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d62:	4bb3      	ldr	r3, [pc, #716]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d6a:	2b18      	cmp	r3, #24
 8007d6c:	f200 8155 	bhi.w	800801a <HAL_RCC_GetSysClockFreq+0x2be>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007ddd 	.word	0x08007ddd
 8007d7c:	0800801b 	.word	0x0800801b
 8007d80:	0800801b 	.word	0x0800801b
 8007d84:	0800801b 	.word	0x0800801b
 8007d88:	0800801b 	.word	0x0800801b
 8007d8c:	0800801b 	.word	0x0800801b
 8007d90:	0800801b 	.word	0x0800801b
 8007d94:	0800801b 	.word	0x0800801b
 8007d98:	08007e03 	.word	0x08007e03
 8007d9c:	0800801b 	.word	0x0800801b
 8007da0:	0800801b 	.word	0x0800801b
 8007da4:	0800801b 	.word	0x0800801b
 8007da8:	0800801b 	.word	0x0800801b
 8007dac:	0800801b 	.word	0x0800801b
 8007db0:	0800801b 	.word	0x0800801b
 8007db4:	0800801b 	.word	0x0800801b
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	0800801b 	.word	0x0800801b
 8007dc0:	0800801b 	.word	0x0800801b
 8007dc4:	0800801b 	.word	0x0800801b
 8007dc8:	0800801b 	.word	0x0800801b
 8007dcc:	0800801b 	.word	0x0800801b
 8007dd0:	0800801b 	.word	0x0800801b
 8007dd4:	0800801b 	.word	0x0800801b
 8007dd8:	08007e0f 	.word	0x08007e0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ddc:	4b94      	ldr	r3, [pc, #592]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d009      	beq.n	8007dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de8:	4b91      	ldr	r3, [pc, #580]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	08db      	lsrs	r3, r3, #3
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	4a90      	ldr	r2, [pc, #576]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007dfa:	e111      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007dfc:	4b8d      	ldr	r3, [pc, #564]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007dfe:	61bb      	str	r3, [r7, #24]
    break;
 8007e00:	e10e      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007e02:	4b8d      	ldr	r3, [pc, #564]	; (8008038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e04:	61bb      	str	r3, [r7, #24]
    break;
 8007e06:	e10b      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007e08:	4b8c      	ldr	r3, [pc, #560]	; (800803c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e0a:	61bb      	str	r3, [r7, #24]
    break;
 8007e0c:	e108      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e0e:	4b88      	ldr	r3, [pc, #544]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e18:	4b85      	ldr	r3, [pc, #532]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	091b      	lsrs	r3, r3, #4
 8007e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e24:	4b82      	ldr	r3, [pc, #520]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e2e:	4b80      	ldr	r3, [pc, #512]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	08db      	lsrs	r3, r3, #3
 8007e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80e1 	beq.w	8008014 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	f000 8083 	beq.w	8007f60 <HAL_RCC_GetSysClockFreq+0x204>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	f200 80a1 	bhi.w	8007fa4 <HAL_RCC_GetSysClockFreq+0x248>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_RCC_GetSysClockFreq+0x114>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d056      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e6e:	e099      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e70:	4b6f      	ldr	r3, [pc, #444]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d02d      	beq.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e7c:	4b6c      	ldr	r3, [pc, #432]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	08db      	lsrs	r3, r3, #3
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	4a6b      	ldr	r2, [pc, #428]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e88:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	ee07 3a90 	vmov	s15, r3
 8007e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b62      	ldr	r3, [pc, #392]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ed6:	e087      	b.n	8007fe8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b51      	ldr	r3, [pc, #324]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007efe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f1a:	e065      	b.n	8007fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2e:	4b40      	ldr	r3, [pc, #256]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f5e:	e043      	b.n	8007fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800804c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f72:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa2:	e021      	b.n	8007fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007fe8:	4b11      	ldr	r3, [pc, #68]	; (8008030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	0a5b      	lsrs	r3, r3, #9
 8007fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008000:	edd7 6a07 	vldr	s13, [r7, #28]
 8008004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800c:	ee17 3a90 	vmov	r3, s15
 8008010:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008012:	e005      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]
    break;
 8008018:	e002      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800801c:	61bb      	str	r3, [r7, #24]
    break;
 800801e:	bf00      	nop
  }

  return sysclockfreq;
 8008020:	69bb      	ldr	r3, [r7, #24]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3724      	adds	r7, #36	; 0x24
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	58024400 	.word	0x58024400
 8008034:	03d09000 	.word	0x03d09000
 8008038:	003d0900 	.word	0x003d0900
 800803c:	017d7840 	.word	0x017d7840
 8008040:	46000000 	.word	0x46000000
 8008044:	4c742400 	.word	0x4c742400
 8008048:	4a742400 	.word	0x4a742400
 800804c:	4bbebc20 	.word	0x4bbebc20

08008050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008056:	f7ff fe81 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 800805a:	4602      	mov	r2, r0
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	0a1b      	lsrs	r3, r3, #8
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	490f      	ldr	r1, [pc, #60]	; (80080a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008068:	5ccb      	ldrb	r3, [r1, r3]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800807e:	5cd3      	ldrb	r3, [r2, r3]
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	fa22 f303 	lsr.w	r3, r2, r3
 800808a:	4a07      	ldr	r2, [pc, #28]	; (80080a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800808c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800808e:	4a07      	ldr	r2, [pc, #28]	; (80080ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008096:	681b      	ldr	r3, [r3, #0]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	58024400 	.word	0x58024400
 80080a4:	0800eef0 	.word	0x0800eef0
 80080a8:	24000028 	.word	0x24000028
 80080ac:	24000024 	.word	0x24000024

080080b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80080b4:	f7ff ffcc 	bl	8008050 <HAL_RCC_GetHCLKFreq>
 80080b8:	4602      	mov	r2, r0
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	4904      	ldr	r1, [pc, #16]	; (80080d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080c6:	5ccb      	ldrb	r3, [r1, r3]
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	58024400 	.word	0x58024400
 80080d8:	0800eef0 	.word	0x0800eef0

080080dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80080e0:	f7ff ffb6 	bl	8008050 <HAL_RCC_GetHCLKFreq>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	4904      	ldr	r1, [pc, #16]	; (8008104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	58024400 	.word	0x58024400
 8008104:	0800eef0 	.word	0x0800eef0

08008108 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008114:	2300      	movs	r3, #0
 8008116:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d03f      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800812c:	d02a      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800812e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008132:	d824      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008138:	d018      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800813a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800813e:	d81e      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008148:	d007      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800814a:	e018      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800814c:	4ba3      	ldr	r3, [pc, #652]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4aa2      	ldr	r2, [pc, #648]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008158:	e015      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	2102      	movs	r1, #2
 8008160:	4618      	mov	r0, r3
 8008162:	f001 f9d5 	bl	8009510 <RCCEx_PLL2_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800816a:	e00c      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3324      	adds	r3, #36	; 0x24
 8008170:	2102      	movs	r1, #2
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fa7e 	bl	8009674 <RCCEx_PLL3_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800817c:	e003      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
      break;
 8008182:	e000      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800818c:	4b93      	ldr	r3, [pc, #588]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800818e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008198:	4990      	ldr	r1, [pc, #576]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800819a:	4313      	orrs	r3, r2
 800819c:	650b      	str	r3, [r1, #80]	; 0x50
 800819e:	e001      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d03d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d826      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081d5 	.word	0x080081d5
 80081c4:	080081e3 	.word	0x080081e3
 80081c8:	080081f5 	.word	0x080081f5
 80081cc:	0800820d 	.word	0x0800820d
 80081d0:	0800820d 	.word	0x0800820d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d4:	4b81      	ldr	r3, [pc, #516]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	4a80      	ldr	r2, [pc, #512]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081e0:	e015      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 f991 	bl	8009510 <RCCEx_PLL2_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081f2:	e00c      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3324      	adds	r3, #36	; 0x24
 80081f8:	2100      	movs	r1, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 fa3a 	bl	8009674 <RCCEx_PLL3_Config>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008204:	e003      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]
      break;
 800820a:	e000      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800820c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008214:	4b71      	ldr	r3, [pc, #452]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	f023 0207 	bic.w	r2, r3, #7
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008220:	496e      	ldr	r1, [pc, #440]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008222:	4313      	orrs	r3, r2
 8008224:	650b      	str	r3, [r1, #80]	; 0x50
 8008226:	e001      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008234:	2b00      	cmp	r3, #0
 8008236:	d042      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d02b      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d825      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008248:	2bc0      	cmp	r3, #192	; 0xc0
 800824a:	d028      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800824c:	2bc0      	cmp	r3, #192	; 0xc0
 800824e:	d821      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	d016      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d81d      	bhi.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d007      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008260:	e018      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008262:	4b5e      	ldr	r3, [pc, #376]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	4a5d      	ldr	r2, [pc, #372]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800826c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800826e:	e017      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f001 f94a 	bl	8009510 <RCCEx_PLL2_Config>
 800827c:	4603      	mov	r3, r0
 800827e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008280:	e00e      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3324      	adds	r3, #36	; 0x24
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f001 f9f3 	bl	8009674 <RCCEx_PLL3_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008292:	e005      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
      break;
 8008298:	e002      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800829a:	bf00      	nop
 800829c:	e000      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800829e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80082a6:	4b4d      	ldr	r3, [pc, #308]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b2:	494a      	ldr	r1, [pc, #296]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	650b      	str	r3, [r1, #80]	; 0x50
 80082b8:	e001      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d049      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082d4:	d030      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80082d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082da:	d82a      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082e0:	d02c      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80082e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082e6:	d824      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082ec:	d018      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80082ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f2:	d81e      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80082f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082fc:	d007      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80082fe:	e018      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008300:	4b36      	ldr	r3, [pc, #216]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a35      	ldr	r2, [pc, #212]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800830a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800830c:	e017      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f001 f8fb 	bl	8009510 <RCCEx_PLL2_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800831e:	e00e      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	2100      	movs	r1, #0
 8008326:	4618      	mov	r0, r3
 8008328:	f001 f9a4 	bl	8009674 <RCCEx_PLL3_Config>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008330:	e005      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
      break;
 8008336:	e002      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800833c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008348:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008352:	4922      	ldr	r1, [pc, #136]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008354:	4313      	orrs	r3, r2
 8008356:	658b      	str	r3, [r1, #88]	; 0x58
 8008358:	e001      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04b      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008374:	d030      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800837a:	d82a      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800837c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008380:	d02e      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008382:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008386:	d824      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800838c:	d018      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800838e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008392:	d81e      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800839c:	d007      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800839e:	e018      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a0:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	4a0d      	ldr	r2, [pc, #52]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80083a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083ac:	e019      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	2100      	movs	r1, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 f8ab 	bl	8009510 <RCCEx_PLL2_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083be:	e010      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3324      	adds	r3, #36	; 0x24
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 f954 	bl	8009674 <RCCEx_PLL3_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083d0:	e007      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
      break;
 80083d6:	e004      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80083dc:	58024400 	.word	0x58024400
      break;
 80083e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80083e8:	4b99      	ldr	r3, [pc, #612]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083f6:	4996      	ldr	r1, [pc, #600]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	658b      	str	r3, [r1, #88]	; 0x58
 80083fc:	e001      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d032      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008412:	2b30      	cmp	r3, #48	; 0x30
 8008414:	d01c      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d817      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800841a:	2b20      	cmp	r3, #32
 800841c:	d00c      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d813      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d016      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008426:	2b10      	cmp	r3, #16
 8008428:	d10f      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842a:	4b89      	ldr	r3, [pc, #548]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	4a88      	ldr	r2, [pc, #544]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008436:	e00e      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	2102      	movs	r1, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f001 f866 	bl	8009510 <RCCEx_PLL2_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008448:	e005      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
      break;
 800844e:	e002      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800845c:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800845e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008468:	4979      	ldr	r1, [pc, #484]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800846a:	4313      	orrs	r3, r2
 800846c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800846e:	e001      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d047      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008488:	d030      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800848a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800848e:	d82a      	bhi.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008494:	d02c      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800849a:	d824      	bhi.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800849c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a0:	d018      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80084a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a6:	d81e      	bhi.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d007      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80084b2:	e018      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b4:	4b66      	ldr	r3, [pc, #408]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	4a65      	ldr	r2, [pc, #404]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80084ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084c0:	e017      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3304      	adds	r3, #4
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f821 	bl	8009510 <RCCEx_PLL2_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084d2:	e00e      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3324      	adds	r3, #36	; 0x24
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f8ca 	bl	8009674 <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084e4:	e005      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ea:	e002      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80084f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084f8:	4b55      	ldr	r3, [pc, #340]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80084fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008504:	4952      	ldr	r1, [pc, #328]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008506:	4313      	orrs	r3, r2
 8008508:	650b      	str	r3, [r1, #80]	; 0x50
 800850a:	e001      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d049      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008524:	d02e      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800852a:	d828      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800852c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008530:	d02a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008536:	d822      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800853c:	d026      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800853e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008542:	d81c      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008548:	d010      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800854a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854e:	d816      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01d      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008558:	d111      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3304      	adds	r3, #4
 800855e:	2101      	movs	r1, #1
 8008560:	4618      	mov	r0, r3
 8008562:	f000 ffd5 	bl	8009510 <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800856a:	e012      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3324      	adds	r3, #36	; 0x24
 8008570:	2101      	movs	r1, #1
 8008572:	4618      	mov	r0, r3
 8008574:	f001 f87e 	bl	8009674 <RCCEx_PLL3_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800857c:	e009      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
      break;
 8008582:	e006      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008584:	bf00      	nop
 8008586:	e004      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d109      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008598:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a4:	492a      	ldr	r1, [pc, #168]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	650b      	str	r3, [r1, #80]	; 0x50
 80085aa:	e001      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d04d      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c6:	d02e      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085cc:	d828      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d02a      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d822      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80085da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085de:	d026      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80085e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085e4:	d81c      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80085e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ea:	d010      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d816      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01d      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80085f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085fa:	d111      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	2101      	movs	r1, #1
 8008602:	4618      	mov	r0, r3
 8008604:	f000 ff84 	bl	8009510 <RCCEx_PLL2_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800860c:	e012      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3324      	adds	r3, #36	; 0x24
 8008612:	2101      	movs	r1, #1
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f82d 	bl	8009674 <RCCEx_PLL3_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800861e:	e009      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
      break;
 8008624:	e006      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008626:	bf00      	nop
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800862a:	bf00      	nop
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800862e:	bf00      	nop
 8008630:	e000      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10c      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008648:	4901      	ldr	r1, [pc, #4]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800864a:	4313      	orrs	r3, r2
 800864c:	658b      	str	r3, [r1, #88]	; 0x58
 800864e:	e003      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d02f      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866c:	d00e      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008672:	d814      	bhi.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d015      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800867c:	d10f      	bne.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867e:	4baf      	ldr	r3, [pc, #700]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	4aae      	ldr	r2, [pc, #696]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800868a:	e00c      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f000 ff3c 	bl	8009510 <RCCEx_PLL2_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800869c:	e003      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
      break;
 80086a2:	e000      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80086a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086ac:	4ba3      	ldr	r3, [pc, #652]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b8:	49a0      	ldr	r1, [pc, #640]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	650b      	str	r3, [r1, #80]	; 0x50
 80086be:	e001      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d032      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d81b      	bhi.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	08008717 	.word	0x08008717
 80086e4:	080086f1 	.word	0x080086f1
 80086e8:	080086ff 	.word	0x080086ff
 80086ec:	08008717 	.word	0x08008717
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f0:	4b92      	ldr	r3, [pc, #584]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	4a91      	ldr	r2, [pc, #580]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086fc:	e00c      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3304      	adds	r3, #4
 8008702:	2102      	movs	r1, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f000 ff03 	bl	8009510 <RCCEx_PLL2_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800870e:	e003      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	75fb      	strb	r3, [r7, #23]
      break;
 8008714:	e000      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800871e:	4b87      	ldr	r3, [pc, #540]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	f023 0203 	bic.w	r2, r3, #3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872a:	4984      	ldr	r1, [pc, #528]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800872c:	4313      	orrs	r3, r2
 800872e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008730:	e001      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8086 	beq.w	8008850 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008744:	4b7e      	ldr	r3, [pc, #504]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a7d      	ldr	r2, [pc, #500]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800874a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008750:	f7fd fbdc 	bl	8005f0c <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008756:	e009      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008758:	f7fd fbd8 	bl	8005f0c <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b64      	cmp	r3, #100	; 0x64
 8008764:	d902      	bls.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	75fb      	strb	r3, [r7, #23]
        break;
 800876a:	e005      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800876c:	4b74      	ldr	r3, [pc, #464]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0ef      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d166      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800877e:	4b6f      	ldr	r3, [pc, #444]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008788:	4053      	eors	r3, r2
 800878a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d013      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008792:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800879c:	4b67      	ldr	r3, [pc, #412]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	4a66      	ldr	r2, [pc, #408]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80087a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087a8:	4b64      	ldr	r3, [pc, #400]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ac:	4a63      	ldr	r2, [pc, #396]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80087ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80087b4:	4a61      	ldr	r2, [pc, #388]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c4:	d115      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fd fba1 	bl	8005f0c <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087cc:	e00b      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fd fb9d 	bl	8005f0c <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d902      	bls.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	75fb      	strb	r3, [r7, #23]
            break;
 80087e4:	e005      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087e6:	4b55      	ldr	r3, [pc, #340]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ed      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d126      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008806:	d10d      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008808:	4b4c      	ldr	r3, [pc, #304]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008816:	0919      	lsrs	r1, r3, #4
 8008818:	4b4a      	ldr	r3, [pc, #296]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800881a:	400b      	ands	r3, r1
 800881c:	4947      	ldr	r1, [pc, #284]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800881e:	4313      	orrs	r3, r2
 8008820:	610b      	str	r3, [r1, #16]
 8008822:	e005      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008824:	4b45      	ldr	r3, [pc, #276]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	4a44      	ldr	r2, [pc, #272]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800882a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800882e:	6113      	str	r3, [r2, #16]
 8008830:	4b42      	ldr	r3, [pc, #264]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800883a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800883e:	493f      	ldr	r1, [pc, #252]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008840:	4313      	orrs	r3, r2
 8008842:	670b      	str	r3, [r1, #112]	; 0x70
 8008844:	e004      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	75bb      	strb	r3, [r7, #22]
 800884a:	e001      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8085 	beq.w	8008968 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008862:	2b28      	cmp	r3, #40	; 0x28
 8008864:	d866      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008949 	.word	0x08008949
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	08008935 	.word	0x08008935
 8008884:	08008935 	.word	0x08008935
 8008888:	08008935 	.word	0x08008935
 800888c:	08008911 	.word	0x08008911
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008935 	.word	0x08008935
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008923 	.word	0x08008923
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008949 	.word	0x08008949
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008949 	.word	0x08008949
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	08008935 	.word	0x08008935
 8008904:	08008935 	.word	0x08008935
 8008908:	08008935 	.word	0x08008935
 800890c:	08008949 	.word	0x08008949
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3304      	adds	r3, #4
 8008914:	2101      	movs	r1, #1
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fdfa 	bl	8009510 <RCCEx_PLL2_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008920:	e013      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3324      	adds	r3, #36	; 0x24
 8008926:	2101      	movs	r1, #1
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fea3 	bl	8009674 <RCCEx_PLL3_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008932:	e00a      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
      break;
 8008938:	e007      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800893a:	bf00      	nop
 800893c:	58024400 	.word	0x58024400
 8008940:	58024800 	.word	0x58024800
 8008944:	00ffffcf 	.word	0x00ffffcf
      break;
 8008948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008950:	4b96      	ldr	r3, [pc, #600]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008954:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895c:	4993      	ldr	r1, [pc, #588]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800895e:	4313      	orrs	r3, r2
 8008960:	654b      	str	r3, [r1, #84]	; 0x54
 8008962:	e001      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d038      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008978:	2b05      	cmp	r3, #5
 800897a:	d821      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800897c:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	080089c7 	.word	0x080089c7
 8008988:	0800899d 	.word	0x0800899d
 800898c:	080089af 	.word	0x080089af
 8008990:	080089c7 	.word	0x080089c7
 8008994:	080089c7 	.word	0x080089c7
 8008998:	080089c7 	.word	0x080089c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2101      	movs	r1, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fdb4 	bl	8009510 <RCCEx_PLL2_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80089ac:	e00c      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3324      	adds	r3, #36	; 0x24
 80089b2:	2101      	movs	r1, #1
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fe5d 	bl	8009674 <RCCEx_PLL3_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	e000      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80089c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d109      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089ce:	4b77      	ldr	r3, [pc, #476]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	f023 0207 	bic.w	r2, r3, #7
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089da:	4974      	ldr	r1, [pc, #464]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	654b      	str	r3, [r1, #84]	; 0x54
 80089e0:	e001      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d03a      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d821      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a47 	.word	0x08008a47
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a2f 	.word	0x08008a2f
 8008a10:	08008a47 	.word	0x08008a47
 8008a14:	08008a47 	.word	0x08008a47
 8008a18:	08008a47 	.word	0x08008a47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fd74 	bl	8009510 <RCCEx_PLL2_Config>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a2c:	e00c      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3324      	adds	r3, #36	; 0x24
 8008a32:	2101      	movs	r1, #1
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fe1d 	bl	8009674 <RCCEx_PLL3_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a3e:	e003      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	e000      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a4e:	4b57      	ldr	r3, [pc, #348]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	f023 0207 	bic.w	r2, r3, #7
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5c:	4953      	ldr	r1, [pc, #332]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	658b      	str	r3, [r1, #88]	; 0x58
 8008a62:	e001      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d04b      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7e:	d02e      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a84:	d828      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8a:	d02a      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a90:	d822      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a96:	d026      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a9c:	d81c      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d010      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa8:	d816      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01d      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab2:	d111      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fd28 	bl	8009510 <RCCEx_PLL2_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ac4:	e012      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3324      	adds	r3, #36	; 0x24
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fdd1 	bl	8009674 <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ad6:	e009      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
      break;
 8008adc:	e006      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008af2:	4b2e      	ldr	r3, [pc, #184]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	492a      	ldr	r1, [pc, #168]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	654b      	str	r3, [r1, #84]	; 0x54
 8008b06:	e001      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d04d      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b22:	d02e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008b24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b28:	d828      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	d02a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b34:	d822      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b3a:	d026      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b40:	d81c      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b46:	d010      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4c:	d816      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01d      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b56:	d111      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fcd6 	bl	8009510 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b68:	e012      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	2102      	movs	r1, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fd7f 	bl	8009674 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b7a:	e009      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b80:	e006      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008b82:	bf00      	nop
 8008b84:	e004      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008b86:	bf00      	nop
 8008b88:	e002      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10c      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ba4:	4901      	ldr	r1, [pc, #4]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8008baa:	e003      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d04b      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bca:	d02e      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008bcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bd0:	d828      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd6:	d02a      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bdc:	d822      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008bde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008be2:	d026      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008be4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008be8:	d81c      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bee:	d010      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bf4:	d816      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01d      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfe:	d111      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fc82 	bl	8009510 <RCCEx_PLL2_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008c10:	e012      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3324      	adds	r3, #36	; 0x24
 8008c16:	2102      	movs	r1, #2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fd2b 	bl	8009674 <RCCEx_PLL3_Config>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008c22:	e009      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	75fb      	strb	r3, [r7, #23]
      break;
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008c2a:	bf00      	nop
 8008c2c:	e004      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c3e:	4b9d      	ldr	r3, [pc, #628]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c4c:	4999      	ldr	r1, [pc, #612]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	658b      	str	r3, [r1, #88]	; 0x58
 8008c52:	e001      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01a      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6e:	d10a      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3324      	adds	r3, #36	; 0x24
 8008c74:	2102      	movs	r1, #2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fcfc 	bl	8009674 <RCCEx_PLL3_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c86:	4b8b      	ldr	r3, [pc, #556]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c94:	4987      	ldr	r1, [pc, #540]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01a      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb0:	d10a      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3324      	adds	r3, #36	; 0x24
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fcdb 	bl	8009674 <RCCEx_PLL3_Config>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cc8:	4b7a      	ldr	r3, [pc, #488]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cd6:	4977      	ldr	r1, [pc, #476]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d034      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf2:	d01d      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf8:	d817      	bhi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d02:	d009      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008d04:	e011      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fbff 	bl	8009510 <RCCEx_PLL2_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008d16:	e00c      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3324      	adds	r3, #36	; 0x24
 8008d1c:	2102      	movs	r1, #2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fca8 	bl	8009674 <RCCEx_PLL3_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2e:	e000      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d38:	4b5e      	ldr	r3, [pc, #376]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d46:	495b      	ldr	r1, [pc, #364]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008d4c:	e001      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d033      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d68:	d01c      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d6e:	d816      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d74:	d003      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d7a:	d007      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008d7c:	e00f      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7e:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	4a4c      	ldr	r2, [pc, #304]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d8a:	e00c      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3324      	adds	r3, #36	; 0x24
 8008d90:	2101      	movs	r1, #1
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fc6e 	bl	8009674 <RCCEx_PLL3_Config>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
      break;
 8008da2:	e000      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008dac:	4b41      	ldr	r3, [pc, #260]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dba:	493e      	ldr	r1, [pc, #248]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	654b      	str	r3, [r1, #84]	; 0x54
 8008dc0:	e001      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d029      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dde:	d007      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008de0:	e00f      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de2:	4b34      	ldr	r3, [pc, #208]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4a33      	ldr	r2, [pc, #204]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dee:	e00b      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3304      	adds	r3, #4
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fb8a 	bl	8009510 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
      break;
 8008e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e0e:	4b29      	ldr	r3, [pc, #164]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1a:	4926      	ldr	r1, [pc, #152]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e20:	e001      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3324      	adds	r3, #36	; 0x24
 8008e36:	2102      	movs	r1, #2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fc1b 	bl	8009674 <RCCEx_PLL3_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d033      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e5c:	d017      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e62:	d811      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e68:	d013      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e6e:	d80b      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e78:	d106      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e7a:	4b0e      	ldr	r3, [pc, #56]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	4a0d      	ldr	r2, [pc, #52]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e86:	e007      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8c:	e004      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008e8e:	bf00      	nop
 8008e90:	e002      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008e92:	bf00      	nop
 8008e94:	e000      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10c      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eaa:	4902      	ldr	r1, [pc, #8]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	654b      	str	r3, [r1, #84]	; 0x54
 8008eb0:	e004      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008eb2:	bf00      	nop
 8008eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d008      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ec8:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	492e      	ldr	r1, [pc, #184]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ee6:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ef4:	4926      	ldr	r1, [pc, #152]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d008      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f06:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f12:	491f      	ldr	r1, [pc, #124]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00d      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f24:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f2e:	6113      	str	r3, [r2, #16]
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008f3a:	4915      	ldr	r1, [pc, #84]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da08      	bge.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f48:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	490e      	ldr	r1, [pc, #56]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f66:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008f7a:	7dbb      	ldrb	r3, [r7, #22]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e000      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400

08008f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f98:	f7ff f85a 	bl	8008050 <HAL_RCC_GetHCLKFreq>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	4904      	ldr	r1, [pc, #16]	; (8008fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008faa:	5ccb      	ldrb	r3, [r1, r3]
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	0800eef0 	.word	0x0800eef0

08008fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b089      	sub	sp, #36	; 0x24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fc8:	4ba1      	ldr	r3, [pc, #644]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008fd2:	4b9f      	ldr	r3, [pc, #636]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	0b1b      	lsrs	r3, r3, #12
 8008fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fde:	4b9c      	ldr	r3, [pc, #624]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	091b      	lsrs	r3, r3, #4
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008fea:	4b99      	ldr	r3, [pc, #612]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8111 	beq.w	8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b02      	cmp	r3, #2
 8009012:	f000 8083 	beq.w	800911c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b02      	cmp	r3, #2
 800901a:	f200 80a1 	bhi.w	8009160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d056      	beq.n	80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800902a:	e099      	b.n	8009160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800902c:	4b88      	ldr	r3, [pc, #544]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02d      	beq.n	8009094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009038:	4b85      	ldr	r3, [pc, #532]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	08db      	lsrs	r3, r3, #3
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	4a84      	ldr	r2, [pc, #528]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009044:	fa22 f303 	lsr.w	r3, r2, r3
 8009048:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009062:	4b7b      	ldr	r3, [pc, #492]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009072:	ed97 6a03 	vldr	s12, [r7, #12]
 8009076:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800907a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009092:	e087      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a6:	4b6a      	ldr	r3, [pc, #424]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d6:	e065      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b59      	ldr	r3, [pc, #356]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800911a:	e043      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b48      	ldr	r3, [pc, #288]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009142:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800915e:	e021      	b.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b37      	ldr	r3, [pc, #220]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a03 	vldr	s12, [r7, #12]
 8009186:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80091a4:	4b2a      	ldr	r3, [pc, #168]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	0a5b      	lsrs	r3, r3, #9
 80091aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091be:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ca:	ee17 2a90 	vmov	r2, s15
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80091d2:	4b1f      	ldr	r3, [pc, #124]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	0c1b      	lsrs	r3, r3, #16
 80091d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f8:	ee17 2a90 	vmov	r2, s15
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009200:	4b13      	ldr	r3, [pc, #76]	; (8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	0e1b      	lsrs	r3, r3, #24
 8009206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921a:	edd7 6a07 	vldr	s13, [r7, #28]
 800921e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009226:	ee17 2a90 	vmov	r2, s15
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800922e:	e008      	b.n	8009242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	609a      	str	r2, [r3, #8]
}
 8009242:	bf00      	nop
 8009244:	3724      	adds	r7, #36	; 0x24
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	58024400 	.word	0x58024400
 8009254:	03d09000 	.word	0x03d09000
 8009258:	46000000 	.word	0x46000000
 800925c:	4c742400 	.word	0x4c742400
 8009260:	4a742400 	.word	0x4a742400
 8009264:	4bbebc20 	.word	0x4bbebc20

08009268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009268:	b480      	push	{r7}
 800926a:	b089      	sub	sp, #36	; 0x24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009270:	4ba1      	ldr	r3, [pc, #644]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800927a:	4b9f      	ldr	r3, [pc, #636]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	0d1b      	lsrs	r3, r3, #20
 8009280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009286:	4b9c      	ldr	r3, [pc, #624]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	0a1b      	lsrs	r3, r3, #8
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009292:	4b99      	ldr	r3, [pc, #612]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 8111 	beq.w	80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f000 8083 	beq.w	80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	f200 80a1 	bhi.w	8009408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d056      	beq.n	8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092d2:	e099      	b.n	8009408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d4:	4b88      	ldr	r3, [pc, #544]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02d      	beq.n	800933c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092e0:	4b85      	ldr	r3, [pc, #532]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	08db      	lsrs	r3, r3, #3
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	4a84      	ldr	r2, [pc, #528]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930a:	4b7b      	ldr	r3, [pc, #492]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931a:	ed97 6a03 	vldr	s12, [r7, #12]
 800931e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800932e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800933a:	e087      	b.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800934a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934e:	4b6a      	ldr	r3, [pc, #424]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800937e:	e065      	b.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800938e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009392:	4b59      	ldr	r3, [pc, #356]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093c2:	e043      	b.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800950c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d6:	4b48      	ldr	r3, [pc, #288]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009406:	e021      	b.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941a:	4b37      	ldr	r3, [pc, #220]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942a:	ed97 6a03 	vldr	s12, [r7, #12]
 800942e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800944a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800944c:	4b2a      	ldr	r3, [pc, #168]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800944e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009450:	0a5b      	lsrs	r3, r3, #9
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009466:	edd7 6a07 	vldr	s13, [r7, #28]
 800946a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800946e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009472:	ee17 2a90 	vmov	r2, s15
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800947a:	4b1f      	ldr	r3, [pc, #124]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009494:	edd7 6a07 	vldr	s13, [r7, #28]
 8009498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800949c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a0:	ee17 2a90 	vmov	r2, s15
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80094a8:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	0e1b      	lsrs	r3, r3, #24
 80094ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ce:	ee17 2a90 	vmov	r2, s15
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094d6:	e008      	b.n	80094ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	609a      	str	r2, [r3, #8]
}
 80094ea:	bf00      	nop
 80094ec:	3724      	adds	r7, #36	; 0x24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	58024400 	.word	0x58024400
 80094fc:	03d09000 	.word	0x03d09000
 8009500:	46000000 	.word	0x46000000
 8009504:	4c742400 	.word	0x4c742400
 8009508:	4a742400 	.word	0x4a742400
 800950c:	4bbebc20 	.word	0x4bbebc20

08009510 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800951e:	4b53      	ldr	r3, [pc, #332]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d101      	bne.n	800952e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e099      	b.n	8009662 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800952e:	4b4f      	ldr	r3, [pc, #316]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a4e      	ldr	r2, [pc, #312]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800953a:	f7fc fce7 	bl	8005f0c <HAL_GetTick>
 800953e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009540:	e008      	b.n	8009554 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009542:	f7fc fce3 	bl	8005f0c <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e086      	b.n	8009662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009554:	4b45      	ldr	r3, [pc, #276]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f0      	bne.n	8009542 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009560:	4b42      	ldr	r3, [pc, #264]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	031b      	lsls	r3, r3, #12
 800956e:	493f      	ldr	r1, [pc, #252]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009570:	4313      	orrs	r3, r2
 8009572:	628b      	str	r3, [r1, #40]	; 0x28
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	3b01      	subs	r3, #1
 800957a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	3b01      	subs	r3, #1
 8009584:	025b      	lsls	r3, r3, #9
 8009586:	b29b      	uxth	r3, r3
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	3b01      	subs	r3, #1
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	3b01      	subs	r3, #1
 800959e:	061b      	lsls	r3, r3, #24
 80095a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095a4:	4931      	ldr	r1, [pc, #196]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095aa:	4b30      	ldr	r3, [pc, #192]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	492d      	ldr	r1, [pc, #180]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095bc:	4b2b      	ldr	r3, [pc, #172]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	f023 0220 	bic.w	r2, r3, #32
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	4928      	ldr	r1, [pc, #160]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095ce:	4b27      	ldr	r3, [pc, #156]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	4a26      	ldr	r2, [pc, #152]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095d4:	f023 0310 	bic.w	r3, r3, #16
 80095d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095de:	4b24      	ldr	r3, [pc, #144]	; (8009670 <RCCEx_PLL2_Config+0x160>)
 80095e0:	4013      	ands	r3, r2
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	69d2      	ldr	r2, [r2, #28]
 80095e6:	00d2      	lsls	r2, r2, #3
 80095e8:	4920      	ldr	r1, [pc, #128]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095ee:	4b1f      	ldr	r3, [pc, #124]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f2:	4a1e      	ldr	r2, [pc, #120]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 80095f4:	f043 0310 	orr.w	r3, r3, #16
 80095f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d106      	bne.n	800960e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009600:	4b1a      	ldr	r3, [pc, #104]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	4a19      	ldr	r2, [pc, #100]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800960a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800960c:	e00f      	b.n	800962e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d106      	bne.n	8009622 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009614:	4b15      	ldr	r3, [pc, #84]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	4a14      	ldr	r2, [pc, #80]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 800961a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800961e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009620:	e005      	b.n	800962e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	4a11      	ldr	r2, [pc, #68]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800962c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800962e:	4b0f      	ldr	r3, [pc, #60]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a0e      	ldr	r2, [pc, #56]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800963a:	f7fc fc67 	bl	8005f0c <HAL_GetTick>
 800963e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009640:	e008      	b.n	8009654 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009642:	f7fc fc63 	bl	8005f0c <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	2b02      	cmp	r3, #2
 800964e:	d901      	bls.n	8009654 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e006      	b.n	8009662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <RCCEx_PLL2_Config+0x15c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0f0      	beq.n	8009642 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	58024400 	.word	0x58024400
 8009670:	ffff0007 	.word	0xffff0007

08009674 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009682:	4b53      	ldr	r3, [pc, #332]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d101      	bne.n	8009692 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e099      	b.n	80097c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009692:	4b4f      	ldr	r3, [pc, #316]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a4e      	ldr	r2, [pc, #312]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800969c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969e:	f7fc fc35 	bl	8005f0c <HAL_GetTick>
 80096a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096a4:	e008      	b.n	80096b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80096a6:	f7fc fc31 	bl	8005f0c <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e086      	b.n	80097c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096b8:	4b45      	ldr	r3, [pc, #276]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f0      	bne.n	80096a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096c4:	4b42      	ldr	r3, [pc, #264]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	493f      	ldr	r1, [pc, #252]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	628b      	str	r3, [r1, #40]	; 0x28
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	3b01      	subs	r3, #1
 80096de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	025b      	lsls	r3, r3, #9
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	3b01      	subs	r3, #1
 8009702:	061b      	lsls	r3, r3, #24
 8009704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009708:	4931      	ldr	r1, [pc, #196]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800970a:	4313      	orrs	r3, r2
 800970c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800970e:	4b30      	ldr	r3, [pc, #192]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	492d      	ldr	r1, [pc, #180]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800971c:	4313      	orrs	r3, r2
 800971e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009720:	4b2b      	ldr	r3, [pc, #172]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	4928      	ldr	r1, [pc, #160]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009732:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800973e:	4b24      	ldr	r3, [pc, #144]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <RCCEx_PLL3_Config+0x160>)
 8009744:	4013      	ands	r3, r2
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	69d2      	ldr	r2, [r2, #28]
 800974a:	00d2      	lsls	r2, r2, #3
 800974c:	4920      	ldr	r1, [pc, #128]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800974e:	4313      	orrs	r3, r2
 8009750:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009752:	4b1f      	ldr	r3, [pc, #124]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800975c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d106      	bne.n	8009772 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009764:	4b1a      	ldr	r3, [pc, #104]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a19      	ldr	r2, [pc, #100]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800976a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009770:	e00f      	b.n	8009792 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d106      	bne.n	8009786 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009778:	4b15      	ldr	r3, [pc, #84]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	4a14      	ldr	r2, [pc, #80]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800977e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009784:	e005      	b.n	8009792 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009786:	4b12      	ldr	r3, [pc, #72]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a11      	ldr	r2, [pc, #68]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 800978c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009792:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a0e      	ldr	r2, [pc, #56]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 8009798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800979e:	f7fc fbb5 	bl	8005f0c <HAL_GetTick>
 80097a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097a4:	e008      	b.n	80097b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80097a6:	f7fc fbb1 	bl	8005f0c <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d901      	bls.n	80097b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e006      	b.n	80097c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <RCCEx_PLL3_Config+0x15c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0f0      	beq.n	80097a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400
 80097d4:	ffff0007 	.word	0xffff0007

080097d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e042      	b.n	8009870 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7fc fa6f 	bl	8005ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2224      	movs	r2, #36	; 0x24
 8009806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f8c2 	bl	80099a4 <UART_SetConfig>
 8009820:	4603      	mov	r3, r0
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e022      	b.n	8009870 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fe1e 	bl	800a474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fea5 	bl	800a5b8 <UART_CheckIdleState>
 800986e:	4603      	mov	r3, r0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800988e:	2b20      	cmp	r3, #32
 8009890:	f040 8083 	bne.w	800999a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <HAL_UART_Transmit+0x28>
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e07b      	b.n	800999c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Transmit+0x3a>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e074      	b.n	800999c <HAL_UART_Transmit+0x124>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2221      	movs	r2, #33	; 0x21
 80098c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ca:	f7fc fb1f 	bl	8005f0c <HAL_GetTick>
 80098ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	88fa      	ldrh	r2, [r7, #6]
 80098dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e8:	d108      	bne.n	80098fc <HAL_UART_Transmit+0x84>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80098f2:	2300      	movs	r3, #0
 80098f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	e003      	b.n	8009904 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800990c:	e02c      	b.n	8009968 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2200      	movs	r2, #0
 8009916:	2180      	movs	r1, #128	; 0x80
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 fe98 	bl	800a64e <UART_WaitOnFlagUntilTimeout>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e039      	b.n	800999c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10b      	bne.n	8009946 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800993c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	3302      	adds	r3, #2
 8009942:	61bb      	str	r3, [r7, #24]
 8009944:	e007      	b.n	8009956 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3301      	adds	r3, #1
 8009954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800995c:	b29b      	uxth	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800996e:	b29b      	uxth	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1cc      	bne.n	800990e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2200      	movs	r2, #0
 800997c:	2140      	movs	r1, #64	; 0x40
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fe65 	bl	800a64e <UART_WaitOnFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e006      	b.n	800999c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	e000      	b.n	800999c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800999a:	2302      	movs	r3, #2
  }
}
 800999c:	4618      	mov	r0, r3
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a8:	b092      	sub	sp, #72	; 0x48
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	431a      	orrs	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4bbe      	ldr	r3, [pc, #760]	; (8009ccc <UART_SetConfig+0x328>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099dc:	430b      	orrs	r3, r1
 80099de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4ab3      	ldr	r2, [pc, #716]	; (8009cd0 <UART_SetConfig+0x32c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d004      	beq.n	8009a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	4baf      	ldr	r3, [pc, #700]	; (8009cd4 <UART_SetConfig+0x330>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	f023 010f 	bic.w	r1, r3, #15
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4aa6      	ldr	r2, [pc, #664]	; (8009cd8 <UART_SetConfig+0x334>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d177      	bne.n	8009b34 <UART_SetConfig+0x190>
 8009a44:	4ba5      	ldr	r3, [pc, #660]	; (8009cdc <UART_SetConfig+0x338>)
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a4c:	2b28      	cmp	r3, #40	; 0x28
 8009a4e:	d86d      	bhi.n	8009b2c <UART_SetConfig+0x188>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0xb4>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009afd 	.word	0x08009afd
 8009a5c:	08009b2d 	.word	0x08009b2d
 8009a60:	08009b2d 	.word	0x08009b2d
 8009a64:	08009b2d 	.word	0x08009b2d
 8009a68:	08009b2d 	.word	0x08009b2d
 8009a6c:	08009b2d 	.word	0x08009b2d
 8009a70:	08009b2d 	.word	0x08009b2d
 8009a74:	08009b2d 	.word	0x08009b2d
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b2d 	.word	0x08009b2d
 8009a80:	08009b2d 	.word	0x08009b2d
 8009a84:	08009b2d 	.word	0x08009b2d
 8009a88:	08009b2d 	.word	0x08009b2d
 8009a8c:	08009b2d 	.word	0x08009b2d
 8009a90:	08009b2d 	.word	0x08009b2d
 8009a94:	08009b2d 	.word	0x08009b2d
 8009a98:	08009b0d 	.word	0x08009b0d
 8009a9c:	08009b2d 	.word	0x08009b2d
 8009aa0:	08009b2d 	.word	0x08009b2d
 8009aa4:	08009b2d 	.word	0x08009b2d
 8009aa8:	08009b2d 	.word	0x08009b2d
 8009aac:	08009b2d 	.word	0x08009b2d
 8009ab0:	08009b2d 	.word	0x08009b2d
 8009ab4:	08009b2d 	.word	0x08009b2d
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b2d 	.word	0x08009b2d
 8009ac0:	08009b2d 	.word	0x08009b2d
 8009ac4:	08009b2d 	.word	0x08009b2d
 8009ac8:	08009b2d 	.word	0x08009b2d
 8009acc:	08009b2d 	.word	0x08009b2d
 8009ad0:	08009b2d 	.word	0x08009b2d
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b2d 	.word	0x08009b2d
 8009ae0:	08009b2d 	.word	0x08009b2d
 8009ae4:	08009b2d 	.word	0x08009b2d
 8009ae8:	08009b2d 	.word	0x08009b2d
 8009aec:	08009b2d 	.word	0x08009b2d
 8009af0:	08009b2d 	.word	0x08009b2d
 8009af4:	08009b2d 	.word	0x08009b2d
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e222      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e21e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e21a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e216      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e212      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e20e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e20a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a69      	ldr	r2, [pc, #420]	; (8009ce0 <UART_SetConfig+0x33c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d130      	bne.n	8009ba0 <UART_SetConfig+0x1fc>
 8009b3e:	4b67      	ldr	r3, [pc, #412]	; (8009cdc <UART_SetConfig+0x338>)
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d826      	bhi.n	8009b98 <UART_SetConfig+0x1f4>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x1ac>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	08009b79 	.word	0x08009b79
 8009b5c:	08009b81 	.word	0x08009b81
 8009b60:	08009b89 	.word	0x08009b89
 8009b64:	08009b91 	.word	0x08009b91
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e1ec      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e1e8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e1e4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e1e0      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b88:	2320      	movs	r3, #32
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e1dc      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b90:	2340      	movs	r3, #64	; 0x40
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e1d8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009b98:	2380      	movs	r3, #128	; 0x80
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e1d4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a4f      	ldr	r2, [pc, #316]	; (8009ce4 <UART_SetConfig+0x340>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d130      	bne.n	8009c0c <UART_SetConfig+0x268>
 8009baa:	4b4c      	ldr	r3, [pc, #304]	; (8009cdc <UART_SetConfig+0x338>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d826      	bhi.n	8009c04 <UART_SetConfig+0x260>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <UART_SetConfig+0x218>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd5 	.word	0x08009bd5
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009be5 	.word	0x08009be5
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1b6      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1b2      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009be4:	2308      	movs	r3, #8
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1ae      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e1aa      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e1a6      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009bfc:	2340      	movs	r3, #64	; 0x40
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e1a2      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e19e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a35      	ldr	r2, [pc, #212]	; (8009ce8 <UART_SetConfig+0x344>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d130      	bne.n	8009c78 <UART_SetConfig+0x2d4>
 8009c16:	4b31      	ldr	r3, [pc, #196]	; (8009cdc <UART_SetConfig+0x338>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d826      	bhi.n	8009c70 <UART_SetConfig+0x2cc>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x284>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e180      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e17c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e178      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e174      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e170      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e16c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c76:	e168      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <UART_SetConfig+0x348>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d142      	bne.n	8009d08 <UART_SetConfig+0x364>
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <UART_SetConfig+0x338>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d838      	bhi.n	8009d00 <UART_SetConfig+0x35c>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <UART_SetConfig+0x2f0>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cbd 	.word	0x08009cbd
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e14a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e146      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e142      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e13e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ccc:	cfff69f3 	.word	0xcfff69f3
 8009cd0:	58000c00 	.word	0x58000c00
 8009cd4:	11fff4ff 	.word	0x11fff4ff
 8009cd8:	40011000 	.word	0x40011000
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	40004400 	.word	0x40004400
 8009ce4:	40004800 	.word	0x40004800
 8009ce8:	40004c00 	.word	0x40004c00
 8009cec:	40005000 	.word	0x40005000
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e128      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e124      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009d00:	2380      	movs	r3, #128	; 0x80
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e120      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4acb      	ldr	r2, [pc, #812]	; (800a03c <UART_SetConfig+0x698>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d176      	bne.n	8009e00 <UART_SetConfig+0x45c>
 8009d12:	4bcb      	ldr	r3, [pc, #812]	; (800a040 <UART_SetConfig+0x69c>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d1a:	2b28      	cmp	r3, #40	; 0x28
 8009d1c:	d86c      	bhi.n	8009df8 <UART_SetConfig+0x454>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x380>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009dc9 	.word	0x08009dc9
 8009d28:	08009df9 	.word	0x08009df9
 8009d2c:	08009df9 	.word	0x08009df9
 8009d30:	08009df9 	.word	0x08009df9
 8009d34:	08009df9 	.word	0x08009df9
 8009d38:	08009df9 	.word	0x08009df9
 8009d3c:	08009df9 	.word	0x08009df9
 8009d40:	08009df9 	.word	0x08009df9
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009df9 	.word	0x08009df9
 8009d4c:	08009df9 	.word	0x08009df9
 8009d50:	08009df9 	.word	0x08009df9
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009df9 	.word	0x08009df9
 8009d5c:	08009df9 	.word	0x08009df9
 8009d60:	08009df9 	.word	0x08009df9
 8009d64:	08009dd9 	.word	0x08009dd9
 8009d68:	08009df9 	.word	0x08009df9
 8009d6c:	08009df9 	.word	0x08009df9
 8009d70:	08009df9 	.word	0x08009df9
 8009d74:	08009df9 	.word	0x08009df9
 8009d78:	08009df9 	.word	0x08009df9
 8009d7c:	08009df9 	.word	0x08009df9
 8009d80:	08009df9 	.word	0x08009df9
 8009d84:	08009de1 	.word	0x08009de1
 8009d88:	08009df9 	.word	0x08009df9
 8009d8c:	08009df9 	.word	0x08009df9
 8009d90:	08009df9 	.word	0x08009df9
 8009d94:	08009df9 	.word	0x08009df9
 8009d98:	08009df9 	.word	0x08009df9
 8009d9c:	08009df9 	.word	0x08009df9
 8009da0:	08009df9 	.word	0x08009df9
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009df9 	.word	0x08009df9
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009df9 	.word	0x08009df9
 8009dbc:	08009df9 	.word	0x08009df9
 8009dc0:	08009df9 	.word	0x08009df9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0bc      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0b8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e0b4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e0b0      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dee:	e0ac      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df6:	e0a8      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfe:	e0a4      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a8f      	ldr	r2, [pc, #572]	; (800a044 <UART_SetConfig+0x6a0>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d130      	bne.n	8009e6c <UART_SetConfig+0x4c8>
 8009e0a:	4b8d      	ldr	r3, [pc, #564]	; (800a040 <UART_SetConfig+0x69c>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d826      	bhi.n	8009e64 <UART_SetConfig+0x4c0>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <UART_SetConfig+0x478>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e086      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e082      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e07e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e07a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e076      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e5c:	2340      	movs	r3, #64	; 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e62:	e072      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e64:	2380      	movs	r3, #128	; 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6a:	e06e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a75      	ldr	r2, [pc, #468]	; (800a048 <UART_SetConfig+0x6a4>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x534>
 8009e76:	4b72      	ldr	r3, [pc, #456]	; (800a040 <UART_SetConfig+0x69c>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x52c>
 8009e82:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <UART_SetConfig+0x4e4>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e050      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e04c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e048      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e044      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e040      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ece:	e03c      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ed0:	2380      	movs	r3, #128	; 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed6:	e038      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a5b      	ldr	r2, [pc, #364]	; (800a04c <UART_SetConfig+0x6a8>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d130      	bne.n	8009f44 <UART_SetConfig+0x5a0>
 8009ee2:	4b57      	ldr	r3, [pc, #348]	; (800a040 <UART_SetConfig+0x69c>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d826      	bhi.n	8009f3c <UART_SetConfig+0x598>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0x550>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f15 	.word	0x08009f15
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f2d 	.word	0x08009f2d
 8009f08:	08009f35 	.word	0x08009f35
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e01a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e016      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e012      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e00e      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e00a      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3a:	e006      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f3c:	2380      	movs	r3, #128	; 0x80
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e002      	b.n	8009f4a <UART_SetConfig+0x5a6>
 8009f44:	2380      	movs	r3, #128	; 0x80
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a3f      	ldr	r2, [pc, #252]	; (800a04c <UART_SetConfig+0x6a8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	f040 80f8 	bne.w	800a146 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	dc46      	bgt.n	8009fec <UART_SetConfig+0x648>
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	f2c0 8082 	blt.w	800a068 <UART_SetConfig+0x6c4>
 8009f64:	3b02      	subs	r3, #2
 8009f66:	2b1e      	cmp	r3, #30
 8009f68:	d87e      	bhi.n	800a068 <UART_SetConfig+0x6c4>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x5cc>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	0800a069 	.word	0x0800a069
 8009f78:	08009ffb 	.word	0x08009ffb
 8009f7c:	0800a069 	.word	0x0800a069
 8009f80:	0800a069 	.word	0x0800a069
 8009f84:	0800a069 	.word	0x0800a069
 8009f88:	0800a00b 	.word	0x0800a00b
 8009f8c:	0800a069 	.word	0x0800a069
 8009f90:	0800a069 	.word	0x0800a069
 8009f94:	0800a069 	.word	0x0800a069
 8009f98:	0800a069 	.word	0x0800a069
 8009f9c:	0800a069 	.word	0x0800a069
 8009fa0:	0800a069 	.word	0x0800a069
 8009fa4:	0800a069 	.word	0x0800a069
 8009fa8:	0800a01b 	.word	0x0800a01b
 8009fac:	0800a069 	.word	0x0800a069
 8009fb0:	0800a069 	.word	0x0800a069
 8009fb4:	0800a069 	.word	0x0800a069
 8009fb8:	0800a069 	.word	0x0800a069
 8009fbc:	0800a069 	.word	0x0800a069
 8009fc0:	0800a069 	.word	0x0800a069
 8009fc4:	0800a069 	.word	0x0800a069
 8009fc8:	0800a069 	.word	0x0800a069
 8009fcc:	0800a069 	.word	0x0800a069
 8009fd0:	0800a069 	.word	0x0800a069
 8009fd4:	0800a069 	.word	0x0800a069
 8009fd8:	0800a069 	.word	0x0800a069
 8009fdc:	0800a069 	.word	0x0800a069
 8009fe0:	0800a069 	.word	0x0800a069
 8009fe4:	0800a069 	.word	0x0800a069
 8009fe8:	0800a05b 	.word	0x0800a05b
 8009fec:	2b40      	cmp	r3, #64	; 0x40
 8009fee:	d037      	beq.n	800a060 <UART_SetConfig+0x6bc>
 8009ff0:	e03a      	b.n	800a068 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ff2:	f7fe ffcf 	bl	8008f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ff8:	e03c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe ffde 	bl	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a008:	e034      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a00a:	f107 0318 	add.w	r3, r7, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff f92a 	bl	8009268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a018:	e02c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a01a:	4b09      	ldr	r3, [pc, #36]	; (800a040 <UART_SetConfig+0x69c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a026:	4b06      	ldr	r3, [pc, #24]	; (800a040 <UART_SetConfig+0x69c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	4a07      	ldr	r2, [pc, #28]	; (800a050 <UART_SetConfig+0x6ac>)
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a038:	e01c      	b.n	800a074 <UART_SetConfig+0x6d0>
 800a03a:	bf00      	nop
 800a03c:	40011400 	.word	0x40011400
 800a040:	58024400 	.word	0x58024400
 800a044:	40007800 	.word	0x40007800
 800a048:	40007c00 	.word	0x40007c00
 800a04c:	58000c00 	.word	0x58000c00
 800a050:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a054:	4b9d      	ldr	r3, [pc, #628]	; (800a2cc <UART_SetConfig+0x928>)
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a058:	e00c      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a05a:	4b9d      	ldr	r3, [pc, #628]	; (800a2d0 <UART_SetConfig+0x92c>)
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a05e:	e009      	b.n	800a074 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a066:	e005      	b.n	800a074 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a072:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 81de 	beq.w	800a438 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	4a94      	ldr	r2, [pc, #592]	; (800a2d4 <UART_SetConfig+0x930>)
 800a082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a086:	461a      	mov	r2, r3
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a08e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	4613      	mov	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d305      	bcc.n	800a0ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d903      	bls.n	800a0b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0b2:	e1c1      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
 800a0ba:	60fa      	str	r2, [r7, #12]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	4a84      	ldr	r2, [pc, #528]	; (800a2d4 <UART_SetConfig+0x930>)
 800a0c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	607a      	str	r2, [r7, #4]
 800a0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0d6:	f7f6 fc25 	bl	8000924 <__aeabi_uldivmod>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	020b      	lsls	r3, r1, #8
 800a0ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0f0:	0202      	lsls	r2, r0, #8
 800a0f2:	6979      	ldr	r1, [r7, #20]
 800a0f4:	6849      	ldr	r1, [r1, #4]
 800a0f6:	0849      	lsrs	r1, r1, #1
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	eb12 0804 	adds.w	r8, r2, r4
 800a102:	eb43 0905 	adc.w	r9, r3, r5
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	469a      	mov	sl, r3
 800a10e:	4693      	mov	fp, r2
 800a110:	4652      	mov	r2, sl
 800a112:	465b      	mov	r3, fp
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 fc04 	bl	8000924 <__aeabi_uldivmod>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4613      	mov	r3, r2
 800a122:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a12a:	d308      	bcc.n	800a13e <UART_SetConfig+0x79a>
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a132:	d204      	bcs.n	800a13e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13a:	60da      	str	r2, [r3, #12]
 800a13c:	e17c      	b.n	800a438 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a144:	e178      	b.n	800a438 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a14e:	f040 80c5 	bne.w	800a2dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a156:	2b20      	cmp	r3, #32
 800a158:	dc48      	bgt.n	800a1ec <UART_SetConfig+0x848>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	db7b      	blt.n	800a256 <UART_SetConfig+0x8b2>
 800a15e:	2b20      	cmp	r3, #32
 800a160:	d879      	bhi.n	800a256 <UART_SetConfig+0x8b2>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <UART_SetConfig+0x7c4>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a1fb 	.word	0x0800a1fb
 800a170:	0800a257 	.word	0x0800a257
 800a174:	0800a257 	.word	0x0800a257
 800a178:	0800a203 	.word	0x0800a203
 800a17c:	0800a257 	.word	0x0800a257
 800a180:	0800a257 	.word	0x0800a257
 800a184:	0800a257 	.word	0x0800a257
 800a188:	0800a213 	.word	0x0800a213
 800a18c:	0800a257 	.word	0x0800a257
 800a190:	0800a257 	.word	0x0800a257
 800a194:	0800a257 	.word	0x0800a257
 800a198:	0800a257 	.word	0x0800a257
 800a19c:	0800a257 	.word	0x0800a257
 800a1a0:	0800a257 	.word	0x0800a257
 800a1a4:	0800a257 	.word	0x0800a257
 800a1a8:	0800a223 	.word	0x0800a223
 800a1ac:	0800a257 	.word	0x0800a257
 800a1b0:	0800a257 	.word	0x0800a257
 800a1b4:	0800a257 	.word	0x0800a257
 800a1b8:	0800a257 	.word	0x0800a257
 800a1bc:	0800a257 	.word	0x0800a257
 800a1c0:	0800a257 	.word	0x0800a257
 800a1c4:	0800a257 	.word	0x0800a257
 800a1c8:	0800a257 	.word	0x0800a257
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a257 	.word	0x0800a257
 800a1d4:	0800a257 	.word	0x0800a257
 800a1d8:	0800a257 	.word	0x0800a257
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a257 	.word	0x0800a257
 800a1e4:	0800a257 	.word	0x0800a257
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d02e      	beq.n	800a24e <UART_SetConfig+0x8aa>
 800a1f0:	e031      	b.n	800a256 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f2:	f7fd ff5d 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a1f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1f8:	e033      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fa:	f7fd ff6f 	bl	80080dc <HAL_RCC_GetPCLK2Freq>
 800a1fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a200:	e02f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe feda 	bl	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a210:	e027      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff f826 	bl	8009268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a220:	e01f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a222:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <UART_SetConfig+0x934>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a22e:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <UART_SetConfig+0x934>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	4a24      	ldr	r2, [pc, #144]	; (800a2cc <UART_SetConfig+0x928>)
 800a23a:	fa22 f303 	lsr.w	r3, r2, r3
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a240:	e00f      	b.n	800a262 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a242:	4b22      	ldr	r3, [pc, #136]	; (800a2cc <UART_SetConfig+0x928>)
 800a244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a246:	e00c      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a248:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <UART_SetConfig+0x92c>)
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80e7 	beq.w	800a438 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	4a19      	ldr	r2, [pc, #100]	; (800a2d4 <UART_SetConfig+0x930>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d916      	bls.n	800a2c4 <UART_SetConfig+0x920>
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29c:	d212      	bcs.n	800a2c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f023 030f 	bic.w	r3, r3, #15
 800a2a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	e0b9      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2ca:	e0b5      	b.n	800a438 <UART_SetConfig+0xa94>
 800a2cc:	03d09000 	.word	0x03d09000
 800a2d0:	003d0900 	.word	0x003d0900
 800a2d4:	0800ef00 	.word	0x0800ef00
 800a2d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	dc49      	bgt.n	800a378 <UART_SetConfig+0x9d4>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	db7c      	blt.n	800a3e2 <UART_SetConfig+0xa3e>
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d87a      	bhi.n	800a3e2 <UART_SetConfig+0xa3e>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x950>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a387 	.word	0x0800a387
 800a2fc:	0800a3e3 	.word	0x0800a3e3
 800a300:	0800a3e3 	.word	0x0800a3e3
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a3e3 	.word	0x0800a3e3
 800a30c:	0800a3e3 	.word	0x0800a3e3
 800a310:	0800a3e3 	.word	0x0800a3e3
 800a314:	0800a39f 	.word	0x0800a39f
 800a318:	0800a3e3 	.word	0x0800a3e3
 800a31c:	0800a3e3 	.word	0x0800a3e3
 800a320:	0800a3e3 	.word	0x0800a3e3
 800a324:	0800a3e3 	.word	0x0800a3e3
 800a328:	0800a3e3 	.word	0x0800a3e3
 800a32c:	0800a3e3 	.word	0x0800a3e3
 800a330:	0800a3e3 	.word	0x0800a3e3
 800a334:	0800a3af 	.word	0x0800a3af
 800a338:	0800a3e3 	.word	0x0800a3e3
 800a33c:	0800a3e3 	.word	0x0800a3e3
 800a340:	0800a3e3 	.word	0x0800a3e3
 800a344:	0800a3e3 	.word	0x0800a3e3
 800a348:	0800a3e3 	.word	0x0800a3e3
 800a34c:	0800a3e3 	.word	0x0800a3e3
 800a350:	0800a3e3 	.word	0x0800a3e3
 800a354:	0800a3e3 	.word	0x0800a3e3
 800a358:	0800a3e3 	.word	0x0800a3e3
 800a35c:	0800a3e3 	.word	0x0800a3e3
 800a360:	0800a3e3 	.word	0x0800a3e3
 800a364:	0800a3e3 	.word	0x0800a3e3
 800a368:	0800a3e3 	.word	0x0800a3e3
 800a36c:	0800a3e3 	.word	0x0800a3e3
 800a370:	0800a3e3 	.word	0x0800a3e3
 800a374:	0800a3d5 	.word	0x0800a3d5
 800a378:	2b40      	cmp	r3, #64	; 0x40
 800a37a:	d02e      	beq.n	800a3da <UART_SetConfig+0xa36>
 800a37c:	e031      	b.n	800a3e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a37e:	f7fd fe97 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a382:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a384:	e033      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a386:	f7fd fea9 	bl	80080dc <HAL_RCC_GetPCLK2Freq>
 800a38a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a38c:	e02f      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe fe14 	bl	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39c:	e027      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a39e:	f107 0318 	add.w	r3, r7, #24
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe ff60 	bl	8009268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ac:	e01f      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ae:	4b2d      	ldr	r3, [pc, #180]	; (800a464 <UART_SetConfig+0xac0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ba:	4b2a      	ldr	r3, [pc, #168]	; (800a464 <UART_SetConfig+0xac0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	4a28      	ldr	r2, [pc, #160]	; (800a468 <UART_SetConfig+0xac4>)
 800a3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3cc:	e00f      	b.n	800a3ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3ce:	4b26      	ldr	r3, [pc, #152]	; (800a468 <UART_SetConfig+0xac4>)
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d2:	e00c      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3d4:	4b25      	ldr	r3, [pc, #148]	; (800a46c <UART_SetConfig+0xac8>)
 800a3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d8:	e009      	b.n	800a3ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e0:	e005      	b.n	800a3ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3ec:	bf00      	nop
    }

    if (pclk != 0U)
 800a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d021      	beq.n	800a438 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	; (800a470 <UART_SetConfig+0xacc>)
 800a3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a402:	fbb3 f2f2 	udiv	r2, r3, r2
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	441a      	add	r2, r3
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	fbb2 f3f3 	udiv	r3, r2, r3
 800a416:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	2b0f      	cmp	r3, #15
 800a41c:	d909      	bls.n	800a432 <UART_SetConfig+0xa8e>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a424:	d205      	bcs.n	800a432 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	b29a      	uxth	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60da      	str	r2, [r3, #12]
 800a430:	e002      	b.n	800a438 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2200      	movs	r2, #0
 800a452:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a454:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3748      	adds	r7, #72	; 0x48
 800a45c:	46bd      	mov	sp, r7
 800a45e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a462:	bf00      	nop
 800a464:	58024400 	.word	0x58024400
 800a468:	03d09000 	.word	0x03d09000
 800a46c:	003d0900 	.word	0x003d0900
 800a470:	0800ef00 	.word	0x0800ef00

0800a474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00a      	beq.n	800a49e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a572:	d10a      	bne.n	800a58a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	605a      	str	r2, [r3, #4]
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5c8:	f7fb fca0 	bl	8005f0c <HAL_GetTick>
 800a5cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d10e      	bne.n	800a5fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f82f 	bl	800a64e <UART_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e025      	b.n	800a646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b04      	cmp	r3, #4
 800a606:	d10e      	bne.n	800a626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f819 	bl	800a64e <UART_WaitOnFlagUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e00f      	b.n	800a646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b09c      	sub	sp, #112	; 0x70
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	603b      	str	r3, [r7, #0]
 800a65a:	4613      	mov	r3, r2
 800a65c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a65e:	e0a9      	b.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	f000 80a5 	beq.w	800a7b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66a:	f7fb fc4f 	bl	8005f0c <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <UART_WaitOnFlagUntilTimeout+0x32>
 800a67a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d140      	bne.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a694:	667b      	str	r3, [r7, #100]	; 0x64
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e6      	bne.n	800a680 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	f023 0301 	bic.w	r3, r3, #1
 800a6c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6d2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e5      	bne.n	800a6b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e069      	b.n	800a7d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d051      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a71a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a71e:	d149      	bne.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a73e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
 800a74a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e6      	bne.n	800a72a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	613b      	str	r3, [r7, #16]
   return(result);
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f023 0301 	bic.w	r3, r3, #1
 800a772:	66bb      	str	r3, [r7, #104]	; 0x68
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a77c:	623a      	str	r2, [r7, #32]
 800a77e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	69f9      	ldr	r1, [r7, #28]
 800a782:	6a3a      	ldr	r2, [r7, #32]
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	61bb      	str	r3, [r7, #24]
   return(result);
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e5      	bne.n	800a75c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e010      	b.n	800a7d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69da      	ldr	r2, [r3, #28]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	f43f af46 	beq.w	800a660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3770      	adds	r7, #112	; 0x70
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e027      	b.n	800a844 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2224      	movs	r2, #36	; 0x24
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f022 0201 	bic.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a864:	2302      	movs	r3, #2
 800a866:	e02d      	b.n	800a8c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2224      	movs	r2, #36	; 0x24
 800a874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0201 	bic.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f84f 	bl	800a948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e02d      	b.n	800a940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2224      	movs	r2, #36	; 0x24
 800a8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f811 	bl	800a948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2220      	movs	r2, #32
 800a932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a954:	2b00      	cmp	r3, #0
 800a956:	d108      	bne.n	800a96a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a968:	e031      	b.n	800a9ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a96a:	2310      	movs	r3, #16
 800a96c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a96e:	2310      	movs	r3, #16
 800a970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	0e5b      	lsrs	r3, r3, #25
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0307 	and.w	r3, r3, #7
 800a980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	0f5b      	lsrs	r3, r3, #29
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	7b3a      	ldrb	r2, [r7, #12]
 800a996:	4911      	ldr	r1, [pc, #68]	; (800a9dc <UARTEx_SetNbDataToProcess+0x94>)
 800a998:	5c8a      	ldrb	r2, [r1, r2]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a99e:	7b3a      	ldrb	r2, [r7, #12]
 800a9a0:	490f      	ldr	r1, [pc, #60]	; (800a9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	7b7a      	ldrb	r2, [r7, #13]
 800a9b4:	4909      	ldr	r1, [pc, #36]	; (800a9dc <UARTEx_SetNbDataToProcess+0x94>)
 800a9b6:	5c8a      	ldrb	r2, [r1, r2]
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9bc:	7b7a      	ldrb	r2, [r7, #13]
 800a9be:	4908      	ldr	r1, [pc, #32]	; (800a9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9ce:	bf00      	nop
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	0800ef18 	.word	0x0800ef18
 800a9e0:	0800ef20 	.word	0x0800ef20

0800a9e4 <__errno>:
 800a9e4:	4b01      	ldr	r3, [pc, #4]	; (800a9ec <__errno+0x8>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	24000034 	.word	0x24000034

0800a9f0 <__libc_init_array>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	4d0d      	ldr	r5, [pc, #52]	; (800aa28 <__libc_init_array+0x38>)
 800a9f4:	4c0d      	ldr	r4, [pc, #52]	; (800aa2c <__libc_init_array+0x3c>)
 800a9f6:	1b64      	subs	r4, r4, r5
 800a9f8:	10a4      	asrs	r4, r4, #2
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	42a6      	cmp	r6, r4
 800a9fe:	d109      	bne.n	800aa14 <__libc_init_array+0x24>
 800aa00:	4d0b      	ldr	r5, [pc, #44]	; (800aa30 <__libc_init_array+0x40>)
 800aa02:	4c0c      	ldr	r4, [pc, #48]	; (800aa34 <__libc_init_array+0x44>)
 800aa04:	f004 f9e4 	bl	800edd0 <_init>
 800aa08:	1b64      	subs	r4, r4, r5
 800aa0a:	10a4      	asrs	r4, r4, #2
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	42a6      	cmp	r6, r4
 800aa10:	d105      	bne.n	800aa1e <__libc_init_array+0x2e>
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa18:	4798      	blx	r3
 800aa1a:	3601      	adds	r6, #1
 800aa1c:	e7ee      	b.n	800a9fc <__libc_init_array+0xc>
 800aa1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa22:	4798      	blx	r3
 800aa24:	3601      	adds	r6, #1
 800aa26:	e7f2      	b.n	800aa0e <__libc_init_array+0x1e>
 800aa28:	08011110 	.word	0x08011110
 800aa2c:	08011110 	.word	0x08011110
 800aa30:	08011110 	.word	0x08011110
 800aa34:	08011114 	.word	0x08011114

0800aa38 <memset>:
 800aa38:	4402      	add	r2, r0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d100      	bne.n	800aa42 <memset+0xa>
 800aa40:	4770      	bx	lr
 800aa42:	f803 1b01 	strb.w	r1, [r3], #1
 800aa46:	e7f9      	b.n	800aa3c <memset+0x4>

0800aa48 <__cvt>:
 800aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4a:	ed2d 8b02 	vpush	{d8}
 800aa4e:	eeb0 8b40 	vmov.f64	d8, d0
 800aa52:	b085      	sub	sp, #20
 800aa54:	4617      	mov	r7, r2
 800aa56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aa58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa5a:	ee18 2a90 	vmov	r2, s17
 800aa5e:	f025 0520 	bic.w	r5, r5, #32
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	bfb6      	itet	lt
 800aa66:	222d      	movlt	r2, #45	; 0x2d
 800aa68:	2200      	movge	r2, #0
 800aa6a:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa6e:	2d46      	cmp	r5, #70	; 0x46
 800aa70:	460c      	mov	r4, r1
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	d004      	beq.n	800aa80 <__cvt+0x38>
 800aa76:	2d45      	cmp	r5, #69	; 0x45
 800aa78:	d100      	bne.n	800aa7c <__cvt+0x34>
 800aa7a:	3401      	adds	r4, #1
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	e000      	b.n	800aa82 <__cvt+0x3a>
 800aa80:	2103      	movs	r1, #3
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	ab02      	add	r3, sp, #8
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4633      	mov	r3, r6
 800aa8e:	eeb0 0b48 	vmov.f64	d0, d8
 800aa92:	f000 fdf5 	bl	800b680 <_dtoa_r>
 800aa96:	2d47      	cmp	r5, #71	; 0x47
 800aa98:	d101      	bne.n	800aa9e <__cvt+0x56>
 800aa9a:	07fb      	lsls	r3, r7, #31
 800aa9c:	d51a      	bpl.n	800aad4 <__cvt+0x8c>
 800aa9e:	2d46      	cmp	r5, #70	; 0x46
 800aaa0:	eb00 0204 	add.w	r2, r0, r4
 800aaa4:	d10c      	bne.n	800aac0 <__cvt+0x78>
 800aaa6:	7803      	ldrb	r3, [r0, #0]
 800aaa8:	2b30      	cmp	r3, #48	; 0x30
 800aaaa:	d107      	bne.n	800aabc <__cvt+0x74>
 800aaac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab4:	bf1c      	itt	ne
 800aab6:	f1c4 0401 	rsbne	r4, r4, #1
 800aaba:	6034      	strne	r4, [r6, #0]
 800aabc:	6833      	ldr	r3, [r6, #0]
 800aabe:	441a      	add	r2, r3
 800aac0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac8:	bf08      	it	eq
 800aaca:	9203      	streq	r2, [sp, #12]
 800aacc:	2130      	movs	r1, #48	; 0x30
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d307      	bcc.n	800aae4 <__cvt+0x9c>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aad8:	1a1b      	subs	r3, r3, r0
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	b005      	add	sp, #20
 800aade:	ecbd 8b02 	vpop	{d8}
 800aae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae4:	1c5c      	adds	r4, r3, #1
 800aae6:	9403      	str	r4, [sp, #12]
 800aae8:	7019      	strb	r1, [r3, #0]
 800aaea:	e7f0      	b.n	800aace <__cvt+0x86>

0800aaec <__exponent>:
 800aaec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	bfb8      	it	lt
 800aaf4:	4249      	neglt	r1, r1
 800aaf6:	f803 2b02 	strb.w	r2, [r3], #2
 800aafa:	bfb4      	ite	lt
 800aafc:	222d      	movlt	r2, #45	; 0x2d
 800aafe:	222b      	movge	r2, #43	; 0x2b
 800ab00:	2909      	cmp	r1, #9
 800ab02:	7042      	strb	r2, [r0, #1]
 800ab04:	dd2a      	ble.n	800ab5c <__exponent+0x70>
 800ab06:	f10d 0407 	add.w	r4, sp, #7
 800ab0a:	46a4      	mov	ip, r4
 800ab0c:	270a      	movs	r7, #10
 800ab0e:	46a6      	mov	lr, r4
 800ab10:	460a      	mov	r2, r1
 800ab12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab16:	fb07 1516 	mls	r5, r7, r6, r1
 800ab1a:	3530      	adds	r5, #48	; 0x30
 800ab1c:	2a63      	cmp	r2, #99	; 0x63
 800ab1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab26:	4631      	mov	r1, r6
 800ab28:	dcf1      	bgt.n	800ab0e <__exponent+0x22>
 800ab2a:	3130      	adds	r1, #48	; 0x30
 800ab2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ab30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab34:	1c44      	adds	r4, r0, #1
 800ab36:	4629      	mov	r1, r5
 800ab38:	4561      	cmp	r1, ip
 800ab3a:	d30a      	bcc.n	800ab52 <__exponent+0x66>
 800ab3c:	f10d 0209 	add.w	r2, sp, #9
 800ab40:	eba2 020e 	sub.w	r2, r2, lr
 800ab44:	4565      	cmp	r5, ip
 800ab46:	bf88      	it	hi
 800ab48:	2200      	movhi	r2, #0
 800ab4a:	4413      	add	r3, r2
 800ab4c:	1a18      	subs	r0, r3, r0
 800ab4e:	b003      	add	sp, #12
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab5a:	e7ed      	b.n	800ab38 <__exponent+0x4c>
 800ab5c:	2330      	movs	r3, #48	; 0x30
 800ab5e:	3130      	adds	r1, #48	; 0x30
 800ab60:	7083      	strb	r3, [r0, #2]
 800ab62:	70c1      	strb	r1, [r0, #3]
 800ab64:	1d03      	adds	r3, r0, #4
 800ab66:	e7f1      	b.n	800ab4c <__exponent+0x60>

0800ab68 <_printf_float>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	b08b      	sub	sp, #44	; 0x2c
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ab74:	4616      	mov	r6, r2
 800ab76:	461f      	mov	r7, r3
 800ab78:	4605      	mov	r5, r0
 800ab7a:	f001 fca7 	bl	800c4cc <_localeconv_r>
 800ab7e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab82:	4658      	mov	r0, fp
 800ab84:	f7f5 fbac 	bl	80002e0 <strlen>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9308      	str	r3, [sp, #32]
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab94:	6822      	ldr	r2, [r4, #0]
 800ab96:	3307      	adds	r3, #7
 800ab98:	f023 0307 	bic.w	r3, r3, #7
 800ab9c:	f103 0108 	add.w	r1, r3, #8
 800aba0:	f8c8 1000 	str.w	r1, [r8]
 800aba4:	4682      	mov	sl, r0
 800aba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800abae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ae10 <_printf_float+0x2a8>
 800abb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800abb6:	eeb0 6bc0 	vabs.f64	d6, d0
 800abba:	eeb4 6b47 	vcmp.f64	d6, d7
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	dd24      	ble.n	800ac0e <_printf_float+0xa6>
 800abc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	d502      	bpl.n	800abd4 <_printf_float+0x6c>
 800abce:	232d      	movs	r3, #45	; 0x2d
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	4b90      	ldr	r3, [pc, #576]	; (800ae18 <_printf_float+0x2b0>)
 800abd6:	4891      	ldr	r0, [pc, #580]	; (800ae1c <_printf_float+0x2b4>)
 800abd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800abdc:	bf94      	ite	ls
 800abde:	4698      	movls	r8, r3
 800abe0:	4680      	movhi	r8, r0
 800abe2:	2303      	movs	r3, #3
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	f022 0204 	bic.w	r2, r2, #4
 800abea:	2300      	movs	r3, #0
 800abec:	6022      	str	r2, [r4, #0]
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	9700      	str	r7, [sp, #0]
 800abf2:	4633      	mov	r3, r6
 800abf4:	aa09      	add	r2, sp, #36	; 0x24
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 f9d3 	bl	800afa4 <_printf_common>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f040 808a 	bne.w	800ad18 <_printf_float+0x1b0>
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	b00b      	add	sp, #44	; 0x2c
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	d709      	bvc.n	800ac2c <_printf_float+0xc4>
 800ac18:	ee10 3a90 	vmov	r3, s1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfbc      	itt	lt
 800ac20:	232d      	movlt	r3, #45	; 0x2d
 800ac22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac26:	487e      	ldr	r0, [pc, #504]	; (800ae20 <_printf_float+0x2b8>)
 800ac28:	4b7e      	ldr	r3, [pc, #504]	; (800ae24 <_printf_float+0x2bc>)
 800ac2a:	e7d5      	b.n	800abd8 <_printf_float+0x70>
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ac32:	9104      	str	r1, [sp, #16]
 800ac34:	1c59      	adds	r1, r3, #1
 800ac36:	d13c      	bne.n	800acb2 <_printf_float+0x14a>
 800ac38:	2306      	movs	r3, #6
 800ac3a:	6063      	str	r3, [r4, #4]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9303      	str	r3, [sp, #12]
 800ac40:	ab08      	add	r3, sp, #32
 800ac42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ac46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac4a:	ab07      	add	r3, sp, #28
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	6022      	str	r2, [r4, #0]
 800ac52:	f10d 031b 	add.w	r3, sp, #27
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7ff fef6 	bl	800aa48 <__cvt>
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	9907      	ldr	r1, [sp, #28]
 800ac60:	2b47      	cmp	r3, #71	; 0x47
 800ac62:	4680      	mov	r8, r0
 800ac64:	d108      	bne.n	800ac78 <_printf_float+0x110>
 800ac66:	1cc8      	adds	r0, r1, #3
 800ac68:	db02      	blt.n	800ac70 <_printf_float+0x108>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	dd41      	ble.n	800acf4 <_printf_float+0x18c>
 800ac70:	f1a9 0902 	sub.w	r9, r9, #2
 800ac74:	fa5f f989 	uxtb.w	r9, r9
 800ac78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac7c:	d820      	bhi.n	800acc0 <_printf_float+0x158>
 800ac7e:	3901      	subs	r1, #1
 800ac80:	464a      	mov	r2, r9
 800ac82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac86:	9107      	str	r1, [sp, #28]
 800ac88:	f7ff ff30 	bl	800aaec <__exponent>
 800ac8c:	9a08      	ldr	r2, [sp, #32]
 800ac8e:	9004      	str	r0, [sp, #16]
 800ac90:	1813      	adds	r3, r2, r0
 800ac92:	2a01      	cmp	r2, #1
 800ac94:	6123      	str	r3, [r4, #16]
 800ac96:	dc02      	bgt.n	800ac9e <_printf_float+0x136>
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	07d2      	lsls	r2, r2, #31
 800ac9c:	d501      	bpl.n	800aca2 <_printf_float+0x13a>
 800ac9e:	3301      	adds	r3, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0a2      	beq.n	800abf0 <_printf_float+0x88>
 800acaa:	232d      	movs	r3, #45	; 0x2d
 800acac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb0:	e79e      	b.n	800abf0 <_printf_float+0x88>
 800acb2:	9904      	ldr	r1, [sp, #16]
 800acb4:	2947      	cmp	r1, #71	; 0x47
 800acb6:	d1c1      	bne.n	800ac3c <_printf_float+0xd4>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1bf      	bne.n	800ac3c <_printf_float+0xd4>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e7bc      	b.n	800ac3a <_printf_float+0xd2>
 800acc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800acc4:	d118      	bne.n	800acf8 <_printf_float+0x190>
 800acc6:	2900      	cmp	r1, #0
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	dd0b      	ble.n	800ace4 <_printf_float+0x17c>
 800accc:	6121      	str	r1, [r4, #16]
 800acce:	b913      	cbnz	r3, 800acd6 <_printf_float+0x16e>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	07d0      	lsls	r0, r2, #31
 800acd4:	d502      	bpl.n	800acdc <_printf_float+0x174>
 800acd6:	3301      	adds	r3, #1
 800acd8:	440b      	add	r3, r1
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2300      	movs	r3, #0
 800acde:	65a1      	str	r1, [r4, #88]	; 0x58
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	e7de      	b.n	800aca2 <_printf_float+0x13a>
 800ace4:	b913      	cbnz	r3, 800acec <_printf_float+0x184>
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	07d2      	lsls	r2, r2, #31
 800acea:	d501      	bpl.n	800acf0 <_printf_float+0x188>
 800acec:	3302      	adds	r3, #2
 800acee:	e7f4      	b.n	800acda <_printf_float+0x172>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e7f2      	b.n	800acda <_printf_float+0x172>
 800acf4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	db05      	blt.n	800ad0a <_printf_float+0x1a2>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	6121      	str	r1, [r4, #16]
 800ad02:	07d8      	lsls	r0, r3, #31
 800ad04:	d5ea      	bpl.n	800acdc <_printf_float+0x174>
 800ad06:	1c4b      	adds	r3, r1, #1
 800ad08:	e7e7      	b.n	800acda <_printf_float+0x172>
 800ad0a:	2900      	cmp	r1, #0
 800ad0c:	bfd4      	ite	le
 800ad0e:	f1c1 0202 	rsble	r2, r1, #2
 800ad12:	2201      	movgt	r2, #1
 800ad14:	4413      	add	r3, r2
 800ad16:	e7e0      	b.n	800acda <_printf_float+0x172>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	055a      	lsls	r2, r3, #21
 800ad1c:	d407      	bmi.n	800ad2e <_printf_float+0x1c6>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	4642      	mov	r2, r8
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d12a      	bne.n	800ad82 <_printf_float+0x21a>
 800ad2c:	e76a      	b.n	800ac04 <_printf_float+0x9c>
 800ad2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad32:	f240 80e2 	bls.w	800aefa <_printf_float+0x392>
 800ad36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ad3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad42:	d133      	bne.n	800adac <_printf_float+0x244>
 800ad44:	4a38      	ldr	r2, [pc, #224]	; (800ae28 <_printf_float+0x2c0>)
 800ad46:	2301      	movs	r3, #1
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af58 	beq.w	800ac04 <_printf_float+0x9c>
 800ad54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	db02      	blt.n	800ad62 <_printf_float+0x1fa>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07d8      	lsls	r0, r3, #31
 800ad60:	d50f      	bpl.n	800ad82 <_printf_float+0x21a>
 800ad62:	4653      	mov	r3, sl
 800ad64:	465a      	mov	r2, fp
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f af49 	beq.w	800ac04 <_printf_float+0x9c>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	f104 091a 	add.w	r9, r4, #26
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	4543      	cmp	r3, r8
 800ad80:	dc09      	bgt.n	800ad96 <_printf_float+0x22e>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	079b      	lsls	r3, r3, #30
 800ad86:	f100 8108 	bmi.w	800af9a <_printf_float+0x432>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	bfb8      	it	lt
 800ad92:	4618      	movlt	r0, r3
 800ad94:	e738      	b.n	800ac08 <_printf_float+0xa0>
 800ad96:	2301      	movs	r3, #1
 800ad98:	464a      	mov	r2, r9
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f af2f 	beq.w	800ac04 <_printf_float+0x9c>
 800ada6:	f108 0801 	add.w	r8, r8, #1
 800adaa:	e7e6      	b.n	800ad7a <_printf_float+0x212>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc3c      	bgt.n	800ae2c <_printf_float+0x2c4>
 800adb2:	4a1d      	ldr	r2, [pc, #116]	; (800ae28 <_printf_float+0x2c0>)
 800adb4:	2301      	movs	r3, #1
 800adb6:	4631      	mov	r1, r6
 800adb8:	4628      	mov	r0, r5
 800adba:	47b8      	blx	r7
 800adbc:	3001      	adds	r0, #1
 800adbe:	f43f af21 	beq.w	800ac04 <_printf_float+0x9c>
 800adc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	d102      	bne.n	800add0 <_printf_float+0x268>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	07d9      	lsls	r1, r3, #31
 800adce:	d5d8      	bpl.n	800ad82 <_printf_float+0x21a>
 800add0:	4653      	mov	r3, sl
 800add2:	465a      	mov	r2, fp
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af12 	beq.w	800ac04 <_printf_float+0x9c>
 800ade0:	f04f 0900 	mov.w	r9, #0
 800ade4:	f104 0a1a 	add.w	sl, r4, #26
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	425b      	negs	r3, r3
 800adec:	454b      	cmp	r3, r9
 800adee:	dc01      	bgt.n	800adf4 <_printf_float+0x28c>
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	e795      	b.n	800ad20 <_printf_float+0x1b8>
 800adf4:	2301      	movs	r3, #1
 800adf6:	4652      	mov	r2, sl
 800adf8:	4631      	mov	r1, r6
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f af00 	beq.w	800ac04 <_printf_float+0x9c>
 800ae04:	f109 0901 	add.w	r9, r9, #1
 800ae08:	e7ee      	b.n	800ade8 <_printf_float+0x280>
 800ae0a:	bf00      	nop
 800ae0c:	f3af 8000 	nop.w
 800ae10:	ffffffff 	.word	0xffffffff
 800ae14:	7fefffff 	.word	0x7fefffff
 800ae18:	0800ef2c 	.word	0x0800ef2c
 800ae1c:	0800ef30 	.word	0x0800ef30
 800ae20:	0800ef38 	.word	0x0800ef38
 800ae24:	0800ef34 	.word	0x0800ef34
 800ae28:	0800ef3c 	.word	0x0800ef3c
 800ae2c:	9a08      	ldr	r2, [sp, #32]
 800ae2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae30:	429a      	cmp	r2, r3
 800ae32:	bfa8      	it	ge
 800ae34:	461a      	movge	r2, r3
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	4691      	mov	r9, r2
 800ae3a:	dc38      	bgt.n	800aeae <_printf_float+0x346>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae44:	f104 021a 	add.w	r2, r4, #26
 800ae48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae4a:	9905      	ldr	r1, [sp, #20]
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	eba3 0309 	sub.w	r3, r3, r9
 800ae52:	428b      	cmp	r3, r1
 800ae54:	dc33      	bgt.n	800aebe <_printf_float+0x356>
 800ae56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	db3c      	blt.n	800aed8 <_printf_float+0x370>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	07da      	lsls	r2, r3, #31
 800ae62:	d439      	bmi.n	800aed8 <_printf_float+0x370>
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	9a04      	ldr	r2, [sp, #16]
 800ae68:	9907      	ldr	r1, [sp, #28]
 800ae6a:	1a9a      	subs	r2, r3, r2
 800ae6c:	eba3 0901 	sub.w	r9, r3, r1
 800ae70:	4591      	cmp	r9, r2
 800ae72:	bfa8      	it	ge
 800ae74:	4691      	movge	r9, r2
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	dc35      	bgt.n	800aee8 <_printf_float+0x380>
 800ae7c:	f04f 0800 	mov.w	r8, #0
 800ae80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae84:	f104 0a1a 	add.w	sl, r4, #26
 800ae88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	eba3 0309 	sub.w	r3, r3, r9
 800ae92:	4543      	cmp	r3, r8
 800ae94:	f77f af75 	ble.w	800ad82 <_printf_float+0x21a>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f aeae 	beq.w	800ac04 <_printf_float+0x9c>
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	e7ec      	b.n	800ae88 <_printf_float+0x320>
 800aeae:	4613      	mov	r3, r2
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4642      	mov	r2, r8
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d1bf      	bne.n	800ae3c <_printf_float+0x2d4>
 800aebc:	e6a2      	b.n	800ac04 <_printf_float+0x9c>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	9204      	str	r2, [sp, #16]
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f ae9b 	beq.w	800ac04 <_printf_float+0x9c>
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	3301      	adds	r3, #1
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	e7b7      	b.n	800ae48 <_printf_float+0x2e0>
 800aed8:	4653      	mov	r3, sl
 800aeda:	465a      	mov	r2, fp
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	d1be      	bne.n	800ae64 <_printf_float+0x2fc>
 800aee6:	e68d      	b.n	800ac04 <_printf_float+0x9c>
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	464b      	mov	r3, r9
 800aeec:	4442      	add	r2, r8
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	d1c1      	bne.n	800ae7c <_printf_float+0x314>
 800aef8:	e684      	b.n	800ac04 <_printf_float+0x9c>
 800aefa:	9a08      	ldr	r2, [sp, #32]
 800aefc:	2a01      	cmp	r2, #1
 800aefe:	dc01      	bgt.n	800af04 <_printf_float+0x39c>
 800af00:	07db      	lsls	r3, r3, #31
 800af02:	d537      	bpl.n	800af74 <_printf_float+0x40c>
 800af04:	2301      	movs	r3, #1
 800af06:	4642      	mov	r2, r8
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f ae78 	beq.w	800ac04 <_printf_float+0x9c>
 800af14:	4653      	mov	r3, sl
 800af16:	465a      	mov	r2, fp
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f ae70 	beq.w	800ac04 <_printf_float+0x9c>
 800af24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800af28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af30:	d01b      	beq.n	800af6a <_printf_float+0x402>
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	f108 0201 	add.w	r2, r8, #1
 800af38:	3b01      	subs	r3, #1
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	d10e      	bne.n	800af62 <_printf_float+0x3fa>
 800af44:	e65e      	b.n	800ac04 <_printf_float+0x9c>
 800af46:	2301      	movs	r3, #1
 800af48:	464a      	mov	r2, r9
 800af4a:	4631      	mov	r1, r6
 800af4c:	4628      	mov	r0, r5
 800af4e:	47b8      	blx	r7
 800af50:	3001      	adds	r0, #1
 800af52:	f43f ae57 	beq.w	800ac04 <_printf_float+0x9c>
 800af56:	f108 0801 	add.w	r8, r8, #1
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	4543      	cmp	r3, r8
 800af60:	dcf1      	bgt.n	800af46 <_printf_float+0x3de>
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af68:	e6db      	b.n	800ad22 <_printf_float+0x1ba>
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	f104 091a 	add.w	r9, r4, #26
 800af72:	e7f2      	b.n	800af5a <_printf_float+0x3f2>
 800af74:	2301      	movs	r3, #1
 800af76:	4642      	mov	r2, r8
 800af78:	e7df      	b.n	800af3a <_printf_float+0x3d2>
 800af7a:	2301      	movs	r3, #1
 800af7c:	464a      	mov	r2, r9
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f ae3d 	beq.w	800ac04 <_printf_float+0x9c>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	4543      	cmp	r3, r8
 800af96:	dcf0      	bgt.n	800af7a <_printf_float+0x412>
 800af98:	e6f7      	b.n	800ad8a <_printf_float+0x222>
 800af9a:	f04f 0800 	mov.w	r8, #0
 800af9e:	f104 0919 	add.w	r9, r4, #25
 800afa2:	e7f4      	b.n	800af8e <_printf_float+0x426>

0800afa4 <_printf_common>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	4616      	mov	r6, r2
 800afaa:	4699      	mov	r9, r3
 800afac:	688a      	ldr	r2, [r1, #8]
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bfb8      	it	lt
 800afb8:	4613      	movlt	r3, r2
 800afba:	6033      	str	r3, [r6, #0]
 800afbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afc0:	4607      	mov	r7, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b10a      	cbz	r2, 800afca <_printf_common+0x26>
 800afc6:	3301      	adds	r3, #1
 800afc8:	6033      	str	r3, [r6, #0]
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	0699      	lsls	r1, r3, #26
 800afce:	bf42      	ittt	mi
 800afd0:	6833      	ldrmi	r3, [r6, #0]
 800afd2:	3302      	addmi	r3, #2
 800afd4:	6033      	strmi	r3, [r6, #0]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	f015 0506 	ands.w	r5, r5, #6
 800afdc:	d106      	bne.n	800afec <_printf_common+0x48>
 800afde:	f104 0a19 	add.w	sl, r4, #25
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	6832      	ldr	r2, [r6, #0]
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dc26      	bgt.n	800b03a <_printf_common+0x96>
 800afec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aff0:	1e13      	subs	r3, r2, #0
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	bf18      	it	ne
 800aff6:	2301      	movne	r3, #1
 800aff8:	0692      	lsls	r2, r2, #26
 800affa:	d42b      	bmi.n	800b054 <_printf_common+0xb0>
 800affc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b000:	4649      	mov	r1, r9
 800b002:	4638      	mov	r0, r7
 800b004:	47c0      	blx	r8
 800b006:	3001      	adds	r0, #1
 800b008:	d01e      	beq.n	800b048 <_printf_common+0xa4>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	68e5      	ldr	r5, [r4, #12]
 800b00e:	6832      	ldr	r2, [r6, #0]
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf08      	it	eq
 800b018:	1aad      	subeq	r5, r5, r2
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	bf0c      	ite	eq
 800b020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b024:	2500      	movne	r5, #0
 800b026:	4293      	cmp	r3, r2
 800b028:	bfc4      	itt	gt
 800b02a:	1a9b      	subgt	r3, r3, r2
 800b02c:	18ed      	addgt	r5, r5, r3
 800b02e:	2600      	movs	r6, #0
 800b030:	341a      	adds	r4, #26
 800b032:	42b5      	cmp	r5, r6
 800b034:	d11a      	bne.n	800b06c <_printf_common+0xc8>
 800b036:	2000      	movs	r0, #0
 800b038:	e008      	b.n	800b04c <_printf_common+0xa8>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4652      	mov	r2, sl
 800b03e:	4649      	mov	r1, r9
 800b040:	4638      	mov	r0, r7
 800b042:	47c0      	blx	r8
 800b044:	3001      	adds	r0, #1
 800b046:	d103      	bne.n	800b050 <_printf_common+0xac>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	3501      	adds	r5, #1
 800b052:	e7c6      	b.n	800afe2 <_printf_common+0x3e>
 800b054:	18e1      	adds	r1, r4, r3
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	2030      	movs	r0, #48	; 0x30
 800b05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b05e:	4422      	add	r2, r4
 800b060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b068:	3302      	adds	r3, #2
 800b06a:	e7c7      	b.n	800affc <_printf_common+0x58>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4622      	mov	r2, r4
 800b070:	4649      	mov	r1, r9
 800b072:	4638      	mov	r0, r7
 800b074:	47c0      	blx	r8
 800b076:	3001      	adds	r0, #1
 800b078:	d0e6      	beq.n	800b048 <_printf_common+0xa4>
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7d9      	b.n	800b032 <_printf_common+0x8e>
	...

0800b080 <_printf_i>:
 800b080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	7e0f      	ldrb	r7, [r1, #24]
 800b086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b088:	2f78      	cmp	r7, #120	; 0x78
 800b08a:	4691      	mov	r9, r2
 800b08c:	4680      	mov	r8, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	469a      	mov	sl, r3
 800b092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b096:	d807      	bhi.n	800b0a8 <_printf_i+0x28>
 800b098:	2f62      	cmp	r7, #98	; 0x62
 800b09a:	d80a      	bhi.n	800b0b2 <_printf_i+0x32>
 800b09c:	2f00      	cmp	r7, #0
 800b09e:	f000 80d8 	beq.w	800b252 <_printf_i+0x1d2>
 800b0a2:	2f58      	cmp	r7, #88	; 0x58
 800b0a4:	f000 80a3 	beq.w	800b1ee <_printf_i+0x16e>
 800b0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0b0:	e03a      	b.n	800b128 <_printf_i+0xa8>
 800b0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0b6:	2b15      	cmp	r3, #21
 800b0b8:	d8f6      	bhi.n	800b0a8 <_printf_i+0x28>
 800b0ba:	a101      	add	r1, pc, #4	; (adr r1, 800b0c0 <_printf_i+0x40>)
 800b0bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0c0:	0800b119 	.word	0x0800b119
 800b0c4:	0800b12d 	.word	0x0800b12d
 800b0c8:	0800b0a9 	.word	0x0800b0a9
 800b0cc:	0800b0a9 	.word	0x0800b0a9
 800b0d0:	0800b0a9 	.word	0x0800b0a9
 800b0d4:	0800b0a9 	.word	0x0800b0a9
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b0a9 	.word	0x0800b0a9
 800b0e0:	0800b0a9 	.word	0x0800b0a9
 800b0e4:	0800b0a9 	.word	0x0800b0a9
 800b0e8:	0800b0a9 	.word	0x0800b0a9
 800b0ec:	0800b239 	.word	0x0800b239
 800b0f0:	0800b15d 	.word	0x0800b15d
 800b0f4:	0800b21b 	.word	0x0800b21b
 800b0f8:	0800b0a9 	.word	0x0800b0a9
 800b0fc:	0800b0a9 	.word	0x0800b0a9
 800b100:	0800b25b 	.word	0x0800b25b
 800b104:	0800b0a9 	.word	0x0800b0a9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0a9 	.word	0x0800b0a9
 800b110:	0800b0a9 	.word	0x0800b0a9
 800b114:	0800b223 	.word	0x0800b223
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	1d1a      	adds	r2, r3, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	602a      	str	r2, [r5, #0]
 800b120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e0a3      	b.n	800b274 <_printf_i+0x1f4>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	6829      	ldr	r1, [r5, #0]
 800b130:	0606      	lsls	r6, r0, #24
 800b132:	f101 0304 	add.w	r3, r1, #4
 800b136:	d50a      	bpl.n	800b14e <_printf_i+0xce>
 800b138:	680e      	ldr	r6, [r1, #0]
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0xc8>
 800b140:	232d      	movs	r3, #45	; 0x2d
 800b142:	4276      	negs	r6, r6
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b148:	485e      	ldr	r0, [pc, #376]	; (800b2c4 <_printf_i+0x244>)
 800b14a:	230a      	movs	r3, #10
 800b14c:	e019      	b.n	800b182 <_printf_i+0x102>
 800b14e:	680e      	ldr	r6, [r1, #0]
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b156:	bf18      	it	ne
 800b158:	b236      	sxthne	r6, r6
 800b15a:	e7ef      	b.n	800b13c <_printf_i+0xbc>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	6820      	ldr	r0, [r4, #0]
 800b160:	1d19      	adds	r1, r3, #4
 800b162:	6029      	str	r1, [r5, #0]
 800b164:	0601      	lsls	r1, r0, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xec>
 800b168:	681e      	ldr	r6, [r3, #0]
 800b16a:	e002      	b.n	800b172 <_printf_i+0xf2>
 800b16c:	0646      	lsls	r6, r0, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xe8>
 800b170:	881e      	ldrh	r6, [r3, #0]
 800b172:	4854      	ldr	r0, [pc, #336]	; (800b2c4 <_printf_i+0x244>)
 800b174:	2f6f      	cmp	r7, #111	; 0x6f
 800b176:	bf0c      	ite	eq
 800b178:	2308      	moveq	r3, #8
 800b17a:	230a      	movne	r3, #10
 800b17c:	2100      	movs	r1, #0
 800b17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b182:	6865      	ldr	r5, [r4, #4]
 800b184:	60a5      	str	r5, [r4, #8]
 800b186:	2d00      	cmp	r5, #0
 800b188:	bfa2      	ittt	ge
 800b18a:	6821      	ldrge	r1, [r4, #0]
 800b18c:	f021 0104 	bicge.w	r1, r1, #4
 800b190:	6021      	strge	r1, [r4, #0]
 800b192:	b90e      	cbnz	r6, 800b198 <_printf_i+0x118>
 800b194:	2d00      	cmp	r5, #0
 800b196:	d04d      	beq.n	800b234 <_printf_i+0x1b4>
 800b198:	4615      	mov	r5, r2
 800b19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b19e:	fb03 6711 	mls	r7, r3, r1, r6
 800b1a2:	5dc7      	ldrb	r7, [r0, r7]
 800b1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1a8:	4637      	mov	r7, r6
 800b1aa:	42bb      	cmp	r3, r7
 800b1ac:	460e      	mov	r6, r1
 800b1ae:	d9f4      	bls.n	800b19a <_printf_i+0x11a>
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d10b      	bne.n	800b1cc <_printf_i+0x14c>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07de      	lsls	r6, r3, #31
 800b1b8:	d508      	bpl.n	800b1cc <_printf_i+0x14c>
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	6861      	ldr	r1, [r4, #4]
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	bfde      	ittt	le
 800b1c2:	2330      	movle	r3, #48	; 0x30
 800b1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1cc:	1b52      	subs	r2, r2, r5
 800b1ce:	6122      	str	r2, [r4, #16]
 800b1d0:	f8cd a000 	str.w	sl, [sp]
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	aa03      	add	r2, sp, #12
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f7ff fee2 	bl	800afa4 <_printf_common>
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d14c      	bne.n	800b27e <_printf_i+0x1fe>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	b004      	add	sp, #16
 800b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ee:	4835      	ldr	r0, [pc, #212]	; (800b2c4 <_printf_i+0x244>)
 800b1f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1f4:	6829      	ldr	r1, [r5, #0]
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1fc:	6029      	str	r1, [r5, #0]
 800b1fe:	061d      	lsls	r5, r3, #24
 800b200:	d514      	bpl.n	800b22c <_printf_i+0x1ac>
 800b202:	07df      	lsls	r7, r3, #31
 800b204:	bf44      	itt	mi
 800b206:	f043 0320 	orrmi.w	r3, r3, #32
 800b20a:	6023      	strmi	r3, [r4, #0]
 800b20c:	b91e      	cbnz	r6, 800b216 <_printf_i+0x196>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f023 0320 	bic.w	r3, r3, #32
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	2310      	movs	r3, #16
 800b218:	e7b0      	b.n	800b17c <_printf_i+0xfc>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	2378      	movs	r3, #120	; 0x78
 800b224:	4828      	ldr	r0, [pc, #160]	; (800b2c8 <_printf_i+0x248>)
 800b226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b22a:	e7e3      	b.n	800b1f4 <_printf_i+0x174>
 800b22c:	0659      	lsls	r1, r3, #25
 800b22e:	bf48      	it	mi
 800b230:	b2b6      	uxthmi	r6, r6
 800b232:	e7e6      	b.n	800b202 <_printf_i+0x182>
 800b234:	4615      	mov	r5, r2
 800b236:	e7bb      	b.n	800b1b0 <_printf_i+0x130>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	6826      	ldr	r6, [r4, #0]
 800b23c:	6961      	ldr	r1, [r4, #20]
 800b23e:	1d18      	adds	r0, r3, #4
 800b240:	6028      	str	r0, [r5, #0]
 800b242:	0635      	lsls	r5, r6, #24
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	d501      	bpl.n	800b24c <_printf_i+0x1cc>
 800b248:	6019      	str	r1, [r3, #0]
 800b24a:	e002      	b.n	800b252 <_printf_i+0x1d2>
 800b24c:	0670      	lsls	r0, r6, #25
 800b24e:	d5fb      	bpl.n	800b248 <_printf_i+0x1c8>
 800b250:	8019      	strh	r1, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	4615      	mov	r5, r2
 800b258:	e7ba      	b.n	800b1d0 <_printf_i+0x150>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	602a      	str	r2, [r5, #0]
 800b260:	681d      	ldr	r5, [r3, #0]
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	2100      	movs	r1, #0
 800b266:	4628      	mov	r0, r5
 800b268:	f7f5 f842 	bl	80002f0 <memchr>
 800b26c:	b108      	cbz	r0, 800b272 <_printf_i+0x1f2>
 800b26e:	1b40      	subs	r0, r0, r5
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	2300      	movs	r3, #0
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	e7a8      	b.n	800b1d0 <_printf_i+0x150>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	462a      	mov	r2, r5
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	47d0      	blx	sl
 800b288:	3001      	adds	r0, #1
 800b28a:	d0ab      	beq.n	800b1e4 <_printf_i+0x164>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	079b      	lsls	r3, r3, #30
 800b290:	d413      	bmi.n	800b2ba <_printf_i+0x23a>
 800b292:	68e0      	ldr	r0, [r4, #12]
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	4298      	cmp	r0, r3
 800b298:	bfb8      	it	lt
 800b29a:	4618      	movlt	r0, r3
 800b29c:	e7a4      	b.n	800b1e8 <_printf_i+0x168>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	47d0      	blx	sl
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d09b      	beq.n	800b1e4 <_printf_i+0x164>
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	68e3      	ldr	r3, [r4, #12]
 800b2b0:	9903      	ldr	r1, [sp, #12]
 800b2b2:	1a5b      	subs	r3, r3, r1
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	dcf2      	bgt.n	800b29e <_printf_i+0x21e>
 800b2b8:	e7eb      	b.n	800b292 <_printf_i+0x212>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	f104 0619 	add.w	r6, r4, #25
 800b2c0:	e7f5      	b.n	800b2ae <_printf_i+0x22e>
 800b2c2:	bf00      	nop
 800b2c4:	0800ef3e 	.word	0x0800ef3e
 800b2c8:	0800ef4f 	.word	0x0800ef4f

0800b2cc <iprintf>:
 800b2cc:	b40f      	push	{r0, r1, r2, r3}
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <iprintf+0x2c>)
 800b2d0:	b513      	push	{r0, r1, r4, lr}
 800b2d2:	681c      	ldr	r4, [r3, #0]
 800b2d4:	b124      	cbz	r4, 800b2e0 <iprintf+0x14>
 800b2d6:	69a3      	ldr	r3, [r4, #24]
 800b2d8:	b913      	cbnz	r3, 800b2e0 <iprintf+0x14>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f001 f858 	bl	800c390 <__sinit>
 800b2e0:	ab05      	add	r3, sp, #20
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	68a1      	ldr	r1, [r4, #8]
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f001 fe15 	bl	800cf18 <_vfiprintf_r>
 800b2ee:	b002      	add	sp, #8
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	b004      	add	sp, #16
 800b2f6:	4770      	bx	lr
 800b2f8:	24000034 	.word	0x24000034

0800b2fc <_puts_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	460e      	mov	r6, r1
 800b300:	4605      	mov	r5, r0
 800b302:	b118      	cbz	r0, 800b30c <_puts_r+0x10>
 800b304:	6983      	ldr	r3, [r0, #24]
 800b306:	b90b      	cbnz	r3, 800b30c <_puts_r+0x10>
 800b308:	f001 f842 	bl	800c390 <__sinit>
 800b30c:	69ab      	ldr	r3, [r5, #24]
 800b30e:	68ac      	ldr	r4, [r5, #8]
 800b310:	b913      	cbnz	r3, 800b318 <_puts_r+0x1c>
 800b312:	4628      	mov	r0, r5
 800b314:	f001 f83c 	bl	800c390 <__sinit>
 800b318:	4b2c      	ldr	r3, [pc, #176]	; (800b3cc <_puts_r+0xd0>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d120      	bne.n	800b360 <_puts_r+0x64>
 800b31e:	686c      	ldr	r4, [r5, #4]
 800b320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b322:	07db      	lsls	r3, r3, #31
 800b324:	d405      	bmi.n	800b332 <_puts_r+0x36>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	0598      	lsls	r0, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_puts_r+0x36>
 800b32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b32e:	f001 f8d2 	bl	800c4d6 <__retarget_lock_acquire_recursive>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	0719      	lsls	r1, r3, #28
 800b336:	d51d      	bpl.n	800b374 <_puts_r+0x78>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	b1db      	cbz	r3, 800b374 <_puts_r+0x78>
 800b33c:	3e01      	subs	r6, #1
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b344:	3b01      	subs	r3, #1
 800b346:	60a3      	str	r3, [r4, #8]
 800b348:	bb39      	cbnz	r1, 800b39a <_puts_r+0x9e>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	da38      	bge.n	800b3c0 <_puts_r+0xc4>
 800b34e:	4622      	mov	r2, r4
 800b350:	210a      	movs	r1, #10
 800b352:	4628      	mov	r0, r5
 800b354:	f000 f848 	bl	800b3e8 <__swbuf_r>
 800b358:	3001      	adds	r0, #1
 800b35a:	d011      	beq.n	800b380 <_puts_r+0x84>
 800b35c:	250a      	movs	r5, #10
 800b35e:	e011      	b.n	800b384 <_puts_r+0x88>
 800b360:	4b1b      	ldr	r3, [pc, #108]	; (800b3d0 <_puts_r+0xd4>)
 800b362:	429c      	cmp	r4, r3
 800b364:	d101      	bne.n	800b36a <_puts_r+0x6e>
 800b366:	68ac      	ldr	r4, [r5, #8]
 800b368:	e7da      	b.n	800b320 <_puts_r+0x24>
 800b36a:	4b1a      	ldr	r3, [pc, #104]	; (800b3d4 <_puts_r+0xd8>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	bf08      	it	eq
 800b370:	68ec      	ldreq	r4, [r5, #12]
 800b372:	e7d5      	b.n	800b320 <_puts_r+0x24>
 800b374:	4621      	mov	r1, r4
 800b376:	4628      	mov	r0, r5
 800b378:	f000 f888 	bl	800b48c <__swsetup_r>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d0dd      	beq.n	800b33c <_puts_r+0x40>
 800b380:	f04f 35ff 	mov.w	r5, #4294967295
 800b384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b386:	07da      	lsls	r2, r3, #31
 800b388:	d405      	bmi.n	800b396 <_puts_r+0x9a>
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	059b      	lsls	r3, r3, #22
 800b38e:	d402      	bmi.n	800b396 <_puts_r+0x9a>
 800b390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b392:	f001 f8a1 	bl	800c4d8 <__retarget_lock_release_recursive>
 800b396:	4628      	mov	r0, r5
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	da04      	bge.n	800b3a8 <_puts_r+0xac>
 800b39e:	69a2      	ldr	r2, [r4, #24]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	dc06      	bgt.n	800b3b2 <_puts_r+0xb6>
 800b3a4:	290a      	cmp	r1, #10
 800b3a6:	d004      	beq.n	800b3b2 <_puts_r+0xb6>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	7019      	strb	r1, [r3, #0]
 800b3b0:	e7c5      	b.n	800b33e <_puts_r+0x42>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 f817 	bl	800b3e8 <__swbuf_r>
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d1bf      	bne.n	800b33e <_puts_r+0x42>
 800b3be:	e7df      	b.n	800b380 <_puts_r+0x84>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	250a      	movs	r5, #10
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	701d      	strb	r5, [r3, #0]
 800b3ca:	e7db      	b.n	800b384 <_puts_r+0x88>
 800b3cc:	0800f010 	.word	0x0800f010
 800b3d0:	0800f030 	.word	0x0800f030
 800b3d4:	0800eff0 	.word	0x0800eff0

0800b3d8 <puts>:
 800b3d8:	4b02      	ldr	r3, [pc, #8]	; (800b3e4 <puts+0xc>)
 800b3da:	4601      	mov	r1, r0
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f7ff bf8d 	b.w	800b2fc <_puts_r>
 800b3e2:	bf00      	nop
 800b3e4:	24000034 	.word	0x24000034

0800b3e8 <__swbuf_r>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	b118      	cbz	r0, 800b3fa <__swbuf_r+0x12>
 800b3f2:	6983      	ldr	r3, [r0, #24]
 800b3f4:	b90b      	cbnz	r3, 800b3fa <__swbuf_r+0x12>
 800b3f6:	f000 ffcb 	bl	800c390 <__sinit>
 800b3fa:	4b21      	ldr	r3, [pc, #132]	; (800b480 <__swbuf_r+0x98>)
 800b3fc:	429c      	cmp	r4, r3
 800b3fe:	d12b      	bne.n	800b458 <__swbuf_r+0x70>
 800b400:	686c      	ldr	r4, [r5, #4]
 800b402:	69a3      	ldr	r3, [r4, #24]
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	071a      	lsls	r2, r3, #28
 800b40a:	d52f      	bpl.n	800b46c <__swbuf_r+0x84>
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	b36b      	cbz	r3, 800b46c <__swbuf_r+0x84>
 800b410:	6923      	ldr	r3, [r4, #16]
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	1ac0      	subs	r0, r0, r3
 800b416:	6963      	ldr	r3, [r4, #20]
 800b418:	b2f6      	uxtb	r6, r6
 800b41a:	4283      	cmp	r3, r0
 800b41c:	4637      	mov	r7, r6
 800b41e:	dc04      	bgt.n	800b42a <__swbuf_r+0x42>
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f000 ff20 	bl	800c268 <_fflush_r>
 800b428:	bb30      	cbnz	r0, 800b478 <__swbuf_r+0x90>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	60a3      	str	r3, [r4, #8]
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	701e      	strb	r6, [r3, #0]
 800b438:	6963      	ldr	r3, [r4, #20]
 800b43a:	3001      	adds	r0, #1
 800b43c:	4283      	cmp	r3, r0
 800b43e:	d004      	beq.n	800b44a <__swbuf_r+0x62>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	07db      	lsls	r3, r3, #31
 800b444:	d506      	bpl.n	800b454 <__swbuf_r+0x6c>
 800b446:	2e0a      	cmp	r6, #10
 800b448:	d104      	bne.n	800b454 <__swbuf_r+0x6c>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f000 ff0b 	bl	800c268 <_fflush_r>
 800b452:	b988      	cbnz	r0, 800b478 <__swbuf_r+0x90>
 800b454:	4638      	mov	r0, r7
 800b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <__swbuf_r+0x9c>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swbuf_r+0x7a>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7cf      	b.n	800b402 <__swbuf_r+0x1a>
 800b462:	4b09      	ldr	r3, [pc, #36]	; (800b488 <__swbuf_r+0xa0>)
 800b464:	429c      	cmp	r4, r3
 800b466:	bf08      	it	eq
 800b468:	68ec      	ldreq	r4, [r5, #12]
 800b46a:	e7ca      	b.n	800b402 <__swbuf_r+0x1a>
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f80c 	bl	800b48c <__swsetup_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	d0cb      	beq.n	800b410 <__swbuf_r+0x28>
 800b478:	f04f 37ff 	mov.w	r7, #4294967295
 800b47c:	e7ea      	b.n	800b454 <__swbuf_r+0x6c>
 800b47e:	bf00      	nop
 800b480:	0800f010 	.word	0x0800f010
 800b484:	0800f030 	.word	0x0800f030
 800b488:	0800eff0 	.word	0x0800eff0

0800b48c <__swsetup_r>:
 800b48c:	4b32      	ldr	r3, [pc, #200]	; (800b558 <__swsetup_r+0xcc>)
 800b48e:	b570      	push	{r4, r5, r6, lr}
 800b490:	681d      	ldr	r5, [r3, #0]
 800b492:	4606      	mov	r6, r0
 800b494:	460c      	mov	r4, r1
 800b496:	b125      	cbz	r5, 800b4a2 <__swsetup_r+0x16>
 800b498:	69ab      	ldr	r3, [r5, #24]
 800b49a:	b913      	cbnz	r3, 800b4a2 <__swsetup_r+0x16>
 800b49c:	4628      	mov	r0, r5
 800b49e:	f000 ff77 	bl	800c390 <__sinit>
 800b4a2:	4b2e      	ldr	r3, [pc, #184]	; (800b55c <__swsetup_r+0xd0>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	d10f      	bne.n	800b4c8 <__swsetup_r+0x3c>
 800b4a8:	686c      	ldr	r4, [r5, #4]
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4b0:	0719      	lsls	r1, r3, #28
 800b4b2:	d42c      	bmi.n	800b50e <__swsetup_r+0x82>
 800b4b4:	06dd      	lsls	r5, r3, #27
 800b4b6:	d411      	bmi.n	800b4dc <__swsetup_r+0x50>
 800b4b8:	2309      	movs	r3, #9
 800b4ba:	6033      	str	r3, [r6, #0]
 800b4bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c6:	e03e      	b.n	800b546 <__swsetup_r+0xba>
 800b4c8:	4b25      	ldr	r3, [pc, #148]	; (800b560 <__swsetup_r+0xd4>)
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	d101      	bne.n	800b4d2 <__swsetup_r+0x46>
 800b4ce:	68ac      	ldr	r4, [r5, #8]
 800b4d0:	e7eb      	b.n	800b4aa <__swsetup_r+0x1e>
 800b4d2:	4b24      	ldr	r3, [pc, #144]	; (800b564 <__swsetup_r+0xd8>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	bf08      	it	eq
 800b4d8:	68ec      	ldreq	r4, [r5, #12]
 800b4da:	e7e6      	b.n	800b4aa <__swsetup_r+0x1e>
 800b4dc:	0758      	lsls	r0, r3, #29
 800b4de:	d512      	bpl.n	800b506 <__swsetup_r+0x7a>
 800b4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e2:	b141      	cbz	r1, 800b4f6 <__swsetup_r+0x6a>
 800b4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <__swsetup_r+0x66>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f001 fc09 	bl	800cd04 <_free_r>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	2300      	movs	r3, #0
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	6923      	ldr	r3, [r4, #16]
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	f043 0308 	orr.w	r3, r3, #8
 800b50c:	81a3      	strh	r3, [r4, #12]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	b94b      	cbnz	r3, 800b526 <__swsetup_r+0x9a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b51c:	d003      	beq.n	800b526 <__swsetup_r+0x9a>
 800b51e:	4621      	mov	r1, r4
 800b520:	4630      	mov	r0, r6
 800b522:	f000 ffff 	bl	800c524 <__smakebuf_r>
 800b526:	89a0      	ldrh	r0, [r4, #12]
 800b528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b52c:	f010 0301 	ands.w	r3, r0, #1
 800b530:	d00a      	beq.n	800b548 <__swsetup_r+0xbc>
 800b532:	2300      	movs	r3, #0
 800b534:	60a3      	str	r3, [r4, #8]
 800b536:	6963      	ldr	r3, [r4, #20]
 800b538:	425b      	negs	r3, r3
 800b53a:	61a3      	str	r3, [r4, #24]
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	b943      	cbnz	r3, 800b552 <__swsetup_r+0xc6>
 800b540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b544:	d1ba      	bne.n	800b4bc <__swsetup_r+0x30>
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	0781      	lsls	r1, r0, #30
 800b54a:	bf58      	it	pl
 800b54c:	6963      	ldrpl	r3, [r4, #20]
 800b54e:	60a3      	str	r3, [r4, #8]
 800b550:	e7f4      	b.n	800b53c <__swsetup_r+0xb0>
 800b552:	2000      	movs	r0, #0
 800b554:	e7f7      	b.n	800b546 <__swsetup_r+0xba>
 800b556:	bf00      	nop
 800b558:	24000034 	.word	0x24000034
 800b55c:	0800f010 	.word	0x0800f010
 800b560:	0800f030 	.word	0x0800f030
 800b564:	0800eff0 	.word	0x0800eff0

0800b568 <quorem>:
 800b568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	6903      	ldr	r3, [r0, #16]
 800b56e:	690c      	ldr	r4, [r1, #16]
 800b570:	42a3      	cmp	r3, r4
 800b572:	4607      	mov	r7, r0
 800b574:	f2c0 8081 	blt.w	800b67a <quorem+0x112>
 800b578:	3c01      	subs	r4, #1
 800b57a:	f101 0814 	add.w	r8, r1, #20
 800b57e:	f100 0514 	add.w	r5, r0, #20
 800b582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b58c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b590:	3301      	adds	r3, #1
 800b592:	429a      	cmp	r2, r3
 800b594:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b59c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5a0:	d331      	bcc.n	800b606 <quorem+0x9e>
 800b5a2:	f04f 0e00 	mov.w	lr, #0
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	46ac      	mov	ip, r5
 800b5aa:	46f2      	mov	sl, lr
 800b5ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5b0:	b293      	uxth	r3, r2
 800b5b2:	fb06 e303 	mla	r3, r6, r3, lr
 800b5b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c0:	f8dc a000 	ldr.w	sl, [ip]
 800b5c4:	0c12      	lsrs	r2, r2, #16
 800b5c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5ca:	fb06 e202 	mla	r2, r6, r2, lr
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5e4:	4581      	cmp	r9, r0
 800b5e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5ea:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5f2:	d2db      	bcs.n	800b5ac <quorem+0x44>
 800b5f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5f8:	b92b      	cbnz	r3, 800b606 <quorem+0x9e>
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	429d      	cmp	r5, r3
 800b600:	461a      	mov	r2, r3
 800b602:	d32e      	bcc.n	800b662 <quorem+0xfa>
 800b604:	613c      	str	r4, [r7, #16]
 800b606:	4638      	mov	r0, r7
 800b608:	f001 fa64 	bl	800cad4 <__mcmp>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	db24      	blt.n	800b65a <quorem+0xf2>
 800b610:	3601      	adds	r6, #1
 800b612:	4628      	mov	r0, r5
 800b614:	f04f 0c00 	mov.w	ip, #0
 800b618:	f858 2b04 	ldr.w	r2, [r8], #4
 800b61c:	f8d0 e000 	ldr.w	lr, [r0]
 800b620:	b293      	uxth	r3, r2
 800b622:	ebac 0303 	sub.w	r3, ip, r3
 800b626:	0c12      	lsrs	r2, r2, #16
 800b628:	fa13 f38e 	uxtah	r3, r3, lr
 800b62c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b634:	b29b      	uxth	r3, r3
 800b636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b63a:	45c1      	cmp	r9, r8
 800b63c:	f840 3b04 	str.w	r3, [r0], #4
 800b640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b644:	d2e8      	bcs.n	800b618 <quorem+0xb0>
 800b646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b64a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b64e:	b922      	cbnz	r2, 800b65a <quorem+0xf2>
 800b650:	3b04      	subs	r3, #4
 800b652:	429d      	cmp	r5, r3
 800b654:	461a      	mov	r2, r3
 800b656:	d30a      	bcc.n	800b66e <quorem+0x106>
 800b658:	613c      	str	r4, [r7, #16]
 800b65a:	4630      	mov	r0, r6
 800b65c:	b003      	add	sp, #12
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	3b04      	subs	r3, #4
 800b666:	2a00      	cmp	r2, #0
 800b668:	d1cc      	bne.n	800b604 <quorem+0x9c>
 800b66a:	3c01      	subs	r4, #1
 800b66c:	e7c7      	b.n	800b5fe <quorem+0x96>
 800b66e:	6812      	ldr	r2, [r2, #0]
 800b670:	3b04      	subs	r3, #4
 800b672:	2a00      	cmp	r2, #0
 800b674:	d1f0      	bne.n	800b658 <quorem+0xf0>
 800b676:	3c01      	subs	r4, #1
 800b678:	e7eb      	b.n	800b652 <quorem+0xea>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7ee      	b.n	800b65c <quorem+0xf4>
	...

0800b680 <_dtoa_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	ed2d 8b02 	vpush	{d8}
 800b688:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b68a:	b091      	sub	sp, #68	; 0x44
 800b68c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b690:	ec59 8b10 	vmov	r8, r9, d0
 800b694:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b696:	9106      	str	r1, [sp, #24]
 800b698:	4606      	mov	r6, r0
 800b69a:	9208      	str	r2, [sp, #32]
 800b69c:	930c      	str	r3, [sp, #48]	; 0x30
 800b69e:	b975      	cbnz	r5, 800b6be <_dtoa_r+0x3e>
 800b6a0:	2010      	movs	r0, #16
 800b6a2:	f000 ff7f 	bl	800c5a4 <malloc>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b6aa:	b920      	cbnz	r0, 800b6b6 <_dtoa_r+0x36>
 800b6ac:	4baa      	ldr	r3, [pc, #680]	; (800b958 <_dtoa_r+0x2d8>)
 800b6ae:	21ea      	movs	r1, #234	; 0xea
 800b6b0:	48aa      	ldr	r0, [pc, #680]	; (800b95c <_dtoa_r+0x2dc>)
 800b6b2:	f001 fdc7 	bl	800d244 <__assert_func>
 800b6b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6ba:	6005      	str	r5, [r0, #0]
 800b6bc:	60c5      	str	r5, [r0, #12]
 800b6be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b6c0:	6819      	ldr	r1, [r3, #0]
 800b6c2:	b151      	cbz	r1, 800b6da <_dtoa_r+0x5a>
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	604a      	str	r2, [r1, #4]
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4093      	lsls	r3, r2
 800b6cc:	608b      	str	r3, [r1, #8]
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 ffbe 	bl	800c650 <_Bfree>
 800b6d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	f1b9 0300 	subs.w	r3, r9, #0
 800b6de:	bfbb      	ittet	lt
 800b6e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6e4:	9303      	strlt	r3, [sp, #12]
 800b6e6:	2300      	movge	r3, #0
 800b6e8:	2201      	movlt	r2, #1
 800b6ea:	bfac      	ite	ge
 800b6ec:	6023      	strge	r3, [r4, #0]
 800b6ee:	6022      	strlt	r2, [r4, #0]
 800b6f0:	4b9b      	ldr	r3, [pc, #620]	; (800b960 <_dtoa_r+0x2e0>)
 800b6f2:	9c03      	ldr	r4, [sp, #12]
 800b6f4:	43a3      	bics	r3, r4
 800b6f6:	d11c      	bne.n	800b732 <_dtoa_r+0xb2>
 800b6f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6fe:	6013      	str	r3, [r2, #0]
 800b700:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b704:	ea53 0308 	orrs.w	r3, r3, r8
 800b708:	f000 84fd 	beq.w	800c106 <_dtoa_r+0xa86>
 800b70c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b70e:	b963      	cbnz	r3, 800b72a <_dtoa_r+0xaa>
 800b710:	4b94      	ldr	r3, [pc, #592]	; (800b964 <_dtoa_r+0x2e4>)
 800b712:	e01f      	b.n	800b754 <_dtoa_r+0xd4>
 800b714:	4b94      	ldr	r3, [pc, #592]	; (800b968 <_dtoa_r+0x2e8>)
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	3308      	adds	r3, #8
 800b71a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	9801      	ldr	r0, [sp, #4]
 800b720:	b011      	add	sp, #68	; 0x44
 800b722:	ecbd 8b02 	vpop	{d8}
 800b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72a:	4b8e      	ldr	r3, [pc, #568]	; (800b964 <_dtoa_r+0x2e4>)
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	3303      	adds	r3, #3
 800b730:	e7f3      	b.n	800b71a <_dtoa_r+0x9a>
 800b732:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b736:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73e:	d10b      	bne.n	800b758 <_dtoa_r+0xd8>
 800b740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b742:	2301      	movs	r3, #1
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f000 84d9 	beq.w	800c100 <_dtoa_r+0xa80>
 800b74e:	4887      	ldr	r0, [pc, #540]	; (800b96c <_dtoa_r+0x2ec>)
 800b750:	6018      	str	r0, [r3, #0]
 800b752:	1e43      	subs	r3, r0, #1
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	e7e2      	b.n	800b71e <_dtoa_r+0x9e>
 800b758:	a90f      	add	r1, sp, #60	; 0x3c
 800b75a:	aa0e      	add	r2, sp, #56	; 0x38
 800b75c:	4630      	mov	r0, r6
 800b75e:	eeb0 0b48 	vmov.f64	d0, d8
 800b762:	f001 fa5d 	bl	800cc20 <__d2b>
 800b766:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b76a:	4605      	mov	r5, r0
 800b76c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b76e:	2900      	cmp	r1, #0
 800b770:	d046      	beq.n	800b800 <_dtoa_r+0x180>
 800b772:	ee18 4a90 	vmov	r4, s17
 800b776:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b77a:	ec53 2b18 	vmov	r2, r3, d8
 800b77e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b782:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b786:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b78a:	2400      	movs	r4, #0
 800b78c:	ec43 2b16 	vmov	d6, r2, r3
 800b790:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b794:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b940 <_dtoa_r+0x2c0>
 800b798:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b79c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b948 <_dtoa_r+0x2c8>
 800b7a0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b7a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b950 <_dtoa_r+0x2d0>
 800b7a8:	ee07 1a90 	vmov	s15, r1
 800b7ac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b7b0:	eeb0 7b46 	vmov.f64	d7, d6
 800b7b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b7b8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b7bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c4:	ee16 ba90 	vmov	fp, s13
 800b7c8:	940a      	str	r4, [sp, #40]	; 0x28
 800b7ca:	d508      	bpl.n	800b7de <_dtoa_r+0x15e>
 800b7cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b7d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	bf18      	it	ne
 800b7da:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b7de:	f1bb 0f16 	cmp.w	fp, #22
 800b7e2:	d82f      	bhi.n	800b844 <_dtoa_r+0x1c4>
 800b7e4:	4b62      	ldr	r3, [pc, #392]	; (800b970 <_dtoa_r+0x2f0>)
 800b7e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b7ea:	ed93 7b00 	vldr	d7, [r3]
 800b7ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f6:	d501      	bpl.n	800b7fc <_dtoa_r+0x17c>
 800b7f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e022      	b.n	800b846 <_dtoa_r+0x1c6>
 800b800:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b802:	4401      	add	r1, r0
 800b804:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b808:	2b20      	cmp	r3, #32
 800b80a:	bfc1      	itttt	gt
 800b80c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b810:	fa04 f303 	lslgt.w	r3, r4, r3
 800b814:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b818:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b81c:	bfd6      	itet	le
 800b81e:	f1c3 0320 	rsble	r3, r3, #32
 800b822:	ea43 0808 	orrgt.w	r8, r3, r8
 800b826:	fa08 f803 	lslle.w	r8, r8, r3
 800b82a:	ee07 8a90 	vmov	s15, r8
 800b82e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b832:	3901      	subs	r1, #1
 800b834:	ee17 4a90 	vmov	r4, s15
 800b838:	ec53 2b17 	vmov	r2, r3, d7
 800b83c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b840:	2401      	movs	r4, #1
 800b842:	e7a3      	b.n	800b78c <_dtoa_r+0x10c>
 800b844:	2301      	movs	r3, #1
 800b846:	930b      	str	r3, [sp, #44]	; 0x2c
 800b848:	1a43      	subs	r3, r0, r1
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	bf45      	ittet	mi
 800b84e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b852:	9304      	strmi	r3, [sp, #16]
 800b854:	2300      	movpl	r3, #0
 800b856:	2300      	movmi	r3, #0
 800b858:	9205      	str	r2, [sp, #20]
 800b85a:	bf54      	ite	pl
 800b85c:	9304      	strpl	r3, [sp, #16]
 800b85e:	9305      	strmi	r3, [sp, #20]
 800b860:	f1bb 0f00 	cmp.w	fp, #0
 800b864:	db18      	blt.n	800b898 <_dtoa_r+0x218>
 800b866:	9b05      	ldr	r3, [sp, #20]
 800b868:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b86c:	445b      	add	r3, fp
 800b86e:	9305      	str	r3, [sp, #20]
 800b870:	2300      	movs	r3, #0
 800b872:	9a06      	ldr	r2, [sp, #24]
 800b874:	2a09      	cmp	r2, #9
 800b876:	d849      	bhi.n	800b90c <_dtoa_r+0x28c>
 800b878:	2a05      	cmp	r2, #5
 800b87a:	bfc4      	itt	gt
 800b87c:	3a04      	subgt	r2, #4
 800b87e:	9206      	strgt	r2, [sp, #24]
 800b880:	9a06      	ldr	r2, [sp, #24]
 800b882:	f1a2 0202 	sub.w	r2, r2, #2
 800b886:	bfcc      	ite	gt
 800b888:	2400      	movgt	r4, #0
 800b88a:	2401      	movle	r4, #1
 800b88c:	2a03      	cmp	r2, #3
 800b88e:	d848      	bhi.n	800b922 <_dtoa_r+0x2a2>
 800b890:	e8df f002 	tbb	[pc, r2]
 800b894:	3a2c2e0b 	.word	0x3a2c2e0b
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	2200      	movs	r2, #0
 800b89c:	eba3 030b 	sub.w	r3, r3, fp
 800b8a0:	9304      	str	r3, [sp, #16]
 800b8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a4:	f1cb 0300 	rsb	r3, fp, #0
 800b8a8:	e7e3      	b.n	800b872 <_dtoa_r+0x1f2>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	9207      	str	r2, [sp, #28]
 800b8ae:	9a08      	ldr	r2, [sp, #32]
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	dc39      	bgt.n	800b928 <_dtoa_r+0x2a8>
 800b8b4:	f04f 0a01 	mov.w	sl, #1
 800b8b8:	46d1      	mov	r9, sl
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	f8cd a020 	str.w	sl, [sp, #32]
 800b8c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6079      	str	r1, [r7, #4]
 800b8c6:	2004      	movs	r0, #4
 800b8c8:	f100 0c14 	add.w	ip, r0, #20
 800b8cc:	4594      	cmp	ip, r2
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	d92f      	bls.n	800b932 <_dtoa_r+0x2b2>
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	930d      	str	r3, [sp, #52]	; 0x34
 800b8d6:	f000 fe7b 	bl	800c5d0 <_Balloc>
 800b8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8dc:	9001      	str	r0, [sp, #4]
 800b8de:	4602      	mov	r2, r0
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d149      	bne.n	800b978 <_dtoa_r+0x2f8>
 800b8e4:	4b23      	ldr	r3, [pc, #140]	; (800b974 <_dtoa_r+0x2f4>)
 800b8e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8ea:	e6e1      	b.n	800b6b0 <_dtoa_r+0x30>
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	e7dd      	b.n	800b8ac <_dtoa_r+0x22c>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	9207      	str	r2, [sp, #28]
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	eb0b 0a02 	add.w	sl, fp, r2
 800b8fa:	f10a 0901 	add.w	r9, sl, #1
 800b8fe:	464a      	mov	r2, r9
 800b900:	2a01      	cmp	r2, #1
 800b902:	bfb8      	it	lt
 800b904:	2201      	movlt	r2, #1
 800b906:	e7db      	b.n	800b8c0 <_dtoa_r+0x240>
 800b908:	2201      	movs	r2, #1
 800b90a:	e7f2      	b.n	800b8f2 <_dtoa_r+0x272>
 800b90c:	2401      	movs	r4, #1
 800b90e:	2200      	movs	r2, #0
 800b910:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b914:	f04f 3aff 	mov.w	sl, #4294967295
 800b918:	2100      	movs	r1, #0
 800b91a:	46d1      	mov	r9, sl
 800b91c:	2212      	movs	r2, #18
 800b91e:	9108      	str	r1, [sp, #32]
 800b920:	e7ce      	b.n	800b8c0 <_dtoa_r+0x240>
 800b922:	2201      	movs	r2, #1
 800b924:	9207      	str	r2, [sp, #28]
 800b926:	e7f5      	b.n	800b914 <_dtoa_r+0x294>
 800b928:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b92c:	46d1      	mov	r9, sl
 800b92e:	4652      	mov	r2, sl
 800b930:	e7c6      	b.n	800b8c0 <_dtoa_r+0x240>
 800b932:	3101      	adds	r1, #1
 800b934:	6079      	str	r1, [r7, #4]
 800b936:	0040      	lsls	r0, r0, #1
 800b938:	e7c6      	b.n	800b8c8 <_dtoa_r+0x248>
 800b93a:	bf00      	nop
 800b93c:	f3af 8000 	nop.w
 800b940:	636f4361 	.word	0x636f4361
 800b944:	3fd287a7 	.word	0x3fd287a7
 800b948:	8b60c8b3 	.word	0x8b60c8b3
 800b94c:	3fc68a28 	.word	0x3fc68a28
 800b950:	509f79fb 	.word	0x509f79fb
 800b954:	3fd34413 	.word	0x3fd34413
 800b958:	0800ef6d 	.word	0x0800ef6d
 800b95c:	0800ef84 	.word	0x0800ef84
 800b960:	7ff00000 	.word	0x7ff00000
 800b964:	0800ef69 	.word	0x0800ef69
 800b968:	0800ef60 	.word	0x0800ef60
 800b96c:	0800ef3d 	.word	0x0800ef3d
 800b970:	0800f0d8 	.word	0x0800f0d8
 800b974:	0800efdf 	.word	0x0800efdf
 800b978:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b97a:	9901      	ldr	r1, [sp, #4]
 800b97c:	6011      	str	r1, [r2, #0]
 800b97e:	f1b9 0f0e 	cmp.w	r9, #14
 800b982:	d86c      	bhi.n	800ba5e <_dtoa_r+0x3de>
 800b984:	2c00      	cmp	r4, #0
 800b986:	d06a      	beq.n	800ba5e <_dtoa_r+0x3de>
 800b988:	f1bb 0f00 	cmp.w	fp, #0
 800b98c:	f340 80a0 	ble.w	800bad0 <_dtoa_r+0x450>
 800b990:	49c1      	ldr	r1, [pc, #772]	; (800bc98 <_dtoa_r+0x618>)
 800b992:	f00b 020f 	and.w	r2, fp, #15
 800b996:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b99a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b99e:	ed92 7b00 	vldr	d7, [r2]
 800b9a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b9a6:	f000 8087 	beq.w	800bab8 <_dtoa_r+0x438>
 800b9aa:	4abc      	ldr	r2, [pc, #752]	; (800bc9c <_dtoa_r+0x61c>)
 800b9ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800b9b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b9b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9b8:	f001 010f 	and.w	r1, r1, #15
 800b9bc:	2203      	movs	r2, #3
 800b9be:	48b7      	ldr	r0, [pc, #732]	; (800bc9c <_dtoa_r+0x61c>)
 800b9c0:	2900      	cmp	r1, #0
 800b9c2:	d17b      	bne.n	800babc <_dtoa_r+0x43c>
 800b9c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b9c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b9cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	f000 80a2 	beq.w	800bb1c <_dtoa_r+0x49c>
 800b9d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b9dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e8:	f140 8098 	bpl.w	800bb1c <_dtoa_r+0x49c>
 800b9ec:	f1b9 0f00 	cmp.w	r9, #0
 800b9f0:	f000 8094 	beq.w	800bb1c <_dtoa_r+0x49c>
 800b9f4:	f1ba 0f00 	cmp.w	sl, #0
 800b9f8:	dd2f      	ble.n	800ba5a <_dtoa_r+0x3da>
 800b9fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b9fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba02:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba06:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ba0a:	3201      	adds	r2, #1
 800ba0c:	4650      	mov	r0, sl
 800ba0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba12:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ba16:	ee07 2a90 	vmov	s15, r2
 800ba1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba1e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba22:	ee15 4a90 	vmov	r4, s11
 800ba26:	ec52 1b15 	vmov	r1, r2, d5
 800ba2a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d177      	bne.n	800bb22 <_dtoa_r+0x4a2>
 800ba32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba36:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ba3a:	ec42 1b17 	vmov	d7, r1, r2
 800ba3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba46:	f300 8263 	bgt.w	800bf10 <_dtoa_r+0x890>
 800ba4a:	eeb1 7b47 	vneg.f64	d7, d7
 800ba4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba56:	f100 8258 	bmi.w	800bf0a <_dtoa_r+0x88a>
 800ba5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ba5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba60:	2a00      	cmp	r2, #0
 800ba62:	f2c0 811d 	blt.w	800bca0 <_dtoa_r+0x620>
 800ba66:	f1bb 0f0e 	cmp.w	fp, #14
 800ba6a:	f300 8119 	bgt.w	800bca0 <_dtoa_r+0x620>
 800ba6e:	4b8a      	ldr	r3, [pc, #552]	; (800bc98 <_dtoa_r+0x618>)
 800ba70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba74:	ed93 6b00 	vldr	d6, [r3]
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f280 80b7 	bge.w	800bbee <_dtoa_r+0x56e>
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	f300 80b3 	bgt.w	800bbee <_dtoa_r+0x56e>
 800ba88:	f040 823f 	bne.w	800bf0a <_dtoa_r+0x88a>
 800ba8c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba90:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa0:	464c      	mov	r4, r9
 800baa2:	464f      	mov	r7, r9
 800baa4:	f280 8215 	bge.w	800bed2 <_dtoa_r+0x852>
 800baa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800baac:	2331      	movs	r3, #49	; 0x31
 800baae:	f808 3b01 	strb.w	r3, [r8], #1
 800bab2:	f10b 0b01 	add.w	fp, fp, #1
 800bab6:	e211      	b.n	800bedc <_dtoa_r+0x85c>
 800bab8:	2202      	movs	r2, #2
 800baba:	e780      	b.n	800b9be <_dtoa_r+0x33e>
 800babc:	07cc      	lsls	r4, r1, #31
 800babe:	d504      	bpl.n	800baca <_dtoa_r+0x44a>
 800bac0:	ed90 6b00 	vldr	d6, [r0]
 800bac4:	3201      	adds	r2, #1
 800bac6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800baca:	1049      	asrs	r1, r1, #1
 800bacc:	3008      	adds	r0, #8
 800bace:	e777      	b.n	800b9c0 <_dtoa_r+0x340>
 800bad0:	d022      	beq.n	800bb18 <_dtoa_r+0x498>
 800bad2:	f1cb 0100 	rsb	r1, fp, #0
 800bad6:	4a70      	ldr	r2, [pc, #448]	; (800bc98 <_dtoa_r+0x618>)
 800bad8:	f001 000f 	and.w	r0, r1, #15
 800badc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bae0:	ed92 7b00 	vldr	d7, [r2]
 800bae4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800baec:	486b      	ldr	r0, [pc, #428]	; (800bc9c <_dtoa_r+0x61c>)
 800baee:	1109      	asrs	r1, r1, #4
 800baf0:	2400      	movs	r4, #0
 800baf2:	2202      	movs	r2, #2
 800baf4:	b929      	cbnz	r1, 800bb02 <_dtoa_r+0x482>
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	f43f af6a 	beq.w	800b9d0 <_dtoa_r+0x350>
 800bafc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb00:	e766      	b.n	800b9d0 <_dtoa_r+0x350>
 800bb02:	07cf      	lsls	r7, r1, #31
 800bb04:	d505      	bpl.n	800bb12 <_dtoa_r+0x492>
 800bb06:	ed90 6b00 	vldr	d6, [r0]
 800bb0a:	3201      	adds	r2, #1
 800bb0c:	2401      	movs	r4, #1
 800bb0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb12:	1049      	asrs	r1, r1, #1
 800bb14:	3008      	adds	r0, #8
 800bb16:	e7ed      	b.n	800baf4 <_dtoa_r+0x474>
 800bb18:	2202      	movs	r2, #2
 800bb1a:	e759      	b.n	800b9d0 <_dtoa_r+0x350>
 800bb1c:	465f      	mov	r7, fp
 800bb1e:	4648      	mov	r0, r9
 800bb20:	e775      	b.n	800ba0e <_dtoa_r+0x38e>
 800bb22:	ec42 1b17 	vmov	d7, r1, r2
 800bb26:	4a5c      	ldr	r2, [pc, #368]	; (800bc98 <_dtoa_r+0x618>)
 800bb28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bb2c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bb30:	9a01      	ldr	r2, [sp, #4]
 800bb32:	1814      	adds	r4, r2, r0
 800bb34:	9a07      	ldr	r2, [sp, #28]
 800bb36:	b352      	cbz	r2, 800bb8e <_dtoa_r+0x50e>
 800bb38:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bb3c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bb40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb44:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bb48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bb4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bb54:	ee14 2a90 	vmov	r2, s9
 800bb58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb5c:	3230      	adds	r2, #48	; 0x30
 800bb5e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6a:	f808 2b01 	strb.w	r2, [r8], #1
 800bb6e:	d439      	bmi.n	800bbe4 <_dtoa_r+0x564>
 800bb70:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bb74:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7c:	d472      	bmi.n	800bc64 <_dtoa_r+0x5e4>
 800bb7e:	45a0      	cmp	r8, r4
 800bb80:	f43f af6b 	beq.w	800ba5a <_dtoa_r+0x3da>
 800bb84:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bb88:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bb8c:	e7e0      	b.n	800bb50 <_dtoa_r+0x4d0>
 800bb8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb92:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb96:	4621      	mov	r1, r4
 800bb98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bb9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bba0:	ee14 2a90 	vmov	r2, s9
 800bba4:	3230      	adds	r2, #48	; 0x30
 800bba6:	f808 2b01 	strb.w	r2, [r8], #1
 800bbaa:	45a0      	cmp	r8, r4
 800bbac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbb4:	d118      	bne.n	800bbe8 <_dtoa_r+0x568>
 800bbb6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bbba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bbbe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	dc4d      	bgt.n	800bc64 <_dtoa_r+0x5e4>
 800bbc8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	f57f af41 	bpl.w	800ba5a <_dtoa_r+0x3da>
 800bbd8:	4688      	mov	r8, r1
 800bbda:	3901      	subs	r1, #1
 800bbdc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bbe0:	2b30      	cmp	r3, #48	; 0x30
 800bbe2:	d0f9      	beq.n	800bbd8 <_dtoa_r+0x558>
 800bbe4:	46bb      	mov	fp, r7
 800bbe6:	e02a      	b.n	800bc3e <_dtoa_r+0x5be>
 800bbe8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bbec:	e7d6      	b.n	800bb9c <_dtoa_r+0x51c>
 800bbee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbf2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bbf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbfa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bbfe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc02:	ee15 3a10 	vmov	r3, s10
 800bc06:	3330      	adds	r3, #48	; 0x30
 800bc08:	f808 3b01 	strb.w	r3, [r8], #1
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	eba8 0303 	sub.w	r3, r8, r3
 800bc12:	4599      	cmp	r9, r3
 800bc14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc18:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc1c:	d133      	bne.n	800bc86 <_dtoa_r+0x606>
 800bc1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2a:	dc1a      	bgt.n	800bc62 <_dtoa_r+0x5e2>
 800bc2c:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc34:	d103      	bne.n	800bc3e <_dtoa_r+0x5be>
 800bc36:	ee15 3a10 	vmov	r3, s10
 800bc3a:	07d9      	lsls	r1, r3, #31
 800bc3c:	d411      	bmi.n	800bc62 <_dtoa_r+0x5e2>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 fd05 	bl	800c650 <_Bfree>
 800bc46:	2300      	movs	r3, #0
 800bc48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc4a:	f888 3000 	strb.w	r3, [r8]
 800bc4e:	f10b 0301 	add.w	r3, fp, #1
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f43f ad61 	beq.w	800b71e <_dtoa_r+0x9e>
 800bc5c:	f8c3 8000 	str.w	r8, [r3]
 800bc60:	e55d      	b.n	800b71e <_dtoa_r+0x9e>
 800bc62:	465f      	mov	r7, fp
 800bc64:	4643      	mov	r3, r8
 800bc66:	4698      	mov	r8, r3
 800bc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc6c:	2a39      	cmp	r2, #57	; 0x39
 800bc6e:	d106      	bne.n	800bc7e <_dtoa_r+0x5fe>
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d1f7      	bne.n	800bc66 <_dtoa_r+0x5e6>
 800bc76:	9901      	ldr	r1, [sp, #4]
 800bc78:	2230      	movs	r2, #48	; 0x30
 800bc7a:	3701      	adds	r7, #1
 800bc7c:	700a      	strb	r2, [r1, #0]
 800bc7e:	781a      	ldrb	r2, [r3, #0]
 800bc80:	3201      	adds	r2, #1
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	e7ae      	b.n	800bbe4 <_dtoa_r+0x564>
 800bc86:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc92:	d1b2      	bne.n	800bbfa <_dtoa_r+0x57a>
 800bc94:	e7d3      	b.n	800bc3e <_dtoa_r+0x5be>
 800bc96:	bf00      	nop
 800bc98:	0800f0d8 	.word	0x0800f0d8
 800bc9c:	0800f0b0 	.word	0x0800f0b0
 800bca0:	9907      	ldr	r1, [sp, #28]
 800bca2:	2900      	cmp	r1, #0
 800bca4:	f000 80d0 	beq.w	800be48 <_dtoa_r+0x7c8>
 800bca8:	9906      	ldr	r1, [sp, #24]
 800bcaa:	2901      	cmp	r1, #1
 800bcac:	f300 80b4 	bgt.w	800be18 <_dtoa_r+0x798>
 800bcb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	f000 80ac 	beq.w	800be10 <_dtoa_r+0x790>
 800bcb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bcbc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bcc0:	461c      	mov	r4, r3
 800bcc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	9b05      	ldr	r3, [sp, #20]
 800bccc:	2101      	movs	r1, #1
 800bcce:	4413      	add	r3, r2
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	9305      	str	r3, [sp, #20]
 800bcd4:	f000 fd74 	bl	800c7c0 <__i2b>
 800bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcda:	4607      	mov	r7, r0
 800bcdc:	f1b8 0f00 	cmp.w	r8, #0
 800bce0:	dd0d      	ble.n	800bcfe <_dtoa_r+0x67e>
 800bce2:	9a05      	ldr	r2, [sp, #20]
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	dd0a      	ble.n	800bcfe <_dtoa_r+0x67e>
 800bce8:	4542      	cmp	r2, r8
 800bcea:	9904      	ldr	r1, [sp, #16]
 800bcec:	bfa8      	it	ge
 800bcee:	4642      	movge	r2, r8
 800bcf0:	1a89      	subs	r1, r1, r2
 800bcf2:	9104      	str	r1, [sp, #16]
 800bcf4:	9905      	ldr	r1, [sp, #20]
 800bcf6:	eba8 0802 	sub.w	r8, r8, r2
 800bcfa:	1a8a      	subs	r2, r1, r2
 800bcfc:	9205      	str	r2, [sp, #20]
 800bcfe:	b303      	cbz	r3, 800bd42 <_dtoa_r+0x6c2>
 800bd00:	9a07      	ldr	r2, [sp, #28]
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	f000 80a5 	beq.w	800be52 <_dtoa_r+0x7d2>
 800bd08:	2c00      	cmp	r4, #0
 800bd0a:	dd13      	ble.n	800bd34 <_dtoa_r+0x6b4>
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4630      	mov	r0, r6
 800bd12:	930d      	str	r3, [sp, #52]	; 0x34
 800bd14:	f000 fe14 	bl	800c940 <__pow5mult>
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f000 fd64 	bl	800c7ec <__multiply>
 800bd24:	4629      	mov	r1, r5
 800bd26:	900a      	str	r0, [sp, #40]	; 0x28
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f000 fc91 	bl	800c650 <_Bfree>
 800bd2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd32:	4615      	mov	r5, r2
 800bd34:	1b1a      	subs	r2, r3, r4
 800bd36:	d004      	beq.n	800bd42 <_dtoa_r+0x6c2>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 fe00 	bl	800c940 <__pow5mult>
 800bd40:	4605      	mov	r5, r0
 800bd42:	2101      	movs	r1, #1
 800bd44:	4630      	mov	r0, r6
 800bd46:	f000 fd3b 	bl	800c7c0 <__i2b>
 800bd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f340 8081 	ble.w	800be56 <_dtoa_r+0x7d6>
 800bd54:	461a      	mov	r2, r3
 800bd56:	4601      	mov	r1, r0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 fdf1 	bl	800c940 <__pow5mult>
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	4604      	mov	r4, r0
 800bd64:	dd7a      	ble.n	800be5c <_dtoa_r+0x7dc>
 800bd66:	2300      	movs	r3, #0
 800bd68:	930a      	str	r3, [sp, #40]	; 0x28
 800bd6a:	6922      	ldr	r2, [r4, #16]
 800bd6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd70:	6910      	ldr	r0, [r2, #16]
 800bd72:	f000 fcd5 	bl	800c720 <__hi0bits>
 800bd76:	f1c0 0020 	rsb	r0, r0, #32
 800bd7a:	9b05      	ldr	r3, [sp, #20]
 800bd7c:	4418      	add	r0, r3
 800bd7e:	f010 001f 	ands.w	r0, r0, #31
 800bd82:	f000 808c 	beq.w	800be9e <_dtoa_r+0x81e>
 800bd86:	f1c0 0220 	rsb	r2, r0, #32
 800bd8a:	2a04      	cmp	r2, #4
 800bd8c:	f340 8085 	ble.w	800be9a <_dtoa_r+0x81a>
 800bd90:	f1c0 001c 	rsb	r0, r0, #28
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	4403      	add	r3, r0
 800bd98:	9304      	str	r3, [sp, #16]
 800bd9a:	9b05      	ldr	r3, [sp, #20]
 800bd9c:	4403      	add	r3, r0
 800bd9e:	4480      	add	r8, r0
 800bda0:	9305      	str	r3, [sp, #20]
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dd05      	ble.n	800bdb4 <_dtoa_r+0x734>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	461a      	mov	r2, r3
 800bdac:	4630      	mov	r0, r6
 800bdae:	f000 fe21 	bl	800c9f4 <__lshift>
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	9b05      	ldr	r3, [sp, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dd05      	ble.n	800bdc6 <_dtoa_r+0x746>
 800bdba:	4621      	mov	r1, r4
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f000 fe18 	bl	800c9f4 <__lshift>
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d06a      	beq.n	800bea2 <_dtoa_r+0x822>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 fe80 	bl	800cad4 <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	da64      	bge.n	800bea2 <_dtoa_r+0x822>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4629      	mov	r1, r5
 800bddc:	220a      	movs	r2, #10
 800bdde:	4630      	mov	r0, r6
 800bde0:	f000 fc58 	bl	800c694 <__multadd>
 800bde4:	9b07      	ldr	r3, [sp, #28]
 800bde6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdea:	4605      	mov	r5, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8191 	beq.w	800c114 <_dtoa_r+0xa94>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	220a      	movs	r2, #10
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 fc4b 	bl	800c694 <__multadd>
 800bdfe:	f1ba 0f00 	cmp.w	sl, #0
 800be02:	4607      	mov	r7, r0
 800be04:	f300 808d 	bgt.w	800bf22 <_dtoa_r+0x8a2>
 800be08:	9b06      	ldr	r3, [sp, #24]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	dc50      	bgt.n	800beb0 <_dtoa_r+0x830>
 800be0e:	e088      	b.n	800bf22 <_dtoa_r+0x8a2>
 800be10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be16:	e751      	b.n	800bcbc <_dtoa_r+0x63c>
 800be18:	f109 34ff 	add.w	r4, r9, #4294967295
 800be1c:	42a3      	cmp	r3, r4
 800be1e:	bfbf      	itttt	lt
 800be20:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800be22:	1ae3      	sublt	r3, r4, r3
 800be24:	18d2      	addlt	r2, r2, r3
 800be26:	9209      	strlt	r2, [sp, #36]	; 0x24
 800be28:	bfb6      	itet	lt
 800be2a:	4623      	movlt	r3, r4
 800be2c:	1b1c      	subge	r4, r3, r4
 800be2e:	2400      	movlt	r4, #0
 800be30:	f1b9 0f00 	cmp.w	r9, #0
 800be34:	bfb5      	itete	lt
 800be36:	9a04      	ldrlt	r2, [sp, #16]
 800be38:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800be3c:	eba2 0809 	sublt.w	r8, r2, r9
 800be40:	464a      	movge	r2, r9
 800be42:	bfb8      	it	lt
 800be44:	2200      	movlt	r2, #0
 800be46:	e73c      	b.n	800bcc2 <_dtoa_r+0x642>
 800be48:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800be4c:	9f07      	ldr	r7, [sp, #28]
 800be4e:	461c      	mov	r4, r3
 800be50:	e744      	b.n	800bcdc <_dtoa_r+0x65c>
 800be52:	461a      	mov	r2, r3
 800be54:	e770      	b.n	800bd38 <_dtoa_r+0x6b8>
 800be56:	9b06      	ldr	r3, [sp, #24]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	dc18      	bgt.n	800be8e <_dtoa_r+0x80e>
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	b9b3      	cbnz	r3, 800be8e <_dtoa_r+0x80e>
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800be66:	b9a2      	cbnz	r2, 800be92 <_dtoa_r+0x812>
 800be68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800be6c:	0d12      	lsrs	r2, r2, #20
 800be6e:	0512      	lsls	r2, r2, #20
 800be70:	b18a      	cbz	r2, 800be96 <_dtoa_r+0x816>
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	3301      	adds	r3, #1
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	9b05      	ldr	r3, [sp, #20]
 800be7a:	3301      	adds	r3, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	2301      	movs	r3, #1
 800be80:	930a      	str	r3, [sp, #40]	; 0x28
 800be82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	f47f af70 	bne.w	800bd6a <_dtoa_r+0x6ea>
 800be8a:	2001      	movs	r0, #1
 800be8c:	e775      	b.n	800bd7a <_dtoa_r+0x6fa>
 800be8e:	2300      	movs	r3, #0
 800be90:	e7f6      	b.n	800be80 <_dtoa_r+0x800>
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	e7f4      	b.n	800be80 <_dtoa_r+0x800>
 800be96:	920a      	str	r2, [sp, #40]	; 0x28
 800be98:	e7f3      	b.n	800be82 <_dtoa_r+0x802>
 800be9a:	d082      	beq.n	800bda2 <_dtoa_r+0x722>
 800be9c:	4610      	mov	r0, r2
 800be9e:	301c      	adds	r0, #28
 800bea0:	e778      	b.n	800bd94 <_dtoa_r+0x714>
 800bea2:	f1b9 0f00 	cmp.w	r9, #0
 800bea6:	dc37      	bgt.n	800bf18 <_dtoa_r+0x898>
 800bea8:	9b06      	ldr	r3, [sp, #24]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	dd34      	ble.n	800bf18 <_dtoa_r+0x898>
 800beae:	46ca      	mov	sl, r9
 800beb0:	f1ba 0f00 	cmp.w	sl, #0
 800beb4:	d10d      	bne.n	800bed2 <_dtoa_r+0x852>
 800beb6:	4621      	mov	r1, r4
 800beb8:	4653      	mov	r3, sl
 800beba:	2205      	movs	r2, #5
 800bebc:	4630      	mov	r0, r6
 800bebe:	f000 fbe9 	bl	800c694 <__multadd>
 800bec2:	4601      	mov	r1, r0
 800bec4:	4604      	mov	r4, r0
 800bec6:	4628      	mov	r0, r5
 800bec8:	f000 fe04 	bl	800cad4 <__mcmp>
 800becc:	2800      	cmp	r0, #0
 800bece:	f73f adeb 	bgt.w	800baa8 <_dtoa_r+0x428>
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bed8:	ea6f 0b03 	mvn.w	fp, r3
 800bedc:	f04f 0900 	mov.w	r9, #0
 800bee0:	4621      	mov	r1, r4
 800bee2:	4630      	mov	r0, r6
 800bee4:	f000 fbb4 	bl	800c650 <_Bfree>
 800bee8:	2f00      	cmp	r7, #0
 800beea:	f43f aea8 	beq.w	800bc3e <_dtoa_r+0x5be>
 800beee:	f1b9 0f00 	cmp.w	r9, #0
 800bef2:	d005      	beq.n	800bf00 <_dtoa_r+0x880>
 800bef4:	45b9      	cmp	r9, r7
 800bef6:	d003      	beq.n	800bf00 <_dtoa_r+0x880>
 800bef8:	4649      	mov	r1, r9
 800befa:	4630      	mov	r0, r6
 800befc:	f000 fba8 	bl	800c650 <_Bfree>
 800bf00:	4639      	mov	r1, r7
 800bf02:	4630      	mov	r0, r6
 800bf04:	f000 fba4 	bl	800c650 <_Bfree>
 800bf08:	e699      	b.n	800bc3e <_dtoa_r+0x5be>
 800bf0a:	2400      	movs	r4, #0
 800bf0c:	4627      	mov	r7, r4
 800bf0e:	e7e0      	b.n	800bed2 <_dtoa_r+0x852>
 800bf10:	46bb      	mov	fp, r7
 800bf12:	4604      	mov	r4, r0
 800bf14:	4607      	mov	r7, r0
 800bf16:	e5c7      	b.n	800baa8 <_dtoa_r+0x428>
 800bf18:	9b07      	ldr	r3, [sp, #28]
 800bf1a:	46ca      	mov	sl, r9
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8100 	beq.w	800c122 <_dtoa_r+0xaa2>
 800bf22:	f1b8 0f00 	cmp.w	r8, #0
 800bf26:	dd05      	ble.n	800bf34 <_dtoa_r+0x8b4>
 800bf28:	4639      	mov	r1, r7
 800bf2a:	4642      	mov	r2, r8
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f000 fd61 	bl	800c9f4 <__lshift>
 800bf32:	4607      	mov	r7, r0
 800bf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d05d      	beq.n	800bff6 <_dtoa_r+0x976>
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f000 fb47 	bl	800c5d0 <_Balloc>
 800bf42:	4680      	mov	r8, r0
 800bf44:	b928      	cbnz	r0, 800bf52 <_dtoa_r+0x8d2>
 800bf46:	4b82      	ldr	r3, [pc, #520]	; (800c150 <_dtoa_r+0xad0>)
 800bf48:	4602      	mov	r2, r0
 800bf4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf4e:	f7ff bbaf 	b.w	800b6b0 <_dtoa_r+0x30>
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	3202      	adds	r2, #2
 800bf56:	0092      	lsls	r2, r2, #2
 800bf58:	f107 010c 	add.w	r1, r7, #12
 800bf5c:	300c      	adds	r0, #12
 800bf5e:	f000 fb29 	bl	800c5b4 <memcpy>
 800bf62:	2201      	movs	r2, #1
 800bf64:	4641      	mov	r1, r8
 800bf66:	4630      	mov	r0, r6
 800bf68:	f000 fd44 	bl	800c9f4 <__lshift>
 800bf6c:	9b01      	ldr	r3, [sp, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	9304      	str	r3, [sp, #16]
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	4453      	add	r3, sl
 800bf76:	9308      	str	r3, [sp, #32]
 800bf78:	9b02      	ldr	r3, [sp, #8]
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	46b9      	mov	r9, r7
 800bf80:	9307      	str	r3, [sp, #28]
 800bf82:	4607      	mov	r7, r0
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	4621      	mov	r1, r4
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	9302      	str	r3, [sp, #8]
 800bf8e:	f7ff faeb 	bl	800b568 <quorem>
 800bf92:	4603      	mov	r3, r0
 800bf94:	3330      	adds	r3, #48	; 0x30
 800bf96:	9005      	str	r0, [sp, #20]
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9e:	f000 fd99 	bl	800cad4 <__mcmp>
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	4682      	mov	sl, r0
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f000 fdaf 	bl	800cb0c <__mdiff>
 800bfae:	68c2      	ldr	r2, [r0, #12]
 800bfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb2:	4680      	mov	r8, r0
 800bfb4:	bb0a      	cbnz	r2, 800bffa <_dtoa_r+0x97a>
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f000 fd8b 	bl	800cad4 <__mcmp>
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800bfca:	f000 fb41 	bl	800c650 <_Bfree>
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfd2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bfd6:	ea43 0102 	orr.w	r1, r3, r2
 800bfda:	9b07      	ldr	r3, [sp, #28]
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe0:	d10d      	bne.n	800bffe <_dtoa_r+0x97e>
 800bfe2:	2b39      	cmp	r3, #57	; 0x39
 800bfe4:	d029      	beq.n	800c03a <_dtoa_r+0x9ba>
 800bfe6:	f1ba 0f00 	cmp.w	sl, #0
 800bfea:	dd01      	ble.n	800bff0 <_dtoa_r+0x970>
 800bfec:	9b05      	ldr	r3, [sp, #20]
 800bfee:	3331      	adds	r3, #49	; 0x31
 800bff0:	9a02      	ldr	r2, [sp, #8]
 800bff2:	7013      	strb	r3, [r2, #0]
 800bff4:	e774      	b.n	800bee0 <_dtoa_r+0x860>
 800bff6:	4638      	mov	r0, r7
 800bff8:	e7b8      	b.n	800bf6c <_dtoa_r+0x8ec>
 800bffa:	2201      	movs	r2, #1
 800bffc:	e7e1      	b.n	800bfc2 <_dtoa_r+0x942>
 800bffe:	f1ba 0f00 	cmp.w	sl, #0
 800c002:	db06      	blt.n	800c012 <_dtoa_r+0x992>
 800c004:	9906      	ldr	r1, [sp, #24]
 800c006:	ea41 0a0a 	orr.w	sl, r1, sl
 800c00a:	9907      	ldr	r1, [sp, #28]
 800c00c:	ea5a 0101 	orrs.w	r1, sl, r1
 800c010:	d120      	bne.n	800c054 <_dtoa_r+0x9d4>
 800c012:	2a00      	cmp	r2, #0
 800c014:	ddec      	ble.n	800bff0 <_dtoa_r+0x970>
 800c016:	4629      	mov	r1, r5
 800c018:	2201      	movs	r2, #1
 800c01a:	4630      	mov	r0, r6
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	f000 fce9 	bl	800c9f4 <__lshift>
 800c022:	4621      	mov	r1, r4
 800c024:	4605      	mov	r5, r0
 800c026:	f000 fd55 	bl	800cad4 <__mcmp>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	dc02      	bgt.n	800c036 <_dtoa_r+0x9b6>
 800c030:	d1de      	bne.n	800bff0 <_dtoa_r+0x970>
 800c032:	07da      	lsls	r2, r3, #31
 800c034:	d5dc      	bpl.n	800bff0 <_dtoa_r+0x970>
 800c036:	2b39      	cmp	r3, #57	; 0x39
 800c038:	d1d8      	bne.n	800bfec <_dtoa_r+0x96c>
 800c03a:	9a02      	ldr	r2, [sp, #8]
 800c03c:	2339      	movs	r3, #57	; 0x39
 800c03e:	7013      	strb	r3, [r2, #0]
 800c040:	4643      	mov	r3, r8
 800c042:	4698      	mov	r8, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c04a:	2a39      	cmp	r2, #57	; 0x39
 800c04c:	d051      	beq.n	800c0f2 <_dtoa_r+0xa72>
 800c04e:	3201      	adds	r2, #1
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	e745      	b.n	800bee0 <_dtoa_r+0x860>
 800c054:	2a00      	cmp	r2, #0
 800c056:	dd03      	ble.n	800c060 <_dtoa_r+0x9e0>
 800c058:	2b39      	cmp	r3, #57	; 0x39
 800c05a:	d0ee      	beq.n	800c03a <_dtoa_r+0x9ba>
 800c05c:	3301      	adds	r3, #1
 800c05e:	e7c7      	b.n	800bff0 <_dtoa_r+0x970>
 800c060:	9a04      	ldr	r2, [sp, #16]
 800c062:	9908      	ldr	r1, [sp, #32]
 800c064:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c068:	428a      	cmp	r2, r1
 800c06a:	d02b      	beq.n	800c0c4 <_dtoa_r+0xa44>
 800c06c:	4629      	mov	r1, r5
 800c06e:	2300      	movs	r3, #0
 800c070:	220a      	movs	r2, #10
 800c072:	4630      	mov	r0, r6
 800c074:	f000 fb0e 	bl	800c694 <__multadd>
 800c078:	45b9      	cmp	r9, r7
 800c07a:	4605      	mov	r5, r0
 800c07c:	f04f 0300 	mov.w	r3, #0
 800c080:	f04f 020a 	mov.w	r2, #10
 800c084:	4649      	mov	r1, r9
 800c086:	4630      	mov	r0, r6
 800c088:	d107      	bne.n	800c09a <_dtoa_r+0xa1a>
 800c08a:	f000 fb03 	bl	800c694 <__multadd>
 800c08e:	4681      	mov	r9, r0
 800c090:	4607      	mov	r7, r0
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	3301      	adds	r3, #1
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	e774      	b.n	800bf84 <_dtoa_r+0x904>
 800c09a:	f000 fafb 	bl	800c694 <__multadd>
 800c09e:	4639      	mov	r1, r7
 800c0a0:	4681      	mov	r9, r0
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	220a      	movs	r2, #10
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 faf4 	bl	800c694 <__multadd>
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	e7f0      	b.n	800c092 <_dtoa_r+0xa12>
 800c0b0:	f1ba 0f00 	cmp.w	sl, #0
 800c0b4:	9a01      	ldr	r2, [sp, #4]
 800c0b6:	bfcc      	ite	gt
 800c0b8:	46d0      	movgt	r8, sl
 800c0ba:	f04f 0801 	movle.w	r8, #1
 800c0be:	4490      	add	r8, r2
 800c0c0:	f04f 0900 	mov.w	r9, #0
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	9302      	str	r3, [sp, #8]
 800c0cc:	f000 fc92 	bl	800c9f4 <__lshift>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	f000 fcfe 	bl	800cad4 <__mcmp>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	dcb1      	bgt.n	800c040 <_dtoa_r+0x9c0>
 800c0dc:	d102      	bne.n	800c0e4 <_dtoa_r+0xa64>
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	07db      	lsls	r3, r3, #31
 800c0e2:	d4ad      	bmi.n	800c040 <_dtoa_r+0x9c0>
 800c0e4:	4643      	mov	r3, r8
 800c0e6:	4698      	mov	r8, r3
 800c0e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0ec:	2a30      	cmp	r2, #48	; 0x30
 800c0ee:	d0fa      	beq.n	800c0e6 <_dtoa_r+0xa66>
 800c0f0:	e6f6      	b.n	800bee0 <_dtoa_r+0x860>
 800c0f2:	9a01      	ldr	r2, [sp, #4]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d1a4      	bne.n	800c042 <_dtoa_r+0x9c2>
 800c0f8:	f10b 0b01 	add.w	fp, fp, #1
 800c0fc:	2331      	movs	r3, #49	; 0x31
 800c0fe:	e778      	b.n	800bff2 <_dtoa_r+0x972>
 800c100:	4b14      	ldr	r3, [pc, #80]	; (800c154 <_dtoa_r+0xad4>)
 800c102:	f7ff bb27 	b.w	800b754 <_dtoa_r+0xd4>
 800c106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f47f ab03 	bne.w	800b714 <_dtoa_r+0x94>
 800c10e:	4b12      	ldr	r3, [pc, #72]	; (800c158 <_dtoa_r+0xad8>)
 800c110:	f7ff bb20 	b.w	800b754 <_dtoa_r+0xd4>
 800c114:	f1ba 0f00 	cmp.w	sl, #0
 800c118:	dc03      	bgt.n	800c122 <_dtoa_r+0xaa2>
 800c11a:	9b06      	ldr	r3, [sp, #24]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	f73f aec7 	bgt.w	800beb0 <_dtoa_r+0x830>
 800c122:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	f7ff fa1d 	bl	800b568 <quorem>
 800c12e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c132:	f808 3b01 	strb.w	r3, [r8], #1
 800c136:	9a01      	ldr	r2, [sp, #4]
 800c138:	eba8 0202 	sub.w	r2, r8, r2
 800c13c:	4592      	cmp	sl, r2
 800c13e:	ddb7      	ble.n	800c0b0 <_dtoa_r+0xa30>
 800c140:	4629      	mov	r1, r5
 800c142:	2300      	movs	r3, #0
 800c144:	220a      	movs	r2, #10
 800c146:	4630      	mov	r0, r6
 800c148:	f000 faa4 	bl	800c694 <__multadd>
 800c14c:	4605      	mov	r5, r0
 800c14e:	e7ea      	b.n	800c126 <_dtoa_r+0xaa6>
 800c150:	0800efdf 	.word	0x0800efdf
 800c154:	0800ef3c 	.word	0x0800ef3c
 800c158:	0800ef60 	.word	0x0800ef60

0800c15c <__sflush_r>:
 800c15c:	898a      	ldrh	r2, [r1, #12]
 800c15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c162:	4605      	mov	r5, r0
 800c164:	0710      	lsls	r0, r2, #28
 800c166:	460c      	mov	r4, r1
 800c168:	d458      	bmi.n	800c21c <__sflush_r+0xc0>
 800c16a:	684b      	ldr	r3, [r1, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dc05      	bgt.n	800c17c <__sflush_r+0x20>
 800c170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c172:	2b00      	cmp	r3, #0
 800c174:	dc02      	bgt.n	800c17c <__sflush_r+0x20>
 800c176:	2000      	movs	r0, #0
 800c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c17e:	2e00      	cmp	r6, #0
 800c180:	d0f9      	beq.n	800c176 <__sflush_r+0x1a>
 800c182:	2300      	movs	r3, #0
 800c184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c188:	682f      	ldr	r7, [r5, #0]
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	d032      	beq.n	800c1f4 <__sflush_r+0x98>
 800c18e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	075a      	lsls	r2, r3, #29
 800c194:	d505      	bpl.n	800c1a2 <__sflush_r+0x46>
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	1ac0      	subs	r0, r0, r3
 800c19a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c19c:	b10b      	cbz	r3, 800c1a2 <__sflush_r+0x46>
 800c19e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1a0:	1ac0      	subs	r0, r0, r3
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1a8:	6a21      	ldr	r1, [r4, #32]
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b0      	blx	r6
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	d106      	bne.n	800c1c2 <__sflush_r+0x66>
 800c1b4:	6829      	ldr	r1, [r5, #0]
 800c1b6:	291d      	cmp	r1, #29
 800c1b8:	d82c      	bhi.n	800c214 <__sflush_r+0xb8>
 800c1ba:	4a2a      	ldr	r2, [pc, #168]	; (800c264 <__sflush_r+0x108>)
 800c1bc:	40ca      	lsrs	r2, r1
 800c1be:	07d6      	lsls	r6, r2, #31
 800c1c0:	d528      	bpl.n	800c214 <__sflush_r+0xb8>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	6062      	str	r2, [r4, #4]
 800c1c6:	04d9      	lsls	r1, r3, #19
 800c1c8:	6922      	ldr	r2, [r4, #16]
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	d504      	bpl.n	800c1d8 <__sflush_r+0x7c>
 800c1ce:	1c42      	adds	r2, r0, #1
 800c1d0:	d101      	bne.n	800c1d6 <__sflush_r+0x7a>
 800c1d2:	682b      	ldr	r3, [r5, #0]
 800c1d4:	b903      	cbnz	r3, 800c1d8 <__sflush_r+0x7c>
 800c1d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1da:	602f      	str	r7, [r5, #0]
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	d0ca      	beq.n	800c176 <__sflush_r+0x1a>
 800c1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	d002      	beq.n	800c1ee <__sflush_r+0x92>
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f000 fd8b 	bl	800cd04 <_free_r>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c1f2:	e7c1      	b.n	800c178 <__sflush_r+0x1c>
 800c1f4:	6a21      	ldr	r1, [r4, #32]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b0      	blx	r6
 800c1fc:	1c41      	adds	r1, r0, #1
 800c1fe:	d1c7      	bne.n	800c190 <__sflush_r+0x34>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0c4      	beq.n	800c190 <__sflush_r+0x34>
 800c206:	2b1d      	cmp	r3, #29
 800c208:	d001      	beq.n	800c20e <__sflush_r+0xb2>
 800c20a:	2b16      	cmp	r3, #22
 800c20c:	d101      	bne.n	800c212 <__sflush_r+0xb6>
 800c20e:	602f      	str	r7, [r5, #0]
 800c210:	e7b1      	b.n	800c176 <__sflush_r+0x1a>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	e7ad      	b.n	800c178 <__sflush_r+0x1c>
 800c21c:	690f      	ldr	r7, [r1, #16]
 800c21e:	2f00      	cmp	r7, #0
 800c220:	d0a9      	beq.n	800c176 <__sflush_r+0x1a>
 800c222:	0793      	lsls	r3, r2, #30
 800c224:	680e      	ldr	r6, [r1, #0]
 800c226:	bf08      	it	eq
 800c228:	694b      	ldreq	r3, [r1, #20]
 800c22a:	600f      	str	r7, [r1, #0]
 800c22c:	bf18      	it	ne
 800c22e:	2300      	movne	r3, #0
 800c230:	eba6 0807 	sub.w	r8, r6, r7
 800c234:	608b      	str	r3, [r1, #8]
 800c236:	f1b8 0f00 	cmp.w	r8, #0
 800c23a:	dd9c      	ble.n	800c176 <__sflush_r+0x1a>
 800c23c:	6a21      	ldr	r1, [r4, #32]
 800c23e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c240:	4643      	mov	r3, r8
 800c242:	463a      	mov	r2, r7
 800c244:	4628      	mov	r0, r5
 800c246:	47b0      	blx	r6
 800c248:	2800      	cmp	r0, #0
 800c24a:	dc06      	bgt.n	800c25a <__sflush_r+0xfe>
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e78e      	b.n	800c178 <__sflush_r+0x1c>
 800c25a:	4407      	add	r7, r0
 800c25c:	eba8 0800 	sub.w	r8, r8, r0
 800c260:	e7e9      	b.n	800c236 <__sflush_r+0xda>
 800c262:	bf00      	nop
 800c264:	20400001 	.word	0x20400001

0800c268 <_fflush_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	690b      	ldr	r3, [r1, #16]
 800c26c:	4605      	mov	r5, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	b913      	cbnz	r3, 800c278 <_fflush_r+0x10>
 800c272:	2500      	movs	r5, #0
 800c274:	4628      	mov	r0, r5
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	b118      	cbz	r0, 800c282 <_fflush_r+0x1a>
 800c27a:	6983      	ldr	r3, [r0, #24]
 800c27c:	b90b      	cbnz	r3, 800c282 <_fflush_r+0x1a>
 800c27e:	f000 f887 	bl	800c390 <__sinit>
 800c282:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <_fflush_r+0x6c>)
 800c284:	429c      	cmp	r4, r3
 800c286:	d11b      	bne.n	800c2c0 <_fflush_r+0x58>
 800c288:	686c      	ldr	r4, [r5, #4]
 800c28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0ef      	beq.n	800c272 <_fflush_r+0xa>
 800c292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c294:	07d0      	lsls	r0, r2, #31
 800c296:	d404      	bmi.n	800c2a2 <_fflush_r+0x3a>
 800c298:	0599      	lsls	r1, r3, #22
 800c29a:	d402      	bmi.n	800c2a2 <_fflush_r+0x3a>
 800c29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c29e:	f000 f91a 	bl	800c4d6 <__retarget_lock_acquire_recursive>
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f7ff ff59 	bl	800c15c <__sflush_r>
 800c2aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ac:	07da      	lsls	r2, r3, #31
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	d4e0      	bmi.n	800c274 <_fflush_r+0xc>
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	059b      	lsls	r3, r3, #22
 800c2b6:	d4dd      	bmi.n	800c274 <_fflush_r+0xc>
 800c2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ba:	f000 f90d 	bl	800c4d8 <__retarget_lock_release_recursive>
 800c2be:	e7d9      	b.n	800c274 <_fflush_r+0xc>
 800c2c0:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <_fflush_r+0x70>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	d101      	bne.n	800c2ca <_fflush_r+0x62>
 800c2c6:	68ac      	ldr	r4, [r5, #8]
 800c2c8:	e7df      	b.n	800c28a <_fflush_r+0x22>
 800c2ca:	4b04      	ldr	r3, [pc, #16]	; (800c2dc <_fflush_r+0x74>)
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	bf08      	it	eq
 800c2d0:	68ec      	ldreq	r4, [r5, #12]
 800c2d2:	e7da      	b.n	800c28a <_fflush_r+0x22>
 800c2d4:	0800f010 	.word	0x0800f010
 800c2d8:	0800f030 	.word	0x0800f030
 800c2dc:	0800eff0 	.word	0x0800eff0

0800c2e0 <std>:
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	b510      	push	{r4, lr}
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c2ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2ee:	6083      	str	r3, [r0, #8]
 800c2f0:	8181      	strh	r1, [r0, #12]
 800c2f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c2f4:	81c2      	strh	r2, [r0, #14]
 800c2f6:	6183      	str	r3, [r0, #24]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	305c      	adds	r0, #92	; 0x5c
 800c2fe:	f7fe fb9b 	bl	800aa38 <memset>
 800c302:	4b05      	ldr	r3, [pc, #20]	; (800c318 <std+0x38>)
 800c304:	6263      	str	r3, [r4, #36]	; 0x24
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <std+0x3c>)
 800c308:	62a3      	str	r3, [r4, #40]	; 0x28
 800c30a:	4b05      	ldr	r3, [pc, #20]	; (800c320 <std+0x40>)
 800c30c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c30e:	4b05      	ldr	r3, [pc, #20]	; (800c324 <std+0x44>)
 800c310:	6224      	str	r4, [r4, #32]
 800c312:	6323      	str	r3, [r4, #48]	; 0x30
 800c314:	bd10      	pop	{r4, pc}
 800c316:	bf00      	nop
 800c318:	0800d199 	.word	0x0800d199
 800c31c:	0800d1bb 	.word	0x0800d1bb
 800c320:	0800d1f3 	.word	0x0800d1f3
 800c324:	0800d217 	.word	0x0800d217

0800c328 <_cleanup_r>:
 800c328:	4901      	ldr	r1, [pc, #4]	; (800c330 <_cleanup_r+0x8>)
 800c32a:	f000 b8af 	b.w	800c48c <_fwalk_reent>
 800c32e:	bf00      	nop
 800c330:	0800c269 	.word	0x0800c269

0800c334 <__sfmoreglue>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	2268      	movs	r2, #104	; 0x68
 800c338:	1e4d      	subs	r5, r1, #1
 800c33a:	4355      	muls	r5, r2
 800c33c:	460e      	mov	r6, r1
 800c33e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c342:	f000 fd4b 	bl	800cddc <_malloc_r>
 800c346:	4604      	mov	r4, r0
 800c348:	b140      	cbz	r0, 800c35c <__sfmoreglue+0x28>
 800c34a:	2100      	movs	r1, #0
 800c34c:	e9c0 1600 	strd	r1, r6, [r0]
 800c350:	300c      	adds	r0, #12
 800c352:	60a0      	str	r0, [r4, #8]
 800c354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c358:	f7fe fb6e 	bl	800aa38 <memset>
 800c35c:	4620      	mov	r0, r4
 800c35e:	bd70      	pop	{r4, r5, r6, pc}

0800c360 <__sfp_lock_acquire>:
 800c360:	4801      	ldr	r0, [pc, #4]	; (800c368 <__sfp_lock_acquire+0x8>)
 800c362:	f000 b8b8 	b.w	800c4d6 <__retarget_lock_acquire_recursive>
 800c366:	bf00      	nop
 800c368:	24000551 	.word	0x24000551

0800c36c <__sfp_lock_release>:
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <__sfp_lock_release+0x8>)
 800c36e:	f000 b8b3 	b.w	800c4d8 <__retarget_lock_release_recursive>
 800c372:	bf00      	nop
 800c374:	24000551 	.word	0x24000551

0800c378 <__sinit_lock_acquire>:
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <__sinit_lock_acquire+0x8>)
 800c37a:	f000 b8ac 	b.w	800c4d6 <__retarget_lock_acquire_recursive>
 800c37e:	bf00      	nop
 800c380:	24000552 	.word	0x24000552

0800c384 <__sinit_lock_release>:
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <__sinit_lock_release+0x8>)
 800c386:	f000 b8a7 	b.w	800c4d8 <__retarget_lock_release_recursive>
 800c38a:	bf00      	nop
 800c38c:	24000552 	.word	0x24000552

0800c390 <__sinit>:
 800c390:	b510      	push	{r4, lr}
 800c392:	4604      	mov	r4, r0
 800c394:	f7ff fff0 	bl	800c378 <__sinit_lock_acquire>
 800c398:	69a3      	ldr	r3, [r4, #24]
 800c39a:	b11b      	cbz	r3, 800c3a4 <__sinit+0x14>
 800c39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a0:	f7ff bff0 	b.w	800c384 <__sinit_lock_release>
 800c3a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3a8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3aa:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <__sinit+0x68>)
 800c3ac:	4a13      	ldr	r2, [pc, #76]	; (800c3fc <__sinit+0x6c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	bf04      	itt	eq
 800c3b6:	2301      	moveq	r3, #1
 800c3b8:	61a3      	streq	r3, [r4, #24]
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 f820 	bl	800c400 <__sfp>
 800c3c0:	6060      	str	r0, [r4, #4]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 f81c 	bl	800c400 <__sfp>
 800c3c8:	60a0      	str	r0, [r4, #8]
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 f818 	bl	800c400 <__sfp>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	60e0      	str	r0, [r4, #12]
 800c3d4:	2104      	movs	r1, #4
 800c3d6:	6860      	ldr	r0, [r4, #4]
 800c3d8:	f7ff ff82 	bl	800c2e0 <std>
 800c3dc:	68a0      	ldr	r0, [r4, #8]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	2109      	movs	r1, #9
 800c3e2:	f7ff ff7d 	bl	800c2e0 <std>
 800c3e6:	68e0      	ldr	r0, [r4, #12]
 800c3e8:	2202      	movs	r2, #2
 800c3ea:	2112      	movs	r1, #18
 800c3ec:	f7ff ff78 	bl	800c2e0 <std>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	61a3      	str	r3, [r4, #24]
 800c3f4:	e7d2      	b.n	800c39c <__sinit+0xc>
 800c3f6:	bf00      	nop
 800c3f8:	0800ef28 	.word	0x0800ef28
 800c3fc:	0800c329 	.word	0x0800c329

0800c400 <__sfp>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4607      	mov	r7, r0
 800c404:	f7ff ffac 	bl	800c360 <__sfp_lock_acquire>
 800c408:	4b1e      	ldr	r3, [pc, #120]	; (800c484 <__sfp+0x84>)
 800c40a:	681e      	ldr	r6, [r3, #0]
 800c40c:	69b3      	ldr	r3, [r6, #24]
 800c40e:	b913      	cbnz	r3, 800c416 <__sfp+0x16>
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ffbd 	bl	800c390 <__sinit>
 800c416:	3648      	adds	r6, #72	; 0x48
 800c418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	d503      	bpl.n	800c428 <__sfp+0x28>
 800c420:	6833      	ldr	r3, [r6, #0]
 800c422:	b30b      	cbz	r3, 800c468 <__sfp+0x68>
 800c424:	6836      	ldr	r6, [r6, #0]
 800c426:	e7f7      	b.n	800c418 <__sfp+0x18>
 800c428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c42c:	b9d5      	cbnz	r5, 800c464 <__sfp+0x64>
 800c42e:	4b16      	ldr	r3, [pc, #88]	; (800c488 <__sfp+0x88>)
 800c430:	60e3      	str	r3, [r4, #12]
 800c432:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c436:	6665      	str	r5, [r4, #100]	; 0x64
 800c438:	f000 f84c 	bl	800c4d4 <__retarget_lock_init_recursive>
 800c43c:	f7ff ff96 	bl	800c36c <__sfp_lock_release>
 800c440:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c444:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c448:	6025      	str	r5, [r4, #0]
 800c44a:	61a5      	str	r5, [r4, #24]
 800c44c:	2208      	movs	r2, #8
 800c44e:	4629      	mov	r1, r5
 800c450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c454:	f7fe faf0 	bl	800aa38 <memset>
 800c458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c45c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c460:	4620      	mov	r0, r4
 800c462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c464:	3468      	adds	r4, #104	; 0x68
 800c466:	e7d9      	b.n	800c41c <__sfp+0x1c>
 800c468:	2104      	movs	r1, #4
 800c46a:	4638      	mov	r0, r7
 800c46c:	f7ff ff62 	bl	800c334 <__sfmoreglue>
 800c470:	4604      	mov	r4, r0
 800c472:	6030      	str	r0, [r6, #0]
 800c474:	2800      	cmp	r0, #0
 800c476:	d1d5      	bne.n	800c424 <__sfp+0x24>
 800c478:	f7ff ff78 	bl	800c36c <__sfp_lock_release>
 800c47c:	230c      	movs	r3, #12
 800c47e:	603b      	str	r3, [r7, #0]
 800c480:	e7ee      	b.n	800c460 <__sfp+0x60>
 800c482:	bf00      	nop
 800c484:	0800ef28 	.word	0x0800ef28
 800c488:	ffff0001 	.word	0xffff0001

0800c48c <_fwalk_reent>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4606      	mov	r6, r0
 800c492:	4688      	mov	r8, r1
 800c494:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c498:	2700      	movs	r7, #0
 800c49a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c49e:	f1b9 0901 	subs.w	r9, r9, #1
 800c4a2:	d505      	bpl.n	800c4b0 <_fwalk_reent+0x24>
 800c4a4:	6824      	ldr	r4, [r4, #0]
 800c4a6:	2c00      	cmp	r4, #0
 800c4a8:	d1f7      	bne.n	800c49a <_fwalk_reent+0xe>
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b0:	89ab      	ldrh	r3, [r5, #12]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d907      	bls.n	800c4c6 <_fwalk_reent+0x3a>
 800c4b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	d003      	beq.n	800c4c6 <_fwalk_reent+0x3a>
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	47c0      	blx	r8
 800c4c4:	4307      	orrs	r7, r0
 800c4c6:	3568      	adds	r5, #104	; 0x68
 800c4c8:	e7e9      	b.n	800c49e <_fwalk_reent+0x12>
	...

0800c4cc <_localeconv_r>:
 800c4cc:	4800      	ldr	r0, [pc, #0]	; (800c4d0 <_localeconv_r+0x4>)
 800c4ce:	4770      	bx	lr
 800c4d0:	24000188 	.word	0x24000188

0800c4d4 <__retarget_lock_init_recursive>:
 800c4d4:	4770      	bx	lr

0800c4d6 <__retarget_lock_acquire_recursive>:
 800c4d6:	4770      	bx	lr

0800c4d8 <__retarget_lock_release_recursive>:
 800c4d8:	4770      	bx	lr

0800c4da <__swhatbuf_r>:
 800c4da:	b570      	push	{r4, r5, r6, lr}
 800c4dc:	460e      	mov	r6, r1
 800c4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e2:	2900      	cmp	r1, #0
 800c4e4:	b096      	sub	sp, #88	; 0x58
 800c4e6:	4614      	mov	r4, r2
 800c4e8:	461d      	mov	r5, r3
 800c4ea:	da08      	bge.n	800c4fe <__swhatbuf_r+0x24>
 800c4ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	602a      	str	r2, [r5, #0]
 800c4f4:	061a      	lsls	r2, r3, #24
 800c4f6:	d410      	bmi.n	800c51a <__swhatbuf_r+0x40>
 800c4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fc:	e00e      	b.n	800c51c <__swhatbuf_r+0x42>
 800c4fe:	466a      	mov	r2, sp
 800c500:	f000 fee0 	bl	800d2c4 <_fstat_r>
 800c504:	2800      	cmp	r0, #0
 800c506:	dbf1      	blt.n	800c4ec <__swhatbuf_r+0x12>
 800c508:	9a01      	ldr	r2, [sp, #4]
 800c50a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c50e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c512:	425a      	negs	r2, r3
 800c514:	415a      	adcs	r2, r3
 800c516:	602a      	str	r2, [r5, #0]
 800c518:	e7ee      	b.n	800c4f8 <__swhatbuf_r+0x1e>
 800c51a:	2340      	movs	r3, #64	; 0x40
 800c51c:	2000      	movs	r0, #0
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	b016      	add	sp, #88	; 0x58
 800c522:	bd70      	pop	{r4, r5, r6, pc}

0800c524 <__smakebuf_r>:
 800c524:	898b      	ldrh	r3, [r1, #12]
 800c526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c528:	079d      	lsls	r5, r3, #30
 800c52a:	4606      	mov	r6, r0
 800c52c:	460c      	mov	r4, r1
 800c52e:	d507      	bpl.n	800c540 <__smakebuf_r+0x1c>
 800c530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	6123      	str	r3, [r4, #16]
 800c538:	2301      	movs	r3, #1
 800c53a:	6163      	str	r3, [r4, #20]
 800c53c:	b002      	add	sp, #8
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	ab01      	add	r3, sp, #4
 800c542:	466a      	mov	r2, sp
 800c544:	f7ff ffc9 	bl	800c4da <__swhatbuf_r>
 800c548:	9900      	ldr	r1, [sp, #0]
 800c54a:	4605      	mov	r5, r0
 800c54c:	4630      	mov	r0, r6
 800c54e:	f000 fc45 	bl	800cddc <_malloc_r>
 800c552:	b948      	cbnz	r0, 800c568 <__smakebuf_r+0x44>
 800c554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c558:	059a      	lsls	r2, r3, #22
 800c55a:	d4ef      	bmi.n	800c53c <__smakebuf_r+0x18>
 800c55c:	f023 0303 	bic.w	r3, r3, #3
 800c560:	f043 0302 	orr.w	r3, r3, #2
 800c564:	81a3      	strh	r3, [r4, #12]
 800c566:	e7e3      	b.n	800c530 <__smakebuf_r+0xc>
 800c568:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <__smakebuf_r+0x7c>)
 800c56a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	6020      	str	r0, [r4, #0]
 800c570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c574:	81a3      	strh	r3, [r4, #12]
 800c576:	9b00      	ldr	r3, [sp, #0]
 800c578:	6163      	str	r3, [r4, #20]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	6120      	str	r0, [r4, #16]
 800c57e:	b15b      	cbz	r3, 800c598 <__smakebuf_r+0x74>
 800c580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c584:	4630      	mov	r0, r6
 800c586:	f000 feaf 	bl	800d2e8 <_isatty_r>
 800c58a:	b128      	cbz	r0, 800c598 <__smakebuf_r+0x74>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	f043 0301 	orr.w	r3, r3, #1
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	89a0      	ldrh	r0, [r4, #12]
 800c59a:	4305      	orrs	r5, r0
 800c59c:	81a5      	strh	r5, [r4, #12]
 800c59e:	e7cd      	b.n	800c53c <__smakebuf_r+0x18>
 800c5a0:	0800c329 	.word	0x0800c329

0800c5a4 <malloc>:
 800c5a4:	4b02      	ldr	r3, [pc, #8]	; (800c5b0 <malloc+0xc>)
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	f000 bc17 	b.w	800cddc <_malloc_r>
 800c5ae:	bf00      	nop
 800c5b0:	24000034 	.word	0x24000034

0800c5b4 <memcpy>:
 800c5b4:	440a      	add	r2, r1
 800c5b6:	4291      	cmp	r1, r2
 800c5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5bc:	d100      	bne.n	800c5c0 <memcpy+0xc>
 800c5be:	4770      	bx	lr
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ca:	4291      	cmp	r1, r2
 800c5cc:	d1f9      	bne.n	800c5c2 <memcpy+0xe>
 800c5ce:	bd10      	pop	{r4, pc}

0800c5d0 <_Balloc>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	b976      	cbnz	r6, 800c5f8 <_Balloc+0x28>
 800c5da:	2010      	movs	r0, #16
 800c5dc:	f7ff ffe2 	bl	800c5a4 <malloc>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	6260      	str	r0, [r4, #36]	; 0x24
 800c5e4:	b920      	cbnz	r0, 800c5f0 <_Balloc+0x20>
 800c5e6:	4b18      	ldr	r3, [pc, #96]	; (800c648 <_Balloc+0x78>)
 800c5e8:	4818      	ldr	r0, [pc, #96]	; (800c64c <_Balloc+0x7c>)
 800c5ea:	2166      	movs	r1, #102	; 0x66
 800c5ec:	f000 fe2a 	bl	800d244 <__assert_func>
 800c5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5f4:	6006      	str	r6, [r0, #0]
 800c5f6:	60c6      	str	r6, [r0, #12]
 800c5f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5fa:	68f3      	ldr	r3, [r6, #12]
 800c5fc:	b183      	cbz	r3, 800c620 <_Balloc+0x50>
 800c5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c606:	b9b8      	cbnz	r0, 800c638 <_Balloc+0x68>
 800c608:	2101      	movs	r1, #1
 800c60a:	fa01 f605 	lsl.w	r6, r1, r5
 800c60e:	1d72      	adds	r2, r6, #5
 800c610:	0092      	lsls	r2, r2, #2
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fb60 	bl	800ccd8 <_calloc_r>
 800c618:	b160      	cbz	r0, 800c634 <_Balloc+0x64>
 800c61a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c61e:	e00e      	b.n	800c63e <_Balloc+0x6e>
 800c620:	2221      	movs	r2, #33	; 0x21
 800c622:	2104      	movs	r1, #4
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fb57 	bl	800ccd8 <_calloc_r>
 800c62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c62c:	60f0      	str	r0, [r6, #12]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e4      	bne.n	800c5fe <_Balloc+0x2e>
 800c634:	2000      	movs	r0, #0
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	6802      	ldr	r2, [r0, #0]
 800c63a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c63e:	2300      	movs	r3, #0
 800c640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c644:	e7f7      	b.n	800c636 <_Balloc+0x66>
 800c646:	bf00      	nop
 800c648:	0800ef6d 	.word	0x0800ef6d
 800c64c:	0800f050 	.word	0x0800f050

0800c650 <_Bfree>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c654:	4605      	mov	r5, r0
 800c656:	460c      	mov	r4, r1
 800c658:	b976      	cbnz	r6, 800c678 <_Bfree+0x28>
 800c65a:	2010      	movs	r0, #16
 800c65c:	f7ff ffa2 	bl	800c5a4 <malloc>
 800c660:	4602      	mov	r2, r0
 800c662:	6268      	str	r0, [r5, #36]	; 0x24
 800c664:	b920      	cbnz	r0, 800c670 <_Bfree+0x20>
 800c666:	4b09      	ldr	r3, [pc, #36]	; (800c68c <_Bfree+0x3c>)
 800c668:	4809      	ldr	r0, [pc, #36]	; (800c690 <_Bfree+0x40>)
 800c66a:	218a      	movs	r1, #138	; 0x8a
 800c66c:	f000 fdea 	bl	800d244 <__assert_func>
 800c670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c674:	6006      	str	r6, [r0, #0]
 800c676:	60c6      	str	r6, [r0, #12]
 800c678:	b13c      	cbz	r4, 800c68a <_Bfree+0x3a>
 800c67a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c67c:	6862      	ldr	r2, [r4, #4]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c684:	6021      	str	r1, [r4, #0]
 800c686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c68a:	bd70      	pop	{r4, r5, r6, pc}
 800c68c:	0800ef6d 	.word	0x0800ef6d
 800c690:	0800f050 	.word	0x0800f050

0800c694 <__multadd>:
 800c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c698:	690d      	ldr	r5, [r1, #16]
 800c69a:	4607      	mov	r7, r0
 800c69c:	460c      	mov	r4, r1
 800c69e:	461e      	mov	r6, r3
 800c6a0:	f101 0c14 	add.w	ip, r1, #20
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6aa:	b299      	uxth	r1, r3
 800c6ac:	fb02 6101 	mla	r1, r2, r1, r6
 800c6b0:	0c1e      	lsrs	r6, r3, #16
 800c6b2:	0c0b      	lsrs	r3, r1, #16
 800c6b4:	fb02 3306 	mla	r3, r2, r6, r3
 800c6b8:	b289      	uxth	r1, r1
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6c0:	4285      	cmp	r5, r0
 800c6c2:	f84c 1b04 	str.w	r1, [ip], #4
 800c6c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6ca:	dcec      	bgt.n	800c6a6 <__multadd+0x12>
 800c6cc:	b30e      	cbz	r6, 800c712 <__multadd+0x7e>
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	42ab      	cmp	r3, r5
 800c6d2:	dc19      	bgt.n	800c708 <__multadd+0x74>
 800c6d4:	6861      	ldr	r1, [r4, #4]
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	3101      	adds	r1, #1
 800c6da:	f7ff ff79 	bl	800c5d0 <_Balloc>
 800c6de:	4680      	mov	r8, r0
 800c6e0:	b928      	cbnz	r0, 800c6ee <__multadd+0x5a>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <__multadd+0x84>)
 800c6e6:	480d      	ldr	r0, [pc, #52]	; (800c71c <__multadd+0x88>)
 800c6e8:	21b5      	movs	r1, #181	; 0xb5
 800c6ea:	f000 fdab 	bl	800d244 <__assert_func>
 800c6ee:	6922      	ldr	r2, [r4, #16]
 800c6f0:	3202      	adds	r2, #2
 800c6f2:	f104 010c 	add.w	r1, r4, #12
 800c6f6:	0092      	lsls	r2, r2, #2
 800c6f8:	300c      	adds	r0, #12
 800c6fa:	f7ff ff5b 	bl	800c5b4 <memcpy>
 800c6fe:	4621      	mov	r1, r4
 800c700:	4638      	mov	r0, r7
 800c702:	f7ff ffa5 	bl	800c650 <_Bfree>
 800c706:	4644      	mov	r4, r8
 800c708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c70c:	3501      	adds	r5, #1
 800c70e:	615e      	str	r6, [r3, #20]
 800c710:	6125      	str	r5, [r4, #16]
 800c712:	4620      	mov	r0, r4
 800c714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c718:	0800efdf 	.word	0x0800efdf
 800c71c:	0800f050 	.word	0x0800f050

0800c720 <__hi0bits>:
 800c720:	0c03      	lsrs	r3, r0, #16
 800c722:	041b      	lsls	r3, r3, #16
 800c724:	b9d3      	cbnz	r3, 800c75c <__hi0bits+0x3c>
 800c726:	0400      	lsls	r0, r0, #16
 800c728:	2310      	movs	r3, #16
 800c72a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c72e:	bf04      	itt	eq
 800c730:	0200      	lsleq	r0, r0, #8
 800c732:	3308      	addeq	r3, #8
 800c734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c738:	bf04      	itt	eq
 800c73a:	0100      	lsleq	r0, r0, #4
 800c73c:	3304      	addeq	r3, #4
 800c73e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c742:	bf04      	itt	eq
 800c744:	0080      	lsleq	r0, r0, #2
 800c746:	3302      	addeq	r3, #2
 800c748:	2800      	cmp	r0, #0
 800c74a:	db05      	blt.n	800c758 <__hi0bits+0x38>
 800c74c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c750:	f103 0301 	add.w	r3, r3, #1
 800c754:	bf08      	it	eq
 800c756:	2320      	moveq	r3, #32
 800c758:	4618      	mov	r0, r3
 800c75a:	4770      	bx	lr
 800c75c:	2300      	movs	r3, #0
 800c75e:	e7e4      	b.n	800c72a <__hi0bits+0xa>

0800c760 <__lo0bits>:
 800c760:	6803      	ldr	r3, [r0, #0]
 800c762:	f013 0207 	ands.w	r2, r3, #7
 800c766:	4601      	mov	r1, r0
 800c768:	d00b      	beq.n	800c782 <__lo0bits+0x22>
 800c76a:	07da      	lsls	r2, r3, #31
 800c76c:	d423      	bmi.n	800c7b6 <__lo0bits+0x56>
 800c76e:	0798      	lsls	r0, r3, #30
 800c770:	bf49      	itett	mi
 800c772:	085b      	lsrmi	r3, r3, #1
 800c774:	089b      	lsrpl	r3, r3, #2
 800c776:	2001      	movmi	r0, #1
 800c778:	600b      	strmi	r3, [r1, #0]
 800c77a:	bf5c      	itt	pl
 800c77c:	600b      	strpl	r3, [r1, #0]
 800c77e:	2002      	movpl	r0, #2
 800c780:	4770      	bx	lr
 800c782:	b298      	uxth	r0, r3
 800c784:	b9a8      	cbnz	r0, 800c7b2 <__lo0bits+0x52>
 800c786:	0c1b      	lsrs	r3, r3, #16
 800c788:	2010      	movs	r0, #16
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	b90a      	cbnz	r2, 800c792 <__lo0bits+0x32>
 800c78e:	3008      	adds	r0, #8
 800c790:	0a1b      	lsrs	r3, r3, #8
 800c792:	071a      	lsls	r2, r3, #28
 800c794:	bf04      	itt	eq
 800c796:	091b      	lsreq	r3, r3, #4
 800c798:	3004      	addeq	r0, #4
 800c79a:	079a      	lsls	r2, r3, #30
 800c79c:	bf04      	itt	eq
 800c79e:	089b      	lsreq	r3, r3, #2
 800c7a0:	3002      	addeq	r0, #2
 800c7a2:	07da      	lsls	r2, r3, #31
 800c7a4:	d403      	bmi.n	800c7ae <__lo0bits+0x4e>
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	f100 0001 	add.w	r0, r0, #1
 800c7ac:	d005      	beq.n	800c7ba <__lo0bits+0x5a>
 800c7ae:	600b      	str	r3, [r1, #0]
 800c7b0:	4770      	bx	lr
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	e7e9      	b.n	800c78a <__lo0bits+0x2a>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	4770      	bx	lr
 800c7ba:	2020      	movs	r0, #32
 800c7bc:	4770      	bx	lr
	...

0800c7c0 <__i2b>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	f7ff ff03 	bl	800c5d0 <_Balloc>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	b928      	cbnz	r0, 800c7da <__i2b+0x1a>
 800c7ce:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <__i2b+0x24>)
 800c7d0:	4805      	ldr	r0, [pc, #20]	; (800c7e8 <__i2b+0x28>)
 800c7d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c7d6:	f000 fd35 	bl	800d244 <__assert_func>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	6144      	str	r4, [r0, #20]
 800c7de:	6103      	str	r3, [r0, #16]
 800c7e0:	bd10      	pop	{r4, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0800efdf 	.word	0x0800efdf
 800c7e8:	0800f050 	.word	0x0800f050

0800c7ec <__multiply>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	4691      	mov	r9, r2
 800c7f2:	690a      	ldr	r2, [r1, #16]
 800c7f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	bfb8      	it	lt
 800c7fc:	460b      	movlt	r3, r1
 800c7fe:	460c      	mov	r4, r1
 800c800:	bfbc      	itt	lt
 800c802:	464c      	movlt	r4, r9
 800c804:	4699      	movlt	r9, r3
 800c806:	6927      	ldr	r7, [r4, #16]
 800c808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c80c:	68a3      	ldr	r3, [r4, #8]
 800c80e:	6861      	ldr	r1, [r4, #4]
 800c810:	eb07 060a 	add.w	r6, r7, sl
 800c814:	42b3      	cmp	r3, r6
 800c816:	b085      	sub	sp, #20
 800c818:	bfb8      	it	lt
 800c81a:	3101      	addlt	r1, #1
 800c81c:	f7ff fed8 	bl	800c5d0 <_Balloc>
 800c820:	b930      	cbnz	r0, 800c830 <__multiply+0x44>
 800c822:	4602      	mov	r2, r0
 800c824:	4b44      	ldr	r3, [pc, #272]	; (800c938 <__multiply+0x14c>)
 800c826:	4845      	ldr	r0, [pc, #276]	; (800c93c <__multiply+0x150>)
 800c828:	f240 115d 	movw	r1, #349	; 0x15d
 800c82c:	f000 fd0a 	bl	800d244 <__assert_func>
 800c830:	f100 0514 	add.w	r5, r0, #20
 800c834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c838:	462b      	mov	r3, r5
 800c83a:	2200      	movs	r2, #0
 800c83c:	4543      	cmp	r3, r8
 800c83e:	d321      	bcc.n	800c884 <__multiply+0x98>
 800c840:	f104 0314 	add.w	r3, r4, #20
 800c844:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c848:	f109 0314 	add.w	r3, r9, #20
 800c84c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c850:	9202      	str	r2, [sp, #8]
 800c852:	1b3a      	subs	r2, r7, r4
 800c854:	3a15      	subs	r2, #21
 800c856:	f022 0203 	bic.w	r2, r2, #3
 800c85a:	3204      	adds	r2, #4
 800c85c:	f104 0115 	add.w	r1, r4, #21
 800c860:	428f      	cmp	r7, r1
 800c862:	bf38      	it	cc
 800c864:	2204      	movcc	r2, #4
 800c866:	9201      	str	r2, [sp, #4]
 800c868:	9a02      	ldr	r2, [sp, #8]
 800c86a:	9303      	str	r3, [sp, #12]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d80c      	bhi.n	800c88a <__multiply+0x9e>
 800c870:	2e00      	cmp	r6, #0
 800c872:	dd03      	ble.n	800c87c <__multiply+0x90>
 800c874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d05a      	beq.n	800c932 <__multiply+0x146>
 800c87c:	6106      	str	r6, [r0, #16]
 800c87e:	b005      	add	sp, #20
 800c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c884:	f843 2b04 	str.w	r2, [r3], #4
 800c888:	e7d8      	b.n	800c83c <__multiply+0x50>
 800c88a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c88e:	f1ba 0f00 	cmp.w	sl, #0
 800c892:	d024      	beq.n	800c8de <__multiply+0xf2>
 800c894:	f104 0e14 	add.w	lr, r4, #20
 800c898:	46a9      	mov	r9, r5
 800c89a:	f04f 0c00 	mov.w	ip, #0
 800c89e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8a2:	f8d9 1000 	ldr.w	r1, [r9]
 800c8a6:	fa1f fb82 	uxth.w	fp, r2
 800c8aa:	b289      	uxth	r1, r1
 800c8ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c8b8:	4461      	add	r1, ip
 800c8ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8be:	fb0a c20b 	mla	r2, sl, fp, ip
 800c8c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8c6:	b289      	uxth	r1, r1
 800c8c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8cc:	4577      	cmp	r7, lr
 800c8ce:	f849 1b04 	str.w	r1, [r9], #4
 800c8d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8d6:	d8e2      	bhi.n	800c89e <__multiply+0xb2>
 800c8d8:	9a01      	ldr	r2, [sp, #4]
 800c8da:	f845 c002 	str.w	ip, [r5, r2]
 800c8de:	9a03      	ldr	r2, [sp, #12]
 800c8e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ea:	d020      	beq.n	800c92e <__multiply+0x142>
 800c8ec:	6829      	ldr	r1, [r5, #0]
 800c8ee:	f104 0c14 	add.w	ip, r4, #20
 800c8f2:	46ae      	mov	lr, r5
 800c8f4:	f04f 0a00 	mov.w	sl, #0
 800c8f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c8fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c900:	fb09 220b 	mla	r2, r9, fp, r2
 800c904:	4492      	add	sl, r2
 800c906:	b289      	uxth	r1, r1
 800c908:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c90c:	f84e 1b04 	str.w	r1, [lr], #4
 800c910:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c914:	f8be 1000 	ldrh.w	r1, [lr]
 800c918:	0c12      	lsrs	r2, r2, #16
 800c91a:	fb09 1102 	mla	r1, r9, r2, r1
 800c91e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c922:	4567      	cmp	r7, ip
 800c924:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c928:	d8e6      	bhi.n	800c8f8 <__multiply+0x10c>
 800c92a:	9a01      	ldr	r2, [sp, #4]
 800c92c:	50a9      	str	r1, [r5, r2]
 800c92e:	3504      	adds	r5, #4
 800c930:	e79a      	b.n	800c868 <__multiply+0x7c>
 800c932:	3e01      	subs	r6, #1
 800c934:	e79c      	b.n	800c870 <__multiply+0x84>
 800c936:	bf00      	nop
 800c938:	0800efdf 	.word	0x0800efdf
 800c93c:	0800f050 	.word	0x0800f050

0800c940 <__pow5mult>:
 800c940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c944:	4615      	mov	r5, r2
 800c946:	f012 0203 	ands.w	r2, r2, #3
 800c94a:	4606      	mov	r6, r0
 800c94c:	460f      	mov	r7, r1
 800c94e:	d007      	beq.n	800c960 <__pow5mult+0x20>
 800c950:	4c25      	ldr	r4, [pc, #148]	; (800c9e8 <__pow5mult+0xa8>)
 800c952:	3a01      	subs	r2, #1
 800c954:	2300      	movs	r3, #0
 800c956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c95a:	f7ff fe9b 	bl	800c694 <__multadd>
 800c95e:	4607      	mov	r7, r0
 800c960:	10ad      	asrs	r5, r5, #2
 800c962:	d03d      	beq.n	800c9e0 <__pow5mult+0xa0>
 800c964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c966:	b97c      	cbnz	r4, 800c988 <__pow5mult+0x48>
 800c968:	2010      	movs	r0, #16
 800c96a:	f7ff fe1b 	bl	800c5a4 <malloc>
 800c96e:	4602      	mov	r2, r0
 800c970:	6270      	str	r0, [r6, #36]	; 0x24
 800c972:	b928      	cbnz	r0, 800c980 <__pow5mult+0x40>
 800c974:	4b1d      	ldr	r3, [pc, #116]	; (800c9ec <__pow5mult+0xac>)
 800c976:	481e      	ldr	r0, [pc, #120]	; (800c9f0 <__pow5mult+0xb0>)
 800c978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c97c:	f000 fc62 	bl	800d244 <__assert_func>
 800c980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c984:	6004      	str	r4, [r0, #0]
 800c986:	60c4      	str	r4, [r0, #12]
 800c988:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c98c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c990:	b94c      	cbnz	r4, 800c9a6 <__pow5mult+0x66>
 800c992:	f240 2171 	movw	r1, #625	; 0x271
 800c996:	4630      	mov	r0, r6
 800c998:	f7ff ff12 	bl	800c7c0 <__i2b>
 800c99c:	2300      	movs	r3, #0
 800c99e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	6003      	str	r3, [r0, #0]
 800c9a6:	f04f 0900 	mov.w	r9, #0
 800c9aa:	07eb      	lsls	r3, r5, #31
 800c9ac:	d50a      	bpl.n	800c9c4 <__pow5mult+0x84>
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff ff1a 	bl	800c7ec <__multiply>
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff fe47 	bl	800c650 <_Bfree>
 800c9c2:	4647      	mov	r7, r8
 800c9c4:	106d      	asrs	r5, r5, #1
 800c9c6:	d00b      	beq.n	800c9e0 <__pow5mult+0xa0>
 800c9c8:	6820      	ldr	r0, [r4, #0]
 800c9ca:	b938      	cbnz	r0, 800c9dc <__pow5mult+0x9c>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ff0b 	bl	800c7ec <__multiply>
 800c9d6:	6020      	str	r0, [r4, #0]
 800c9d8:	f8c0 9000 	str.w	r9, [r0]
 800c9dc:	4604      	mov	r4, r0
 800c9de:	e7e4      	b.n	800c9aa <__pow5mult+0x6a>
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e6:	bf00      	nop
 800c9e8:	0800f1a0 	.word	0x0800f1a0
 800c9ec:	0800ef6d 	.word	0x0800ef6d
 800c9f0:	0800f050 	.word	0x0800f050

0800c9f4 <__lshift>:
 800c9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	6849      	ldr	r1, [r1, #4]
 800c9fc:	6923      	ldr	r3, [r4, #16]
 800c9fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca02:	68a3      	ldr	r3, [r4, #8]
 800ca04:	4607      	mov	r7, r0
 800ca06:	4691      	mov	r9, r2
 800ca08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca0c:	f108 0601 	add.w	r6, r8, #1
 800ca10:	42b3      	cmp	r3, r6
 800ca12:	db0b      	blt.n	800ca2c <__lshift+0x38>
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7ff fddb 	bl	800c5d0 <_Balloc>
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	b948      	cbnz	r0, 800ca32 <__lshift+0x3e>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b2a      	ldr	r3, [pc, #168]	; (800cacc <__lshift+0xd8>)
 800ca22:	482b      	ldr	r0, [pc, #172]	; (800cad0 <__lshift+0xdc>)
 800ca24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca28:	f000 fc0c 	bl	800d244 <__assert_func>
 800ca2c:	3101      	adds	r1, #1
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	e7ee      	b.n	800ca10 <__lshift+0x1c>
 800ca32:	2300      	movs	r3, #0
 800ca34:	f100 0114 	add.w	r1, r0, #20
 800ca38:	f100 0210 	add.w	r2, r0, #16
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	4553      	cmp	r3, sl
 800ca40:	db37      	blt.n	800cab2 <__lshift+0xbe>
 800ca42:	6920      	ldr	r0, [r4, #16]
 800ca44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca48:	f104 0314 	add.w	r3, r4, #20
 800ca4c:	f019 091f 	ands.w	r9, r9, #31
 800ca50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ca58:	d02f      	beq.n	800caba <__lshift+0xc6>
 800ca5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca5e:	468a      	mov	sl, r1
 800ca60:	f04f 0c00 	mov.w	ip, #0
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	fa02 f209 	lsl.w	r2, r2, r9
 800ca6a:	ea42 020c 	orr.w	r2, r2, ip
 800ca6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ca72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca76:	4298      	cmp	r0, r3
 800ca78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ca7c:	d8f2      	bhi.n	800ca64 <__lshift+0x70>
 800ca7e:	1b03      	subs	r3, r0, r4
 800ca80:	3b15      	subs	r3, #21
 800ca82:	f023 0303 	bic.w	r3, r3, #3
 800ca86:	3304      	adds	r3, #4
 800ca88:	f104 0215 	add.w	r2, r4, #21
 800ca8c:	4290      	cmp	r0, r2
 800ca8e:	bf38      	it	cc
 800ca90:	2304      	movcc	r3, #4
 800ca92:	f841 c003 	str.w	ip, [r1, r3]
 800ca96:	f1bc 0f00 	cmp.w	ip, #0
 800ca9a:	d001      	beq.n	800caa0 <__lshift+0xac>
 800ca9c:	f108 0602 	add.w	r6, r8, #2
 800caa0:	3e01      	subs	r6, #1
 800caa2:	4638      	mov	r0, r7
 800caa4:	612e      	str	r6, [r5, #16]
 800caa6:	4621      	mov	r1, r4
 800caa8:	f7ff fdd2 	bl	800c650 <_Bfree>
 800caac:	4628      	mov	r0, r5
 800caae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cab6:	3301      	adds	r3, #1
 800cab8:	e7c1      	b.n	800ca3e <__lshift+0x4a>
 800caba:	3904      	subs	r1, #4
 800cabc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cac4:	4298      	cmp	r0, r3
 800cac6:	d8f9      	bhi.n	800cabc <__lshift+0xc8>
 800cac8:	e7ea      	b.n	800caa0 <__lshift+0xac>
 800caca:	bf00      	nop
 800cacc:	0800efdf 	.word	0x0800efdf
 800cad0:	0800f050 	.word	0x0800f050

0800cad4 <__mcmp>:
 800cad4:	b530      	push	{r4, r5, lr}
 800cad6:	6902      	ldr	r2, [r0, #16]
 800cad8:	690c      	ldr	r4, [r1, #16]
 800cada:	1b12      	subs	r2, r2, r4
 800cadc:	d10e      	bne.n	800cafc <__mcmp+0x28>
 800cade:	f100 0314 	add.w	r3, r0, #20
 800cae2:	3114      	adds	r1, #20
 800cae4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cae8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800caec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800caf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800caf4:	42a5      	cmp	r5, r4
 800caf6:	d003      	beq.n	800cb00 <__mcmp+0x2c>
 800caf8:	d305      	bcc.n	800cb06 <__mcmp+0x32>
 800cafa:	2201      	movs	r2, #1
 800cafc:	4610      	mov	r0, r2
 800cafe:	bd30      	pop	{r4, r5, pc}
 800cb00:	4283      	cmp	r3, r0
 800cb02:	d3f3      	bcc.n	800caec <__mcmp+0x18>
 800cb04:	e7fa      	b.n	800cafc <__mcmp+0x28>
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	e7f7      	b.n	800cafc <__mcmp+0x28>

0800cb0c <__mdiff>:
 800cb0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	460c      	mov	r4, r1
 800cb12:	4606      	mov	r6, r0
 800cb14:	4611      	mov	r1, r2
 800cb16:	4620      	mov	r0, r4
 800cb18:	4690      	mov	r8, r2
 800cb1a:	f7ff ffdb 	bl	800cad4 <__mcmp>
 800cb1e:	1e05      	subs	r5, r0, #0
 800cb20:	d110      	bne.n	800cb44 <__mdiff+0x38>
 800cb22:	4629      	mov	r1, r5
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7ff fd53 	bl	800c5d0 <_Balloc>
 800cb2a:	b930      	cbnz	r0, 800cb3a <__mdiff+0x2e>
 800cb2c:	4b3a      	ldr	r3, [pc, #232]	; (800cc18 <__mdiff+0x10c>)
 800cb2e:	4602      	mov	r2, r0
 800cb30:	f240 2132 	movw	r1, #562	; 0x232
 800cb34:	4839      	ldr	r0, [pc, #228]	; (800cc1c <__mdiff+0x110>)
 800cb36:	f000 fb85 	bl	800d244 <__assert_func>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb44:	bfa4      	itt	ge
 800cb46:	4643      	movge	r3, r8
 800cb48:	46a0      	movge	r8, r4
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb50:	bfa6      	itte	ge
 800cb52:	461c      	movge	r4, r3
 800cb54:	2500      	movge	r5, #0
 800cb56:	2501      	movlt	r5, #1
 800cb58:	f7ff fd3a 	bl	800c5d0 <_Balloc>
 800cb5c:	b920      	cbnz	r0, 800cb68 <__mdiff+0x5c>
 800cb5e:	4b2e      	ldr	r3, [pc, #184]	; (800cc18 <__mdiff+0x10c>)
 800cb60:	4602      	mov	r2, r0
 800cb62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cb66:	e7e5      	b.n	800cb34 <__mdiff+0x28>
 800cb68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb6c:	6926      	ldr	r6, [r4, #16]
 800cb6e:	60c5      	str	r5, [r0, #12]
 800cb70:	f104 0914 	add.w	r9, r4, #20
 800cb74:	f108 0514 	add.w	r5, r8, #20
 800cb78:	f100 0e14 	add.w	lr, r0, #20
 800cb7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb84:	f108 0210 	add.w	r2, r8, #16
 800cb88:	46f2      	mov	sl, lr
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb94:	fa1f f883 	uxth.w	r8, r3
 800cb98:	fa11 f18b 	uxtah	r1, r1, fp
 800cb9c:	0c1b      	lsrs	r3, r3, #16
 800cb9e:	eba1 0808 	sub.w	r8, r1, r8
 800cba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cba6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbaa:	fa1f f888 	uxth.w	r8, r8
 800cbae:	1419      	asrs	r1, r3, #16
 800cbb0:	454e      	cmp	r6, r9
 800cbb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cbb6:	f84a 3b04 	str.w	r3, [sl], #4
 800cbba:	d8e7      	bhi.n	800cb8c <__mdiff+0x80>
 800cbbc:	1b33      	subs	r3, r6, r4
 800cbbe:	3b15      	subs	r3, #21
 800cbc0:	f023 0303 	bic.w	r3, r3, #3
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	3415      	adds	r4, #21
 800cbc8:	42a6      	cmp	r6, r4
 800cbca:	bf38      	it	cc
 800cbcc:	2304      	movcc	r3, #4
 800cbce:	441d      	add	r5, r3
 800cbd0:	4473      	add	r3, lr
 800cbd2:	469e      	mov	lr, r3
 800cbd4:	462e      	mov	r6, r5
 800cbd6:	4566      	cmp	r6, ip
 800cbd8:	d30e      	bcc.n	800cbf8 <__mdiff+0xec>
 800cbda:	f10c 0203 	add.w	r2, ip, #3
 800cbde:	1b52      	subs	r2, r2, r5
 800cbe0:	f022 0203 	bic.w	r2, r2, #3
 800cbe4:	3d03      	subs	r5, #3
 800cbe6:	45ac      	cmp	ip, r5
 800cbe8:	bf38      	it	cc
 800cbea:	2200      	movcc	r2, #0
 800cbec:	441a      	add	r2, r3
 800cbee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cbf2:	b17b      	cbz	r3, 800cc14 <__mdiff+0x108>
 800cbf4:	6107      	str	r7, [r0, #16]
 800cbf6:	e7a3      	b.n	800cb40 <__mdiff+0x34>
 800cbf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800cbfc:	fa11 f288 	uxtah	r2, r1, r8
 800cc00:	1414      	asrs	r4, r2, #16
 800cc02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc06:	b292      	uxth	r2, r2
 800cc08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc0c:	f84e 2b04 	str.w	r2, [lr], #4
 800cc10:	1421      	asrs	r1, r4, #16
 800cc12:	e7e0      	b.n	800cbd6 <__mdiff+0xca>
 800cc14:	3f01      	subs	r7, #1
 800cc16:	e7ea      	b.n	800cbee <__mdiff+0xe2>
 800cc18:	0800efdf 	.word	0x0800efdf
 800cc1c:	0800f050 	.word	0x0800f050

0800cc20 <__d2b>:
 800cc20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc24:	4689      	mov	r9, r1
 800cc26:	2101      	movs	r1, #1
 800cc28:	ec57 6b10 	vmov	r6, r7, d0
 800cc2c:	4690      	mov	r8, r2
 800cc2e:	f7ff fccf 	bl	800c5d0 <_Balloc>
 800cc32:	4604      	mov	r4, r0
 800cc34:	b930      	cbnz	r0, 800cc44 <__d2b+0x24>
 800cc36:	4602      	mov	r2, r0
 800cc38:	4b25      	ldr	r3, [pc, #148]	; (800ccd0 <__d2b+0xb0>)
 800cc3a:	4826      	ldr	r0, [pc, #152]	; (800ccd4 <__d2b+0xb4>)
 800cc3c:	f240 310a 	movw	r1, #778	; 0x30a
 800cc40:	f000 fb00 	bl	800d244 <__assert_func>
 800cc44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc4c:	bb35      	cbnz	r5, 800cc9c <__d2b+0x7c>
 800cc4e:	2e00      	cmp	r6, #0
 800cc50:	9301      	str	r3, [sp, #4]
 800cc52:	d028      	beq.n	800cca6 <__d2b+0x86>
 800cc54:	4668      	mov	r0, sp
 800cc56:	9600      	str	r6, [sp, #0]
 800cc58:	f7ff fd82 	bl	800c760 <__lo0bits>
 800cc5c:	9900      	ldr	r1, [sp, #0]
 800cc5e:	b300      	cbz	r0, 800cca2 <__d2b+0x82>
 800cc60:	9a01      	ldr	r2, [sp, #4]
 800cc62:	f1c0 0320 	rsb	r3, r0, #32
 800cc66:	fa02 f303 	lsl.w	r3, r2, r3
 800cc6a:	430b      	orrs	r3, r1
 800cc6c:	40c2      	lsrs	r2, r0
 800cc6e:	6163      	str	r3, [r4, #20]
 800cc70:	9201      	str	r2, [sp, #4]
 800cc72:	9b01      	ldr	r3, [sp, #4]
 800cc74:	61a3      	str	r3, [r4, #24]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	bf14      	ite	ne
 800cc7a:	2202      	movne	r2, #2
 800cc7c:	2201      	moveq	r2, #1
 800cc7e:	6122      	str	r2, [r4, #16]
 800cc80:	b1d5      	cbz	r5, 800ccb8 <__d2b+0x98>
 800cc82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc86:	4405      	add	r5, r0
 800cc88:	f8c9 5000 	str.w	r5, [r9]
 800cc8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc90:	f8c8 0000 	str.w	r0, [r8]
 800cc94:	4620      	mov	r0, r4
 800cc96:	b003      	add	sp, #12
 800cc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cca0:	e7d5      	b.n	800cc4e <__d2b+0x2e>
 800cca2:	6161      	str	r1, [r4, #20]
 800cca4:	e7e5      	b.n	800cc72 <__d2b+0x52>
 800cca6:	a801      	add	r0, sp, #4
 800cca8:	f7ff fd5a 	bl	800c760 <__lo0bits>
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	6163      	str	r3, [r4, #20]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	6122      	str	r2, [r4, #16]
 800ccb4:	3020      	adds	r0, #32
 800ccb6:	e7e3      	b.n	800cc80 <__d2b+0x60>
 800ccb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccc0:	f8c9 0000 	str.w	r0, [r9]
 800ccc4:	6918      	ldr	r0, [r3, #16]
 800ccc6:	f7ff fd2b 	bl	800c720 <__hi0bits>
 800ccca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccce:	e7df      	b.n	800cc90 <__d2b+0x70>
 800ccd0:	0800efdf 	.word	0x0800efdf
 800ccd4:	0800f050 	.word	0x0800f050

0800ccd8 <_calloc_r>:
 800ccd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccda:	fba1 2402 	umull	r2, r4, r1, r2
 800ccde:	b94c      	cbnz	r4, 800ccf4 <_calloc_r+0x1c>
 800cce0:	4611      	mov	r1, r2
 800cce2:	9201      	str	r2, [sp, #4]
 800cce4:	f000 f87a 	bl	800cddc <_malloc_r>
 800cce8:	9a01      	ldr	r2, [sp, #4]
 800ccea:	4605      	mov	r5, r0
 800ccec:	b930      	cbnz	r0, 800ccfc <_calloc_r+0x24>
 800ccee:	4628      	mov	r0, r5
 800ccf0:	b003      	add	sp, #12
 800ccf2:	bd30      	pop	{r4, r5, pc}
 800ccf4:	220c      	movs	r2, #12
 800ccf6:	6002      	str	r2, [r0, #0]
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	e7f8      	b.n	800ccee <_calloc_r+0x16>
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f7fd fe9b 	bl	800aa38 <memset>
 800cd02:	e7f4      	b.n	800ccee <_calloc_r+0x16>

0800cd04 <_free_r>:
 800cd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd06:	2900      	cmp	r1, #0
 800cd08:	d044      	beq.n	800cd94 <_free_r+0x90>
 800cd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd0e:	9001      	str	r0, [sp, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f1a1 0404 	sub.w	r4, r1, #4
 800cd16:	bfb8      	it	lt
 800cd18:	18e4      	addlt	r4, r4, r3
 800cd1a:	f000 fb19 	bl	800d350 <__malloc_lock>
 800cd1e:	4a1e      	ldr	r2, [pc, #120]	; (800cd98 <_free_r+0x94>)
 800cd20:	9801      	ldr	r0, [sp, #4]
 800cd22:	6813      	ldr	r3, [r2, #0]
 800cd24:	b933      	cbnz	r3, 800cd34 <_free_r+0x30>
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	6014      	str	r4, [r2, #0]
 800cd2a:	b003      	add	sp, #12
 800cd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd30:	f000 bb14 	b.w	800d35c <__malloc_unlock>
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	d908      	bls.n	800cd4a <_free_r+0x46>
 800cd38:	6825      	ldr	r5, [r4, #0]
 800cd3a:	1961      	adds	r1, r4, r5
 800cd3c:	428b      	cmp	r3, r1
 800cd3e:	bf01      	itttt	eq
 800cd40:	6819      	ldreq	r1, [r3, #0]
 800cd42:	685b      	ldreq	r3, [r3, #4]
 800cd44:	1949      	addeq	r1, r1, r5
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	e7ed      	b.n	800cd26 <_free_r+0x22>
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	b10b      	cbz	r3, 800cd54 <_free_r+0x50>
 800cd50:	42a3      	cmp	r3, r4
 800cd52:	d9fa      	bls.n	800cd4a <_free_r+0x46>
 800cd54:	6811      	ldr	r1, [r2, #0]
 800cd56:	1855      	adds	r5, r2, r1
 800cd58:	42a5      	cmp	r5, r4
 800cd5a:	d10b      	bne.n	800cd74 <_free_r+0x70>
 800cd5c:	6824      	ldr	r4, [r4, #0]
 800cd5e:	4421      	add	r1, r4
 800cd60:	1854      	adds	r4, r2, r1
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	6011      	str	r1, [r2, #0]
 800cd66:	d1e0      	bne.n	800cd2a <_free_r+0x26>
 800cd68:	681c      	ldr	r4, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	6053      	str	r3, [r2, #4]
 800cd6e:	4421      	add	r1, r4
 800cd70:	6011      	str	r1, [r2, #0]
 800cd72:	e7da      	b.n	800cd2a <_free_r+0x26>
 800cd74:	d902      	bls.n	800cd7c <_free_r+0x78>
 800cd76:	230c      	movs	r3, #12
 800cd78:	6003      	str	r3, [r0, #0]
 800cd7a:	e7d6      	b.n	800cd2a <_free_r+0x26>
 800cd7c:	6825      	ldr	r5, [r4, #0]
 800cd7e:	1961      	adds	r1, r4, r5
 800cd80:	428b      	cmp	r3, r1
 800cd82:	bf04      	itt	eq
 800cd84:	6819      	ldreq	r1, [r3, #0]
 800cd86:	685b      	ldreq	r3, [r3, #4]
 800cd88:	6063      	str	r3, [r4, #4]
 800cd8a:	bf04      	itt	eq
 800cd8c:	1949      	addeq	r1, r1, r5
 800cd8e:	6021      	streq	r1, [r4, #0]
 800cd90:	6054      	str	r4, [r2, #4]
 800cd92:	e7ca      	b.n	800cd2a <_free_r+0x26>
 800cd94:	b003      	add	sp, #12
 800cd96:	bd30      	pop	{r4, r5, pc}
 800cd98:	24000554 	.word	0x24000554

0800cd9c <sbrk_aligned>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	4e0e      	ldr	r6, [pc, #56]	; (800cdd8 <sbrk_aligned+0x3c>)
 800cda0:	460c      	mov	r4, r1
 800cda2:	6831      	ldr	r1, [r6, #0]
 800cda4:	4605      	mov	r5, r0
 800cda6:	b911      	cbnz	r1, 800cdae <sbrk_aligned+0x12>
 800cda8:	f000 f9e6 	bl	800d178 <_sbrk_r>
 800cdac:	6030      	str	r0, [r6, #0]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f000 f9e1 	bl	800d178 <_sbrk_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d00a      	beq.n	800cdd0 <sbrk_aligned+0x34>
 800cdba:	1cc4      	adds	r4, r0, #3
 800cdbc:	f024 0403 	bic.w	r4, r4, #3
 800cdc0:	42a0      	cmp	r0, r4
 800cdc2:	d007      	beq.n	800cdd4 <sbrk_aligned+0x38>
 800cdc4:	1a21      	subs	r1, r4, r0
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 f9d6 	bl	800d178 <_sbrk_r>
 800cdcc:	3001      	adds	r0, #1
 800cdce:	d101      	bne.n	800cdd4 <sbrk_aligned+0x38>
 800cdd0:	f04f 34ff 	mov.w	r4, #4294967295
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	24000558 	.word	0x24000558

0800cddc <_malloc_r>:
 800cddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde0:	1ccd      	adds	r5, r1, #3
 800cde2:	f025 0503 	bic.w	r5, r5, #3
 800cde6:	3508      	adds	r5, #8
 800cde8:	2d0c      	cmp	r5, #12
 800cdea:	bf38      	it	cc
 800cdec:	250c      	movcc	r5, #12
 800cdee:	2d00      	cmp	r5, #0
 800cdf0:	4607      	mov	r7, r0
 800cdf2:	db01      	blt.n	800cdf8 <_malloc_r+0x1c>
 800cdf4:	42a9      	cmp	r1, r5
 800cdf6:	d905      	bls.n	800ce04 <_malloc_r+0x28>
 800cdf8:	230c      	movs	r3, #12
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	2600      	movs	r6, #0
 800cdfe:	4630      	mov	r0, r6
 800ce00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce04:	4e2e      	ldr	r6, [pc, #184]	; (800cec0 <_malloc_r+0xe4>)
 800ce06:	f000 faa3 	bl	800d350 <__malloc_lock>
 800ce0a:	6833      	ldr	r3, [r6, #0]
 800ce0c:	461c      	mov	r4, r3
 800ce0e:	bb34      	cbnz	r4, 800ce5e <_malloc_r+0x82>
 800ce10:	4629      	mov	r1, r5
 800ce12:	4638      	mov	r0, r7
 800ce14:	f7ff ffc2 	bl	800cd9c <sbrk_aligned>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	d14d      	bne.n	800ceba <_malloc_r+0xde>
 800ce1e:	6834      	ldr	r4, [r6, #0]
 800ce20:	4626      	mov	r6, r4
 800ce22:	2e00      	cmp	r6, #0
 800ce24:	d140      	bne.n	800cea8 <_malloc_r+0xcc>
 800ce26:	6823      	ldr	r3, [r4, #0]
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	eb04 0803 	add.w	r8, r4, r3
 800ce30:	f000 f9a2 	bl	800d178 <_sbrk_r>
 800ce34:	4580      	cmp	r8, r0
 800ce36:	d13a      	bne.n	800ceae <_malloc_r+0xd2>
 800ce38:	6821      	ldr	r1, [r4, #0]
 800ce3a:	3503      	adds	r5, #3
 800ce3c:	1a6d      	subs	r5, r5, r1
 800ce3e:	f025 0503 	bic.w	r5, r5, #3
 800ce42:	3508      	adds	r5, #8
 800ce44:	2d0c      	cmp	r5, #12
 800ce46:	bf38      	it	cc
 800ce48:	250c      	movcc	r5, #12
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4638      	mov	r0, r7
 800ce4e:	f7ff ffa5 	bl	800cd9c <sbrk_aligned>
 800ce52:	3001      	adds	r0, #1
 800ce54:	d02b      	beq.n	800ceae <_malloc_r+0xd2>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	442b      	add	r3, r5
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	e00e      	b.n	800ce7c <_malloc_r+0xa0>
 800ce5e:	6822      	ldr	r2, [r4, #0]
 800ce60:	1b52      	subs	r2, r2, r5
 800ce62:	d41e      	bmi.n	800cea2 <_malloc_r+0xc6>
 800ce64:	2a0b      	cmp	r2, #11
 800ce66:	d916      	bls.n	800ce96 <_malloc_r+0xba>
 800ce68:	1961      	adds	r1, r4, r5
 800ce6a:	42a3      	cmp	r3, r4
 800ce6c:	6025      	str	r5, [r4, #0]
 800ce6e:	bf18      	it	ne
 800ce70:	6059      	strne	r1, [r3, #4]
 800ce72:	6863      	ldr	r3, [r4, #4]
 800ce74:	bf08      	it	eq
 800ce76:	6031      	streq	r1, [r6, #0]
 800ce78:	5162      	str	r2, [r4, r5]
 800ce7a:	604b      	str	r3, [r1, #4]
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f104 060b 	add.w	r6, r4, #11
 800ce82:	f000 fa6b 	bl	800d35c <__malloc_unlock>
 800ce86:	f026 0607 	bic.w	r6, r6, #7
 800ce8a:	1d23      	adds	r3, r4, #4
 800ce8c:	1af2      	subs	r2, r6, r3
 800ce8e:	d0b6      	beq.n	800cdfe <_malloc_r+0x22>
 800ce90:	1b9b      	subs	r3, r3, r6
 800ce92:	50a3      	str	r3, [r4, r2]
 800ce94:	e7b3      	b.n	800cdfe <_malloc_r+0x22>
 800ce96:	6862      	ldr	r2, [r4, #4]
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	bf0c      	ite	eq
 800ce9c:	6032      	streq	r2, [r6, #0]
 800ce9e:	605a      	strne	r2, [r3, #4]
 800cea0:	e7ec      	b.n	800ce7c <_malloc_r+0xa0>
 800cea2:	4623      	mov	r3, r4
 800cea4:	6864      	ldr	r4, [r4, #4]
 800cea6:	e7b2      	b.n	800ce0e <_malloc_r+0x32>
 800cea8:	4634      	mov	r4, r6
 800ceaa:	6876      	ldr	r6, [r6, #4]
 800ceac:	e7b9      	b.n	800ce22 <_malloc_r+0x46>
 800ceae:	230c      	movs	r3, #12
 800ceb0:	603b      	str	r3, [r7, #0]
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f000 fa52 	bl	800d35c <__malloc_unlock>
 800ceb8:	e7a1      	b.n	800cdfe <_malloc_r+0x22>
 800ceba:	6025      	str	r5, [r4, #0]
 800cebc:	e7de      	b.n	800ce7c <_malloc_r+0xa0>
 800cebe:	bf00      	nop
 800cec0:	24000554 	.word	0x24000554

0800cec4 <__sfputc_r>:
 800cec4:	6893      	ldr	r3, [r2, #8]
 800cec6:	3b01      	subs	r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	b410      	push	{r4}
 800cecc:	6093      	str	r3, [r2, #8]
 800cece:	da08      	bge.n	800cee2 <__sfputc_r+0x1e>
 800ced0:	6994      	ldr	r4, [r2, #24]
 800ced2:	42a3      	cmp	r3, r4
 800ced4:	db01      	blt.n	800ceda <__sfputc_r+0x16>
 800ced6:	290a      	cmp	r1, #10
 800ced8:	d103      	bne.n	800cee2 <__sfputc_r+0x1e>
 800ceda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cede:	f7fe ba83 	b.w	800b3e8 <__swbuf_r>
 800cee2:	6813      	ldr	r3, [r2, #0]
 800cee4:	1c58      	adds	r0, r3, #1
 800cee6:	6010      	str	r0, [r2, #0]
 800cee8:	7019      	strb	r1, [r3, #0]
 800ceea:	4608      	mov	r0, r1
 800ceec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <__sfputs_r>:
 800cef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef4:	4606      	mov	r6, r0
 800cef6:	460f      	mov	r7, r1
 800cef8:	4614      	mov	r4, r2
 800cefa:	18d5      	adds	r5, r2, r3
 800cefc:	42ac      	cmp	r4, r5
 800cefe:	d101      	bne.n	800cf04 <__sfputs_r+0x12>
 800cf00:	2000      	movs	r0, #0
 800cf02:	e007      	b.n	800cf14 <__sfputs_r+0x22>
 800cf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf08:	463a      	mov	r2, r7
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f7ff ffda 	bl	800cec4 <__sfputc_r>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d1f3      	bne.n	800cefc <__sfputs_r+0xa>
 800cf14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf18 <_vfiprintf_r>:
 800cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	460d      	mov	r5, r1
 800cf1e:	b09d      	sub	sp, #116	; 0x74
 800cf20:	4614      	mov	r4, r2
 800cf22:	4698      	mov	r8, r3
 800cf24:	4606      	mov	r6, r0
 800cf26:	b118      	cbz	r0, 800cf30 <_vfiprintf_r+0x18>
 800cf28:	6983      	ldr	r3, [r0, #24]
 800cf2a:	b90b      	cbnz	r3, 800cf30 <_vfiprintf_r+0x18>
 800cf2c:	f7ff fa30 	bl	800c390 <__sinit>
 800cf30:	4b89      	ldr	r3, [pc, #548]	; (800d158 <_vfiprintf_r+0x240>)
 800cf32:	429d      	cmp	r5, r3
 800cf34:	d11b      	bne.n	800cf6e <_vfiprintf_r+0x56>
 800cf36:	6875      	ldr	r5, [r6, #4]
 800cf38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf3a:	07d9      	lsls	r1, r3, #31
 800cf3c:	d405      	bmi.n	800cf4a <_vfiprintf_r+0x32>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	059a      	lsls	r2, r3, #22
 800cf42:	d402      	bmi.n	800cf4a <_vfiprintf_r+0x32>
 800cf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf46:	f7ff fac6 	bl	800c4d6 <__retarget_lock_acquire_recursive>
 800cf4a:	89ab      	ldrh	r3, [r5, #12]
 800cf4c:	071b      	lsls	r3, r3, #28
 800cf4e:	d501      	bpl.n	800cf54 <_vfiprintf_r+0x3c>
 800cf50:	692b      	ldr	r3, [r5, #16]
 800cf52:	b9eb      	cbnz	r3, 800cf90 <_vfiprintf_r+0x78>
 800cf54:	4629      	mov	r1, r5
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7fe fa98 	bl	800b48c <__swsetup_r>
 800cf5c:	b1c0      	cbz	r0, 800cf90 <_vfiprintf_r+0x78>
 800cf5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf60:	07dc      	lsls	r4, r3, #31
 800cf62:	d50e      	bpl.n	800cf82 <_vfiprintf_r+0x6a>
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	b01d      	add	sp, #116	; 0x74
 800cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6e:	4b7b      	ldr	r3, [pc, #492]	; (800d15c <_vfiprintf_r+0x244>)
 800cf70:	429d      	cmp	r5, r3
 800cf72:	d101      	bne.n	800cf78 <_vfiprintf_r+0x60>
 800cf74:	68b5      	ldr	r5, [r6, #8]
 800cf76:	e7df      	b.n	800cf38 <_vfiprintf_r+0x20>
 800cf78:	4b79      	ldr	r3, [pc, #484]	; (800d160 <_vfiprintf_r+0x248>)
 800cf7a:	429d      	cmp	r5, r3
 800cf7c:	bf08      	it	eq
 800cf7e:	68f5      	ldreq	r5, [r6, #12]
 800cf80:	e7da      	b.n	800cf38 <_vfiprintf_r+0x20>
 800cf82:	89ab      	ldrh	r3, [r5, #12]
 800cf84:	0598      	lsls	r0, r3, #22
 800cf86:	d4ed      	bmi.n	800cf64 <_vfiprintf_r+0x4c>
 800cf88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf8a:	f7ff faa5 	bl	800c4d8 <__retarget_lock_release_recursive>
 800cf8e:	e7e9      	b.n	800cf64 <_vfiprintf_r+0x4c>
 800cf90:	2300      	movs	r3, #0
 800cf92:	9309      	str	r3, [sp, #36]	; 0x24
 800cf94:	2320      	movs	r3, #32
 800cf96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf9e:	2330      	movs	r3, #48	; 0x30
 800cfa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d164 <_vfiprintf_r+0x24c>
 800cfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa8:	f04f 0901 	mov.w	r9, #1
 800cfac:	4623      	mov	r3, r4
 800cfae:	469a      	mov	sl, r3
 800cfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb4:	b10a      	cbz	r2, 800cfba <_vfiprintf_r+0xa2>
 800cfb6:	2a25      	cmp	r2, #37	; 0x25
 800cfb8:	d1f9      	bne.n	800cfae <_vfiprintf_r+0x96>
 800cfba:	ebba 0b04 	subs.w	fp, sl, r4
 800cfbe:	d00b      	beq.n	800cfd8 <_vfiprintf_r+0xc0>
 800cfc0:	465b      	mov	r3, fp
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7ff ff93 	bl	800cef2 <__sfputs_r>
 800cfcc:	3001      	adds	r0, #1
 800cfce:	f000 80aa 	beq.w	800d126 <_vfiprintf_r+0x20e>
 800cfd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd4:	445a      	add	r2, fp
 800cfd6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 80a2 	beq.w	800d126 <_vfiprintf_r+0x20e>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfec:	f10a 0a01 	add.w	sl, sl, #1
 800cff0:	9304      	str	r3, [sp, #16]
 800cff2:	9307      	str	r3, [sp, #28]
 800cff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff8:	931a      	str	r3, [sp, #104]	; 0x68
 800cffa:	4654      	mov	r4, sl
 800cffc:	2205      	movs	r2, #5
 800cffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d002:	4858      	ldr	r0, [pc, #352]	; (800d164 <_vfiprintf_r+0x24c>)
 800d004:	f7f3 f974 	bl	80002f0 <memchr>
 800d008:	9a04      	ldr	r2, [sp, #16]
 800d00a:	b9d8      	cbnz	r0, 800d044 <_vfiprintf_r+0x12c>
 800d00c:	06d1      	lsls	r1, r2, #27
 800d00e:	bf44      	itt	mi
 800d010:	2320      	movmi	r3, #32
 800d012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d016:	0713      	lsls	r3, r2, #28
 800d018:	bf44      	itt	mi
 800d01a:	232b      	movmi	r3, #43	; 0x2b
 800d01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d020:	f89a 3000 	ldrb.w	r3, [sl]
 800d024:	2b2a      	cmp	r3, #42	; 0x2a
 800d026:	d015      	beq.n	800d054 <_vfiprintf_r+0x13c>
 800d028:	9a07      	ldr	r2, [sp, #28]
 800d02a:	4654      	mov	r4, sl
 800d02c:	2000      	movs	r0, #0
 800d02e:	f04f 0c0a 	mov.w	ip, #10
 800d032:	4621      	mov	r1, r4
 800d034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d038:	3b30      	subs	r3, #48	; 0x30
 800d03a:	2b09      	cmp	r3, #9
 800d03c:	d94e      	bls.n	800d0dc <_vfiprintf_r+0x1c4>
 800d03e:	b1b0      	cbz	r0, 800d06e <_vfiprintf_r+0x156>
 800d040:	9207      	str	r2, [sp, #28]
 800d042:	e014      	b.n	800d06e <_vfiprintf_r+0x156>
 800d044:	eba0 0308 	sub.w	r3, r0, r8
 800d048:	fa09 f303 	lsl.w	r3, r9, r3
 800d04c:	4313      	orrs	r3, r2
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	46a2      	mov	sl, r4
 800d052:	e7d2      	b.n	800cffa <_vfiprintf_r+0xe2>
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	1d19      	adds	r1, r3, #4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	9103      	str	r1, [sp, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bfbb      	ittet	lt
 800d060:	425b      	neglt	r3, r3
 800d062:	f042 0202 	orrlt.w	r2, r2, #2
 800d066:	9307      	strge	r3, [sp, #28]
 800d068:	9307      	strlt	r3, [sp, #28]
 800d06a:	bfb8      	it	lt
 800d06c:	9204      	strlt	r2, [sp, #16]
 800d06e:	7823      	ldrb	r3, [r4, #0]
 800d070:	2b2e      	cmp	r3, #46	; 0x2e
 800d072:	d10c      	bne.n	800d08e <_vfiprintf_r+0x176>
 800d074:	7863      	ldrb	r3, [r4, #1]
 800d076:	2b2a      	cmp	r3, #42	; 0x2a
 800d078:	d135      	bne.n	800d0e6 <_vfiprintf_r+0x1ce>
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	1d1a      	adds	r2, r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	9203      	str	r2, [sp, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	bfb8      	it	lt
 800d086:	f04f 33ff 	movlt.w	r3, #4294967295
 800d08a:	3402      	adds	r4, #2
 800d08c:	9305      	str	r3, [sp, #20]
 800d08e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d174 <_vfiprintf_r+0x25c>
 800d092:	7821      	ldrb	r1, [r4, #0]
 800d094:	2203      	movs	r2, #3
 800d096:	4650      	mov	r0, sl
 800d098:	f7f3 f92a 	bl	80002f0 <memchr>
 800d09c:	b140      	cbz	r0, 800d0b0 <_vfiprintf_r+0x198>
 800d09e:	2340      	movs	r3, #64	; 0x40
 800d0a0:	eba0 000a 	sub.w	r0, r0, sl
 800d0a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d0a8:	9b04      	ldr	r3, [sp, #16]
 800d0aa:	4303      	orrs	r3, r0
 800d0ac:	3401      	adds	r4, #1
 800d0ae:	9304      	str	r3, [sp, #16]
 800d0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b4:	482c      	ldr	r0, [pc, #176]	; (800d168 <_vfiprintf_r+0x250>)
 800d0b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0ba:	2206      	movs	r2, #6
 800d0bc:	f7f3 f918 	bl	80002f0 <memchr>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d03f      	beq.n	800d144 <_vfiprintf_r+0x22c>
 800d0c4:	4b29      	ldr	r3, [pc, #164]	; (800d16c <_vfiprintf_r+0x254>)
 800d0c6:	bb1b      	cbnz	r3, 800d110 <_vfiprintf_r+0x1f8>
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	3307      	adds	r3, #7
 800d0cc:	f023 0307 	bic.w	r3, r3, #7
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d6:	443b      	add	r3, r7
 800d0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0da:	e767      	b.n	800cfac <_vfiprintf_r+0x94>
 800d0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	2001      	movs	r0, #1
 800d0e4:	e7a5      	b.n	800d032 <_vfiprintf_r+0x11a>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	9305      	str	r3, [sp, #20]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f04f 0c0a 	mov.w	ip, #10
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f8:	3a30      	subs	r2, #48	; 0x30
 800d0fa:	2a09      	cmp	r2, #9
 800d0fc:	d903      	bls.n	800d106 <_vfiprintf_r+0x1ee>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d0c5      	beq.n	800d08e <_vfiprintf_r+0x176>
 800d102:	9105      	str	r1, [sp, #20]
 800d104:	e7c3      	b.n	800d08e <_vfiprintf_r+0x176>
 800d106:	fb0c 2101 	mla	r1, ip, r1, r2
 800d10a:	4604      	mov	r4, r0
 800d10c:	2301      	movs	r3, #1
 800d10e:	e7f0      	b.n	800d0f2 <_vfiprintf_r+0x1da>
 800d110:	ab03      	add	r3, sp, #12
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	462a      	mov	r2, r5
 800d116:	4b16      	ldr	r3, [pc, #88]	; (800d170 <_vfiprintf_r+0x258>)
 800d118:	a904      	add	r1, sp, #16
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7fd fd24 	bl	800ab68 <_printf_float>
 800d120:	4607      	mov	r7, r0
 800d122:	1c78      	adds	r0, r7, #1
 800d124:	d1d6      	bne.n	800d0d4 <_vfiprintf_r+0x1bc>
 800d126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d128:	07d9      	lsls	r1, r3, #31
 800d12a:	d405      	bmi.n	800d138 <_vfiprintf_r+0x220>
 800d12c:	89ab      	ldrh	r3, [r5, #12]
 800d12e:	059a      	lsls	r2, r3, #22
 800d130:	d402      	bmi.n	800d138 <_vfiprintf_r+0x220>
 800d132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d134:	f7ff f9d0 	bl	800c4d8 <__retarget_lock_release_recursive>
 800d138:	89ab      	ldrh	r3, [r5, #12]
 800d13a:	065b      	lsls	r3, r3, #25
 800d13c:	f53f af12 	bmi.w	800cf64 <_vfiprintf_r+0x4c>
 800d140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d142:	e711      	b.n	800cf68 <_vfiprintf_r+0x50>
 800d144:	ab03      	add	r3, sp, #12
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	462a      	mov	r2, r5
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <_vfiprintf_r+0x258>)
 800d14c:	a904      	add	r1, sp, #16
 800d14e:	4630      	mov	r0, r6
 800d150:	f7fd ff96 	bl	800b080 <_printf_i>
 800d154:	e7e4      	b.n	800d120 <_vfiprintf_r+0x208>
 800d156:	bf00      	nop
 800d158:	0800f010 	.word	0x0800f010
 800d15c:	0800f030 	.word	0x0800f030
 800d160:	0800eff0 	.word	0x0800eff0
 800d164:	0800f1ac 	.word	0x0800f1ac
 800d168:	0800f1b6 	.word	0x0800f1b6
 800d16c:	0800ab69 	.word	0x0800ab69
 800d170:	0800cef3 	.word	0x0800cef3
 800d174:	0800f1b2 	.word	0x0800f1b2

0800d178 <_sbrk_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d06      	ldr	r5, [pc, #24]	; (800d194 <_sbrk_r+0x1c>)
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	602b      	str	r3, [r5, #0]
 800d184:	f7f8 fca0 	bl	8005ac8 <_sbrk>
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	d102      	bne.n	800d192 <_sbrk_r+0x1a>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	b103      	cbz	r3, 800d192 <_sbrk_r+0x1a>
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	2400055c 	.word	0x2400055c

0800d198 <__sread>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	460c      	mov	r4, r1
 800d19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a0:	f000 f8e2 	bl	800d368 <_read_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	bfab      	itete	ge
 800d1a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d1ac:	181b      	addge	r3, r3, r0
 800d1ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1b2:	bfac      	ite	ge
 800d1b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1b6:	81a3      	strhlt	r3, [r4, #12]
 800d1b8:	bd10      	pop	{r4, pc}

0800d1ba <__swrite>:
 800d1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1be:	461f      	mov	r7, r3
 800d1c0:	898b      	ldrh	r3, [r1, #12]
 800d1c2:	05db      	lsls	r3, r3, #23
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	d505      	bpl.n	800d1d8 <__swrite+0x1e>
 800d1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f000 f898 	bl	800d308 <_lseek_r>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1e2:	81a3      	strh	r3, [r4, #12]
 800d1e4:	4632      	mov	r2, r6
 800d1e6:	463b      	mov	r3, r7
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ee:	f000 b817 	b.w	800d220 <_write_r>

0800d1f2 <__sseek>:
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fa:	f000 f885 	bl	800d308 <_lseek_r>
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	bf15      	itete	ne
 800d204:	6560      	strne	r0, [r4, #84]	; 0x54
 800d206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d20a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d20e:	81a3      	strheq	r3, [r4, #12]
 800d210:	bf18      	it	ne
 800d212:	81a3      	strhne	r3, [r4, #12]
 800d214:	bd10      	pop	{r4, pc}

0800d216 <__sclose>:
 800d216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21a:	f000 b831 	b.w	800d280 <_close_r>
	...

0800d220 <_write_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4d07      	ldr	r5, [pc, #28]	; (800d240 <_write_r+0x20>)
 800d224:	4604      	mov	r4, r0
 800d226:	4608      	mov	r0, r1
 800d228:	4611      	mov	r1, r2
 800d22a:	2200      	movs	r2, #0
 800d22c:	602a      	str	r2, [r5, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	f7f6 fe14 	bl	8003e5c <_write>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_write_r+0x1e>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_write_r+0x1e>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	2400055c 	.word	0x2400055c

0800d244 <__assert_func>:
 800d244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d246:	4614      	mov	r4, r2
 800d248:	461a      	mov	r2, r3
 800d24a:	4b09      	ldr	r3, [pc, #36]	; (800d270 <__assert_func+0x2c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4605      	mov	r5, r0
 800d250:	68d8      	ldr	r0, [r3, #12]
 800d252:	b14c      	cbz	r4, 800d268 <__assert_func+0x24>
 800d254:	4b07      	ldr	r3, [pc, #28]	; (800d274 <__assert_func+0x30>)
 800d256:	9100      	str	r1, [sp, #0]
 800d258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d25c:	4906      	ldr	r1, [pc, #24]	; (800d278 <__assert_func+0x34>)
 800d25e:	462b      	mov	r3, r5
 800d260:	f000 f81e 	bl	800d2a0 <fiprintf>
 800d264:	f000 f89f 	bl	800d3a6 <abort>
 800d268:	4b04      	ldr	r3, [pc, #16]	; (800d27c <__assert_func+0x38>)
 800d26a:	461c      	mov	r4, r3
 800d26c:	e7f3      	b.n	800d256 <__assert_func+0x12>
 800d26e:	bf00      	nop
 800d270:	24000034 	.word	0x24000034
 800d274:	0800f1bd 	.word	0x0800f1bd
 800d278:	0800f1ca 	.word	0x0800f1ca
 800d27c:	0800f1f8 	.word	0x0800f1f8

0800d280 <_close_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4d06      	ldr	r5, [pc, #24]	; (800d29c <_close_r+0x1c>)
 800d284:	2300      	movs	r3, #0
 800d286:	4604      	mov	r4, r0
 800d288:	4608      	mov	r0, r1
 800d28a:	602b      	str	r3, [r5, #0]
 800d28c:	f7f8 fbe7 	bl	8005a5e <_close>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	d102      	bne.n	800d29a <_close_r+0x1a>
 800d294:	682b      	ldr	r3, [r5, #0]
 800d296:	b103      	cbz	r3, 800d29a <_close_r+0x1a>
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	2400055c 	.word	0x2400055c

0800d2a0 <fiprintf>:
 800d2a0:	b40e      	push	{r1, r2, r3}
 800d2a2:	b503      	push	{r0, r1, lr}
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	ab03      	add	r3, sp, #12
 800d2a8:	4805      	ldr	r0, [pc, #20]	; (800d2c0 <fiprintf+0x20>)
 800d2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ae:	6800      	ldr	r0, [r0, #0]
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	f7ff fe31 	bl	800cf18 <_vfiprintf_r>
 800d2b6:	b002      	add	sp, #8
 800d2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2bc:	b003      	add	sp, #12
 800d2be:	4770      	bx	lr
 800d2c0:	24000034 	.word	0x24000034

0800d2c4 <_fstat_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4d07      	ldr	r5, [pc, #28]	; (800d2e4 <_fstat_r+0x20>)
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	4608      	mov	r0, r1
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	f7f8 fbd0 	bl	8005a76 <_fstat>
 800d2d6:	1c43      	adds	r3, r0, #1
 800d2d8:	d102      	bne.n	800d2e0 <_fstat_r+0x1c>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	b103      	cbz	r3, 800d2e0 <_fstat_r+0x1c>
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	bd38      	pop	{r3, r4, r5, pc}
 800d2e2:	bf00      	nop
 800d2e4:	2400055c 	.word	0x2400055c

0800d2e8 <_isatty_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d06      	ldr	r5, [pc, #24]	; (800d304 <_isatty_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f8 fbcf 	bl	8005a96 <_isatty>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_isatty_r+0x1a>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_isatty_r+0x1a>
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	2400055c 	.word	0x2400055c

0800d308 <_lseek_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4d07      	ldr	r5, [pc, #28]	; (800d328 <_lseek_r+0x20>)
 800d30c:	4604      	mov	r4, r0
 800d30e:	4608      	mov	r0, r1
 800d310:	4611      	mov	r1, r2
 800d312:	2200      	movs	r2, #0
 800d314:	602a      	str	r2, [r5, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	f7f8 fbc8 	bl	8005aac <_lseek>
 800d31c:	1c43      	adds	r3, r0, #1
 800d31e:	d102      	bne.n	800d326 <_lseek_r+0x1e>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	b103      	cbz	r3, 800d326 <_lseek_r+0x1e>
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	2400055c 	.word	0x2400055c

0800d32c <__ascii_mbtowc>:
 800d32c:	b082      	sub	sp, #8
 800d32e:	b901      	cbnz	r1, 800d332 <__ascii_mbtowc+0x6>
 800d330:	a901      	add	r1, sp, #4
 800d332:	b142      	cbz	r2, 800d346 <__ascii_mbtowc+0x1a>
 800d334:	b14b      	cbz	r3, 800d34a <__ascii_mbtowc+0x1e>
 800d336:	7813      	ldrb	r3, [r2, #0]
 800d338:	600b      	str	r3, [r1, #0]
 800d33a:	7812      	ldrb	r2, [r2, #0]
 800d33c:	1e10      	subs	r0, r2, #0
 800d33e:	bf18      	it	ne
 800d340:	2001      	movne	r0, #1
 800d342:	b002      	add	sp, #8
 800d344:	4770      	bx	lr
 800d346:	4610      	mov	r0, r2
 800d348:	e7fb      	b.n	800d342 <__ascii_mbtowc+0x16>
 800d34a:	f06f 0001 	mvn.w	r0, #1
 800d34e:	e7f8      	b.n	800d342 <__ascii_mbtowc+0x16>

0800d350 <__malloc_lock>:
 800d350:	4801      	ldr	r0, [pc, #4]	; (800d358 <__malloc_lock+0x8>)
 800d352:	f7ff b8c0 	b.w	800c4d6 <__retarget_lock_acquire_recursive>
 800d356:	bf00      	nop
 800d358:	24000550 	.word	0x24000550

0800d35c <__malloc_unlock>:
 800d35c:	4801      	ldr	r0, [pc, #4]	; (800d364 <__malloc_unlock+0x8>)
 800d35e:	f7ff b8bb 	b.w	800c4d8 <__retarget_lock_release_recursive>
 800d362:	bf00      	nop
 800d364:	24000550 	.word	0x24000550

0800d368 <_read_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	; (800d388 <_read_r+0x20>)
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f7f8 fb54 	bl	8005a24 <_read>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_read_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_read_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	2400055c 	.word	0x2400055c

0800d38c <__ascii_wctomb>:
 800d38c:	b149      	cbz	r1, 800d3a2 <__ascii_wctomb+0x16>
 800d38e:	2aff      	cmp	r2, #255	; 0xff
 800d390:	bf85      	ittet	hi
 800d392:	238a      	movhi	r3, #138	; 0x8a
 800d394:	6003      	strhi	r3, [r0, #0]
 800d396:	700a      	strbls	r2, [r1, #0]
 800d398:	f04f 30ff 	movhi.w	r0, #4294967295
 800d39c:	bf98      	it	ls
 800d39e:	2001      	movls	r0, #1
 800d3a0:	4770      	bx	lr
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4770      	bx	lr

0800d3a6 <abort>:
 800d3a6:	b508      	push	{r3, lr}
 800d3a8:	2006      	movs	r0, #6
 800d3aa:	f000 f82b 	bl	800d404 <raise>
 800d3ae:	2001      	movs	r0, #1
 800d3b0:	f7f8 fb2e 	bl	8005a10 <_exit>

0800d3b4 <_raise_r>:
 800d3b4:	291f      	cmp	r1, #31
 800d3b6:	b538      	push	{r3, r4, r5, lr}
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	d904      	bls.n	800d3c8 <_raise_r+0x14>
 800d3be:	2316      	movs	r3, #22
 800d3c0:	6003      	str	r3, [r0, #0]
 800d3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3ca:	b112      	cbz	r2, 800d3d2 <_raise_r+0x1e>
 800d3cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3d0:	b94b      	cbnz	r3, 800d3e6 <_raise_r+0x32>
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f830 	bl	800d438 <_getpid_r>
 800d3d8:	462a      	mov	r2, r5
 800d3da:	4601      	mov	r1, r0
 800d3dc:	4620      	mov	r0, r4
 800d3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e2:	f000 b817 	b.w	800d414 <_kill_r>
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d00a      	beq.n	800d400 <_raise_r+0x4c>
 800d3ea:	1c59      	adds	r1, r3, #1
 800d3ec:	d103      	bne.n	800d3f6 <_raise_r+0x42>
 800d3ee:	2316      	movs	r3, #22
 800d3f0:	6003      	str	r3, [r0, #0]
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	e7e7      	b.n	800d3c6 <_raise_r+0x12>
 800d3f6:	2400      	movs	r4, #0
 800d3f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	4798      	blx	r3
 800d400:	2000      	movs	r0, #0
 800d402:	e7e0      	b.n	800d3c6 <_raise_r+0x12>

0800d404 <raise>:
 800d404:	4b02      	ldr	r3, [pc, #8]	; (800d410 <raise+0xc>)
 800d406:	4601      	mov	r1, r0
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	f7ff bfd3 	b.w	800d3b4 <_raise_r>
 800d40e:	bf00      	nop
 800d410:	24000034 	.word	0x24000034

0800d414 <_kill_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d07      	ldr	r5, [pc, #28]	; (800d434 <_kill_r+0x20>)
 800d418:	2300      	movs	r3, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	4611      	mov	r1, r2
 800d420:	602b      	str	r3, [r5, #0]
 800d422:	f7f8 fae5 	bl	80059f0 <_kill>
 800d426:	1c43      	adds	r3, r0, #1
 800d428:	d102      	bne.n	800d430 <_kill_r+0x1c>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b103      	cbz	r3, 800d430 <_kill_r+0x1c>
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	bd38      	pop	{r3, r4, r5, pc}
 800d432:	bf00      	nop
 800d434:	2400055c 	.word	0x2400055c

0800d438 <_getpid_r>:
 800d438:	f7f8 bad2 	b.w	80059e0 <_getpid>

0800d43c <sinf_poly>:
 800d43c:	07cb      	lsls	r3, r1, #31
 800d43e:	d412      	bmi.n	800d466 <sinf_poly+0x2a>
 800d440:	ee21 5b00 	vmul.f64	d5, d1, d0
 800d444:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800d448:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800d44c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800d450:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800d454:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d458:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d45c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800d460:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d464:	4770      	bx	lr
 800d466:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800d46a:	ee21 5b01 	vmul.f64	d5, d1, d1
 800d46e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800d472:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800d476:	eea1 7b06 	vfma.f64	d7, d1, d6
 800d47a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800d47e:	eea1 0b06 	vfma.f64	d0, d1, d6
 800d482:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800d486:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d48a:	eea5 0b06 	vfma.f64	d0, d5, d6
 800d48e:	e7e5      	b.n	800d45c <sinf_poly+0x20>

0800d490 <cosf>:
 800d490:	b538      	push	{r3, r4, r5, lr}
 800d492:	ee10 4a10 	vmov	r4, s0
 800d496:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d49a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800d49e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800d4a2:	d21f      	bcs.n	800d4e4 <cosf+0x54>
 800d4a4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800d4a8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800d4ac:	f0c0 8088 	bcc.w	800d5c0 <cosf+0x130>
 800d4b0:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d4b4:	4b46      	ldr	r3, [pc, #280]	; (800d5d0 <cosf+0x140>)
 800d4b6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 800d4ba:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800d4be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800d4c2:	eea0 6b05 	vfma.f64	d6, d0, d5
 800d4c6:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800d4ca:	eea0 7b05 	vfma.f64	d7, d0, d5
 800d4ce:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800d4d2:	ee20 0b04 	vmul.f64	d0, d0, d4
 800d4d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d4da:	eea6 7b00 	vfma.f64	d7, d6, d0
 800d4de:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	f240 422e 	movw	r2, #1070	; 0x42e
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d82b      	bhi.n	800d544 <cosf+0xb4>
 800d4ec:	4b38      	ldr	r3, [pc, #224]	; (800d5d0 <cosf+0x140>)
 800d4ee:	ed93 6b08 	vldr	d6, [r3, #32]
 800d4f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d4f6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800d4fa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d4fe:	ee16 1a90 	vmov	r1, s13
 800d502:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800d506:	1609      	asrs	r1, r1, #24
 800d508:	ee06 1a90 	vmov	s13, r1
 800d50c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d510:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800d514:	f001 0203 	and.w	r2, r1, #3
 800d518:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d51c:	eea5 7b46 	vfms.f64	d7, d5, d6
 800d520:	eeb0 0b47 	vmov.f64	d0, d7
 800d524:	ed92 7b00 	vldr	d7, [r2]
 800d528:	ee20 1b00 	vmul.f64	d1, d0, d0
 800d52c:	f011 0f02 	tst.w	r1, #2
 800d530:	bf08      	it	eq
 800d532:	4618      	moveq	r0, r3
 800d534:	f081 0101 	eor.w	r1, r1, #1
 800d538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d540:	f7ff bf7c 	b.w	800d43c <sinf_poly>
 800d544:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800d548:	d236      	bcs.n	800d5b8 <cosf+0x128>
 800d54a:	4a22      	ldr	r2, [pc, #136]	; (800d5d4 <cosf+0x144>)
 800d54c:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800d550:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800d554:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800d558:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800d55c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d560:	4083      	lsls	r3, r0
 800d562:	6a28      	ldr	r0, [r5, #32]
 800d564:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d568:	fba3 1000 	umull	r1, r0, r3, r0
 800d56c:	6929      	ldr	r1, [r5, #16]
 800d56e:	435a      	muls	r2, r3
 800d570:	fbe3 0201 	umlal	r0, r2, r3, r1
 800d574:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800d578:	0f8d      	lsrs	r5, r1, #30
 800d57a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800d57e:	1a51      	subs	r1, r2, r1
 800d580:	f7f3 f894 	bl	80006ac <__aeabi_l2d>
 800d584:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800d588:	4b11      	ldr	r3, [pc, #68]	; (800d5d0 <cosf+0x140>)
 800d58a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800d5c8 <cosf+0x138>
 800d58e:	ec41 0b16 	vmov	d6, r0, r1
 800d592:	f004 0203 	and.w	r2, r4, #3
 800d596:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d59a:	f014 0f02 	tst.w	r4, #2
 800d59e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d5a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d5a6:	ed92 0b00 	vldr	d0, [r2]
 800d5aa:	ee27 1b07 	vmul.f64	d1, d7, d7
 800d5ae:	f085 0101 	eor.w	r1, r5, #1
 800d5b2:	bf08      	it	eq
 800d5b4:	4618      	moveq	r0, r3
 800d5b6:	e7bf      	b.n	800d538 <cosf+0xa8>
 800d5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5bc:	f000 b817 	b.w	800d5ee <__math_invalidf>
 800d5c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5c4:	e78d      	b.n	800d4e2 <cosf+0x52>
 800d5c6:	bf00      	nop
 800d5c8:	54442d18 	.word	0x54442d18
 800d5cc:	3c1921fb 	.word	0x3c1921fb
 800d5d0:	080103b0 	.word	0x080103b0
 800d5d4:	08010350 	.word	0x08010350

0800d5d8 <with_errnof>:
 800d5d8:	b513      	push	{r0, r1, r4, lr}
 800d5da:	4604      	mov	r4, r0
 800d5dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d5e0:	f7fd fa00 	bl	800a9e4 <__errno>
 800d5e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d5e8:	6004      	str	r4, [r0, #0]
 800d5ea:	b002      	add	sp, #8
 800d5ec:	bd10      	pop	{r4, pc}

0800d5ee <__math_invalidf>:
 800d5ee:	eef0 7a40 	vmov.f32	s15, s0
 800d5f2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d5f6:	eef4 7a67 	vcmp.f32	s15, s15
 800d5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fe:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d602:	d602      	bvs.n	800d60a <__math_invalidf+0x1c>
 800d604:	2021      	movs	r0, #33	; 0x21
 800d606:	f7ff bfe7 	b.w	800d5d8 <with_errnof>
 800d60a:	4770      	bx	lr

0800d60c <checkint>:
 800d60c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d610:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800d614:	429a      	cmp	r2, r3
 800d616:	b570      	push	{r4, r5, r6, lr}
 800d618:	dd2a      	ble.n	800d670 <checkint+0x64>
 800d61a:	f240 4333 	movw	r3, #1075	; 0x433
 800d61e:	429a      	cmp	r2, r3
 800d620:	dc24      	bgt.n	800d66c <checkint+0x60>
 800d622:	1a9b      	subs	r3, r3, r2
 800d624:	f1a3 0620 	sub.w	r6, r3, #32
 800d628:	f04f 32ff 	mov.w	r2, #4294967295
 800d62c:	fa02 f403 	lsl.w	r4, r2, r3
 800d630:	fa02 f606 	lsl.w	r6, r2, r6
 800d634:	f1c3 0520 	rsb	r5, r3, #32
 800d638:	fa22 f505 	lsr.w	r5, r2, r5
 800d63c:	4334      	orrs	r4, r6
 800d63e:	432c      	orrs	r4, r5
 800d640:	409a      	lsls	r2, r3
 800d642:	ea20 0202 	bic.w	r2, r0, r2
 800d646:	ea21 0404 	bic.w	r4, r1, r4
 800d64a:	4322      	orrs	r2, r4
 800d64c:	f1a3 0420 	sub.w	r4, r3, #32
 800d650:	f1c3 0220 	rsb	r2, r3, #32
 800d654:	d10c      	bne.n	800d670 <checkint+0x64>
 800d656:	40d8      	lsrs	r0, r3
 800d658:	fa01 f302 	lsl.w	r3, r1, r2
 800d65c:	4318      	orrs	r0, r3
 800d65e:	40e1      	lsrs	r1, r4
 800d660:	4308      	orrs	r0, r1
 800d662:	f000 0001 	and.w	r0, r0, #1
 800d666:	f1d0 0002 	rsbs	r0, r0, #2
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	2002      	movs	r0, #2
 800d66e:	e7fc      	b.n	800d66a <checkint+0x5e>
 800d670:	2000      	movs	r0, #0
 800d672:	e7fa      	b.n	800d66a <checkint+0x5e>
 800d674:	0000      	movs	r0, r0
	...

0800d678 <pow>:
 800d678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	ee10 4a90 	vmov	r4, s1
 800d680:	ed2d 8b0a 	vpush	{d8-d12}
 800d684:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800d688:	ee11 7a90 	vmov	r7, s3
 800d68c:	f10a 32ff 	add.w	r2, sl, #4294967295
 800d690:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800d694:	429a      	cmp	r2, r3
 800d696:	ee10 6a10 	vmov	r6, s0
 800d69a:	ee11 0a10 	vmov	r0, s2
 800d69e:	b086      	sub	sp, #24
 800d6a0:	46d4      	mov	ip, sl
 800d6a2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800d6a6:	d806      	bhi.n	800d6b6 <pow+0x3e>
 800d6a8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800d6ac:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800d6b0:	2b7f      	cmp	r3, #127	; 0x7f
 800d6b2:	f240 8156 	bls.w	800d962 <pow+0x2ea>
 800d6b6:	1802      	adds	r2, r0, r0
 800d6b8:	eb47 0107 	adc.w	r1, r7, r7
 800d6bc:	f06f 0e01 	mvn.w	lr, #1
 800d6c0:	f112 39ff 	adds.w	r9, r2, #4294967295
 800d6c4:	f141 38ff 	adc.w	r8, r1, #4294967295
 800d6c8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800d6cc:	45ce      	cmp	lr, r9
 800d6ce:	eb73 0808 	sbcs.w	r8, r3, r8
 800d6d2:	d23f      	bcs.n	800d754 <pow+0xdc>
 800d6d4:	ea52 0301 	orrs.w	r3, r2, r1
 800d6d8:	f04f 0300 	mov.w	r3, #0
 800d6dc:	d10c      	bne.n	800d6f8 <pow+0x80>
 800d6de:	19b6      	adds	r6, r6, r6
 800d6e0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800d6e4:	4164      	adcs	r4, r4
 800d6e6:	42b3      	cmp	r3, r6
 800d6e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d6ec:	41a3      	sbcs	r3, r4
 800d6ee:	f0c0 808c 	bcc.w	800d80a <pow+0x192>
 800d6f2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d6f6:	e028      	b.n	800d74a <pow+0xd2>
 800d6f8:	4da3      	ldr	r5, [pc, #652]	; (800d988 <pow+0x310>)
 800d6fa:	42ac      	cmp	r4, r5
 800d6fc:	bf08      	it	eq
 800d6fe:	429e      	cmpeq	r6, r3
 800d700:	d107      	bne.n	800d712 <pow+0x9a>
 800d702:	1800      	adds	r0, r0, r0
 800d704:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800d708:	417f      	adcs	r7, r7
 800d70a:	4283      	cmp	r3, r0
 800d70c:	4b9f      	ldr	r3, [pc, #636]	; (800d98c <pow+0x314>)
 800d70e:	41bb      	sbcs	r3, r7
 800d710:	e7ed      	b.n	800d6ee <pow+0x76>
 800d712:	19b6      	adds	r6, r6, r6
 800d714:	489e      	ldr	r0, [pc, #632]	; (800d990 <pow+0x318>)
 800d716:	4164      	adcs	r4, r4
 800d718:	42b3      	cmp	r3, r6
 800d71a:	eb70 0504 	sbcs.w	r5, r0, r4
 800d71e:	d374      	bcc.n	800d80a <pow+0x192>
 800d720:	4281      	cmp	r1, r0
 800d722:	bf08      	it	eq
 800d724:	429a      	cmpeq	r2, r3
 800d726:	d170      	bne.n	800d80a <pow+0x192>
 800d728:	4a9a      	ldr	r2, [pc, #616]	; (800d994 <pow+0x31c>)
 800d72a:	4294      	cmp	r4, r2
 800d72c:	bf08      	it	eq
 800d72e:	429e      	cmpeq	r6, r3
 800d730:	d0df      	beq.n	800d6f2 <pow+0x7a>
 800d732:	4294      	cmp	r4, r2
 800d734:	ea6f 0707 	mvn.w	r7, r7
 800d738:	bf34      	ite	cc
 800d73a:	2400      	movcc	r4, #0
 800d73c:	2401      	movcs	r4, #1
 800d73e:	0fff      	lsrs	r7, r7, #31
 800d740:	42bc      	cmp	r4, r7
 800d742:	f040 81d9 	bne.w	800daf8 <pow+0x480>
 800d746:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d74a:	b006      	add	sp, #24
 800d74c:	ecbd 8b0a 	vpop	{d8-d12}
 800d750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d754:	eb16 0806 	adds.w	r8, r6, r6
 800d758:	eb44 0904 	adc.w	r9, r4, r4
 800d75c:	f118 31ff 	adds.w	r1, r8, #4294967295
 800d760:	f169 0200 	sbc.w	r2, r9, #0
 800d764:	458e      	cmp	lr, r1
 800d766:	4193      	sbcs	r3, r2
 800d768:	d223      	bcs.n	800d7b2 <pow+0x13a>
 800d76a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d76e:	2c00      	cmp	r4, #0
 800d770:	da12      	bge.n	800d798 <pow+0x120>
 800d772:	4639      	mov	r1, r7
 800d774:	f7ff ff4a 	bl	800d60c <checkint>
 800d778:	2801      	cmp	r0, #1
 800d77a:	d10d      	bne.n	800d798 <pow+0x120>
 800d77c:	eeb1 0b40 	vneg.f64	d0, d0
 800d780:	ea58 0309 	orrs.w	r3, r8, r9
 800d784:	d10a      	bne.n	800d79c <pow+0x124>
 800d786:	2f00      	cmp	r7, #0
 800d788:	dadf      	bge.n	800d74a <pow+0xd2>
 800d78a:	b006      	add	sp, #24
 800d78c:	ecbd 8b0a 	vpop	{d8-d12}
 800d790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d794:	f001 b944 	b.w	800ea20 <__math_divzero>
 800d798:	2000      	movs	r0, #0
 800d79a:	e7f1      	b.n	800d780 <pow+0x108>
 800d79c:	2f00      	cmp	r7, #0
 800d79e:	dad4      	bge.n	800d74a <pow+0xd2>
 800d7a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d7a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d7a8:	ed8d 7b00 	vstr	d7, [sp]
 800d7ac:	ed9d 0b00 	vldr	d0, [sp]
 800d7b0:	e7cb      	b.n	800d74a <pow+0xd2>
 800d7b2:	2c00      	cmp	r4, #0
 800d7b4:	da2c      	bge.n	800d810 <pow+0x198>
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f7ff ff28 	bl	800d60c <checkint>
 800d7bc:	b930      	cbnz	r0, 800d7cc <pow+0x154>
 800d7be:	b006      	add	sp, #24
 800d7c0:	ecbd 8b0a 	vpop	{d8-d12}
 800d7c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c8:	f001 b942 	b.w	800ea50 <__math_invalid>
 800d7cc:	2801      	cmp	r0, #1
 800d7ce:	bf14      	ite	ne
 800d7d0:	2000      	movne	r0, #0
 800d7d2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800d7d6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d7da:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800d7de:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800d7e2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800d7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7e8:	d92d      	bls.n	800d846 <pow+0x1ce>
 800d7ea:	4b67      	ldr	r3, [pc, #412]	; (800d988 <pow+0x310>)
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	429c      	cmp	r4, r3
 800d7f0:	bf08      	it	eq
 800d7f2:	4286      	cmpeq	r6, r0
 800d7f4:	f43f af7d 	beq.w	800d6f2 <pow+0x7a>
 800d7f8:	f240 31bd 	movw	r1, #957	; 0x3bd
 800d7fc:	428a      	cmp	r2, r1
 800d7fe:	d80c      	bhi.n	800d81a <pow+0x1a2>
 800d800:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d804:	42b0      	cmp	r0, r6
 800d806:	41a3      	sbcs	r3, r4
 800d808:	d204      	bcs.n	800d814 <pow+0x19c>
 800d80a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d80e:	e79c      	b.n	800d74a <pow+0xd2>
 800d810:	2000      	movs	r0, #0
 800d812:	e7e4      	b.n	800d7de <pow+0x166>
 800d814:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d818:	e797      	b.n	800d74a <pow+0xd2>
 800d81a:	2e01      	cmp	r6, #1
 800d81c:	eb74 0303 	sbcs.w	r3, r4, r3
 800d820:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d824:	bf34      	ite	cc
 800d826:	2301      	movcc	r3, #1
 800d828:	2300      	movcs	r3, #0
 800d82a:	4295      	cmp	r5, r2
 800d82c:	bf8c      	ite	hi
 800d82e:	2500      	movhi	r5, #0
 800d830:	2501      	movls	r5, #1
 800d832:	42ab      	cmp	r3, r5
 800d834:	f000 809d 	beq.w	800d972 <pow+0x2fa>
 800d838:	b006      	add	sp, #24
 800d83a:	ecbd 8b0a 	vpop	{d8-d12}
 800d83e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d842:	f001 b8e5 	b.w	800ea10 <__math_oflow>
 800d846:	f1bc 0f00 	cmp.w	ip, #0
 800d84a:	d10b      	bne.n	800d864 <pow+0x1ec>
 800d84c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800d980 <pow+0x308>
 800d850:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d854:	ec53 2b17 	vmov	r2, r3, d7
 800d858:	ee17 6a10 	vmov	r6, s14
 800d85c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d860:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800d864:	4b4c      	ldr	r3, [pc, #304]	; (800d998 <pow+0x320>)
 800d866:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d86a:	4423      	add	r3, r4
 800d86c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d870:	1519      	asrs	r1, r3, #20
 800d872:	0d1b      	lsrs	r3, r3, #20
 800d874:	051b      	lsls	r3, r3, #20
 800d876:	eba4 0903 	sub.w	r9, r4, r3
 800d87a:	4b48      	ldr	r3, [pc, #288]	; (800d99c <pow+0x324>)
 800d87c:	ee04 1a10 	vmov	s8, r1
 800d880:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800d884:	f1b6 0800 	subs.w	r8, r6, #0
 800d888:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800d88c:	ec49 8b15 	vmov	d5, r8, r9
 800d890:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800d894:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d898:	ed93 7b00 	vldr	d7, [r3]
 800d89c:	ed93 5b02 	vldr	d5, [r3, #8]
 800d8a0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800d8a4:	eea4 2b07 	vfma.f64	d2, d4, d7
 800d8a8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800d8ac:	ee36 ab02 	vadd.f64	d10, d6, d2
 800d8b0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800d8b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d8b8:	ed93 5b04 	vldr	d5, [r3, #16]
 800d8bc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d8c0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d8c4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d8c8:	ed93 4b08 	vldr	d4, [r3, #32]
 800d8cc:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d8d0:	eeb0 9b40 	vmov.f64	d9, d0
 800d8d4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800d8d8:	ed93 5b06 	vldr	d5, [r3, #24]
 800d8dc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800d8e0:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d8e4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800d8e8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d8ec:	ee3a ab48 	vsub.f64	d10, d10, d8
 800d8f0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800d8f4:	ee37 9b09 	vadd.f64	d9, d7, d9
 800d8f8:	ee3a ab00 	vadd.f64	d10, d10, d0
 800d8fc:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d900:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d904:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800d908:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d90c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d910:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d914:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d918:	eeab ab05 	vfma.f64	d10, d11, d5
 800d91c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800d920:	ee21 7b06 	vmul.f64	d7, d1, d6
 800d924:	ee17 3a90 	vmov	r3, s15
 800d928:	eeb0 5b47 	vmov.f64	d5, d7
 800d92c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d930:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d934:	18b2      	adds	r2, r6, r2
 800d936:	2a3e      	cmp	r2, #62	; 0x3e
 800d938:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800d93c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800d940:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800d944:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800d948:	d92b      	bls.n	800d9a2 <pow+0x32a>
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	da0b      	bge.n	800d966 <pow+0x2ee>
 800d94e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d952:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d956:	2800      	cmp	r0, #0
 800d958:	f43f aef7 	beq.w	800d74a <pow+0xd2>
 800d95c:	eeb1 0b40 	vneg.f64	d0, d0
 800d960:	e6f3      	b.n	800d74a <pow+0xd2>
 800d962:	2000      	movs	r0, #0
 800d964:	e77e      	b.n	800d864 <pow+0x1ec>
 800d966:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d96a:	d919      	bls.n	800d9a0 <pow+0x328>
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f6bf af63 	bge.w	800d838 <pow+0x1c0>
 800d972:	b006      	add	sp, #24
 800d974:	ecbd 8b0a 	vpop	{d8-d12}
 800d978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	f001 b840 	b.w	800ea00 <__math_uflow>
 800d980:	00000000 	.word	0x00000000
 800d984:	43300000 	.word	0x43300000
 800d988:	3ff00000 	.word	0x3ff00000
 800d98c:	fff00000 	.word	0xfff00000
 800d990:	ffe00000 	.word	0xffe00000
 800d994:	7fe00000 	.word	0x7fe00000
 800d998:	c0196aab 	.word	0xc0196aab
 800d99c:	0800f308 	.word	0x0800f308
 800d9a0:	2600      	movs	r6, #0
 800d9a2:	495d      	ldr	r1, [pc, #372]	; (800db18 <pow+0x4a0>)
 800d9a4:	ed91 4b02 	vldr	d4, [r1, #8]
 800d9a8:	ed91 3b00 	vldr	d3, [r1]
 800d9ac:	eeb0 6b44 	vmov.f64	d6, d4
 800d9b0:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d9b4:	ee16 5a10 	vmov	r5, s12
 800d9b8:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d9bc:	ed91 4b04 	vldr	d4, [r1, #16]
 800d9c0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d9c4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d9c8:	eeb0 0b47 	vmov.f64	d0, d7
 800d9cc:	ed91 7b06 	vldr	d7, [r1, #24]
 800d9d0:	18dc      	adds	r4, r3, r3
 800d9d2:	f104 030f 	add.w	r3, r4, #15
 800d9d6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d9da:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d9de:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d9e2:	ee35 0b00 	vadd.f64	d0, d5, d0
 800d9e6:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d9ea:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800d9ee:	ed91 5b08 	vldr	d5, [r1, #32]
 800d9f2:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d9f6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d9fa:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d9fe:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800da02:	eea6 7b05 	vfma.f64	d7, d6, d5
 800da06:	ee26 6b06 	vmul.f64	d6, d6, d6
 800da0a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800da0e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800da12:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800da16:	eea0 5b04 	vfma.f64	d5, d0, d4
 800da1a:	1940      	adds	r0, r0, r5
 800da1c:	2700      	movs	r7, #0
 800da1e:	eb17 020c 	adds.w	r2, r7, ip
 800da22:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800da26:	eea6 7b05 	vfma.f64	d7, d6, d5
 800da2a:	2e00      	cmp	r6, #0
 800da2c:	d15f      	bne.n	800daee <pow+0x476>
 800da2e:	42bd      	cmp	r5, r7
 800da30:	db13      	blt.n	800da5a <pow+0x3e2>
 800da32:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800da36:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800da3a:	4610      	mov	r0, r2
 800da3c:	ec41 0b10 	vmov	d0, r0, r1
 800da40:	eea7 0b00 	vfma.f64	d0, d7, d0
 800da44:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800db00 <pow+0x488>
 800da48:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da4c:	b006      	add	sp, #24
 800da4e:	ecbd 8b0a 	vpop	{d8-d12}
 800da52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da56:	f001 b813 	b.w	800ea80 <__math_check_oflow>
 800da5a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800da5e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800da62:	4610      	mov	r0, r2
 800da64:	ec41 0b15 	vmov	d5, r0, r1
 800da68:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800da6c:	ee27 6b05 	vmul.f64	d6, d7, d5
 800da70:	ee35 7b06 	vadd.f64	d7, d5, d6
 800da74:	eeb0 3bc7 	vabs.f64	d3, d7
 800da78:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800db08 <pow+0x490>
 800da84:	d52a      	bpl.n	800dadc <pow+0x464>
 800da86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800da8a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800da96:	ee35 6b06 	vadd.f64	d6, d5, d6
 800da9a:	bf48      	it	mi
 800da9c:	eeb0 4b43 	vmovmi.f64	d4, d3
 800daa0:	ee37 3b04 	vadd.f64	d3, d7, d4
 800daa4:	ee34 5b43 	vsub.f64	d5, d4, d3
 800daa8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800daac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dab0:	ee37 7b03 	vadd.f64	d7, d7, d3
 800dab4:	ee37 7b44 	vsub.f64	d7, d7, d4
 800dab8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac0:	d104      	bne.n	800dacc <pow+0x454>
 800dac2:	4632      	mov	r2, r6
 800dac4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dac8:	ec43 2b17 	vmov	d7, r2, r3
 800dacc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dad0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dad4:	ee26 6b00 	vmul.f64	d6, d6, d0
 800dad8:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dadc:	ee27 0b00 	vmul.f64	d0, d7, d0
 800dae0:	b006      	add	sp, #24
 800dae2:	ecbd 8b0a 	vpop	{d8-d12}
 800dae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daea:	f000 bfc0 	b.w	800ea6e <__math_check_uflow>
 800daee:	ec43 2b10 	vmov	d0, r2, r3
 800daf2:	eea7 0b00 	vfma.f64	d0, d7, d0
 800daf6:	e628      	b.n	800d74a <pow+0xd2>
 800daf8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800db10 <pow+0x498>
 800dafc:	e625      	b.n	800d74a <pow+0xd2>
 800dafe:	bf00      	nop
 800db00:	00000000 	.word	0x00000000
 800db04:	7f000000 	.word	0x7f000000
 800db08:	00000000 	.word	0x00000000
 800db0c:	00100000 	.word	0x00100000
	...
 800db18:	08010840 	.word	0x08010840

0800db1c <tanf>:
 800db1c:	ee10 3a10 	vmov	r3, s0
 800db20:	b507      	push	{r0, r1, r2, lr}
 800db22:	4a12      	ldr	r2, [pc, #72]	; (800db6c <tanf+0x50>)
 800db24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db28:	4293      	cmp	r3, r2
 800db2a:	dc07      	bgt.n	800db3c <tanf+0x20>
 800db2c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800db70 <tanf+0x54>
 800db30:	2001      	movs	r0, #1
 800db32:	b003      	add	sp, #12
 800db34:	f85d eb04 	ldr.w	lr, [sp], #4
 800db38:	f000 be64 	b.w	800e804 <__kernel_tanf>
 800db3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db40:	db04      	blt.n	800db4c <tanf+0x30>
 800db42:	ee30 0a40 	vsub.f32	s0, s0, s0
 800db46:	b003      	add	sp, #12
 800db48:	f85d fb04 	ldr.w	pc, [sp], #4
 800db4c:	4668      	mov	r0, sp
 800db4e:	f000 faa3 	bl	800e098 <__ieee754_rem_pio2f>
 800db52:	0040      	lsls	r0, r0, #1
 800db54:	f000 0002 	and.w	r0, r0, #2
 800db58:	eddd 0a01 	vldr	s1, [sp, #4]
 800db5c:	ed9d 0a00 	vldr	s0, [sp]
 800db60:	f1c0 0001 	rsb	r0, r0, #1
 800db64:	f000 fe4e 	bl	800e804 <__kernel_tanf>
 800db68:	e7ed      	b.n	800db46 <tanf+0x2a>
 800db6a:	bf00      	nop
 800db6c:	3f490fda 	.word	0x3f490fda
 800db70:	00000000 	.word	0x00000000

0800db74 <sinf_poly>:
 800db74:	07cb      	lsls	r3, r1, #31
 800db76:	d412      	bmi.n	800db9e <sinf_poly+0x2a>
 800db78:	ee21 5b00 	vmul.f64	d5, d1, d0
 800db7c:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800db80:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800db84:	eea6 7b01 	vfma.f64	d7, d6, d1
 800db88:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800db8c:	ee21 1b05 	vmul.f64	d1, d1, d5
 800db90:	eea6 0b05 	vfma.f64	d0, d6, d5
 800db94:	eea7 0b01 	vfma.f64	d0, d7, d1
 800db98:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800db9c:	4770      	bx	lr
 800db9e:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800dba2:	ee21 5b01 	vmul.f64	d5, d1, d1
 800dba6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800dbaa:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800dbae:	eea1 7b06 	vfma.f64	d7, d1, d6
 800dbb2:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800dbb6:	eea1 0b06 	vfma.f64	d0, d1, d6
 800dbba:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800dbbe:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dbc2:	eea5 0b06 	vfma.f64	d0, d5, d6
 800dbc6:	e7e5      	b.n	800db94 <sinf_poly+0x20>

0800dbc8 <sinf>:
 800dbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbca:	ee10 4a10 	vmov	r4, s0
 800dbce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800dbd2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800dbd6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800dbda:	eef0 7a40 	vmov.f32	s15, s0
 800dbde:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800dbe2:	d218      	bcs.n	800dc16 <sinf+0x4e>
 800dbe4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800dbe8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800dbec:	d20a      	bcs.n	800dc04 <sinf+0x3c>
 800dbee:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800dbf2:	d103      	bne.n	800dbfc <sinf+0x34>
 800dbf4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800dbf8:	ed8d 1a01 	vstr	s2, [sp, #4]
 800dbfc:	eeb0 0a67 	vmov.f32	s0, s15
 800dc00:	b003      	add	sp, #12
 800dc02:	bd30      	pop	{r4, r5, pc}
 800dc04:	483a      	ldr	r0, [pc, #232]	; (800dcf0 <sinf+0x128>)
 800dc06:	eeb0 0b46 	vmov.f64	d0, d6
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	b003      	add	sp, #12
 800dc0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc12:	f7ff bfaf 	b.w	800db74 <sinf_poly>
 800dc16:	f240 422e 	movw	r2, #1070	; 0x42e
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d824      	bhi.n	800dc68 <sinf+0xa0>
 800dc1e:	4b34      	ldr	r3, [pc, #208]	; (800dcf0 <sinf+0x128>)
 800dc20:	ed93 7b08 	vldr	d7, [r3, #32]
 800dc24:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dc2c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800dc30:	ee17 1a90 	vmov	r1, s15
 800dc34:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800dc38:	1609      	asrs	r1, r1, #24
 800dc3a:	ee07 1a90 	vmov	s15, r1
 800dc3e:	f001 0203 	and.w	r2, r1, #3
 800dc42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dc46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dc4a:	ed92 0b00 	vldr	d0, [r2]
 800dc4e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800dc52:	f011 0f02 	tst.w	r1, #2
 800dc56:	eea5 6b47 	vfms.f64	d6, d5, d7
 800dc5a:	bf08      	it	eq
 800dc5c:	4618      	moveq	r0, r3
 800dc5e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800dc62:	ee20 0b06 	vmul.f64	d0, d0, d6
 800dc66:	e7d1      	b.n	800dc0c <sinf+0x44>
 800dc68:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800dc6c:	d237      	bcs.n	800dcde <sinf+0x116>
 800dc6e:	4a21      	ldr	r2, [pc, #132]	; (800dcf4 <sinf+0x12c>)
 800dc70:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800dc74:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800dc78:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800dc7c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800dc80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc84:	4083      	lsls	r3, r0
 800dc86:	6a28      	ldr	r0, [r5, #32]
 800dc88:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dc8c:	fba3 1000 	umull	r1, r0, r3, r0
 800dc90:	6929      	ldr	r1, [r5, #16]
 800dc92:	435a      	muls	r2, r3
 800dc94:	fbe3 0201 	umlal	r0, r2, r3, r1
 800dc98:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800dc9c:	0f8d      	lsrs	r5, r1, #30
 800dc9e:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800dca2:	1a51      	subs	r1, r2, r1
 800dca4:	f7f2 fd02 	bl	80006ac <__aeabi_l2d>
 800dca8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800dcac:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <sinf+0x128>)
 800dcae:	f004 0203 	and.w	r2, r4, #3
 800dcb2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dcb6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800dce8 <sinf+0x120>
 800dcba:	ed92 0b00 	vldr	d0, [r2]
 800dcbe:	ec41 0b16 	vmov	d6, r0, r1
 800dcc2:	f014 0f02 	tst.w	r4, #2
 800dcc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcca:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800dcce:	4629      	mov	r1, r5
 800dcd0:	bf08      	it	eq
 800dcd2:	4618      	moveq	r0, r3
 800dcd4:	ee27 1b07 	vmul.f64	d1, d7, d7
 800dcd8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dcdc:	e796      	b.n	800dc0c <sinf+0x44>
 800dcde:	b003      	add	sp, #12
 800dce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dce4:	f7ff bc83 	b.w	800d5ee <__math_invalidf>
 800dce8:	54442d18 	.word	0x54442d18
 800dcec:	3c1921fb 	.word	0x3c1921fb
 800dcf0:	080103b0 	.word	0x080103b0
 800dcf4:	08010350 	.word	0x08010350

0800dcf8 <asinf>:
 800dcf8:	b508      	push	{r3, lr}
 800dcfa:	ed2d 8b02 	vpush	{d8}
 800dcfe:	eeb0 8a40 	vmov.f32	s16, s0
 800dd02:	f000 f845 	bl	800dd90 <__ieee754_asinf>
 800dd06:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0e:	eef0 8a40 	vmov.f32	s17, s0
 800dd12:	d615      	bvs.n	800dd40 <asinf+0x48>
 800dd14:	eeb0 0a48 	vmov.f32	s0, s16
 800dd18:	f000 ff9a 	bl	800ec50 <fabsf>
 800dd1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd28:	dd0a      	ble.n	800dd40 <asinf+0x48>
 800dd2a:	f7fc fe5b 	bl	800a9e4 <__errno>
 800dd2e:	ecbd 8b02 	vpop	{d8}
 800dd32:	2321      	movs	r3, #33	; 0x21
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dd3a:	4804      	ldr	r0, [pc, #16]	; (800dd4c <asinf+0x54>)
 800dd3c:	f000 bfd2 	b.w	800ece4 <nanf>
 800dd40:	eeb0 0a68 	vmov.f32	s0, s17
 800dd44:	ecbd 8b02 	vpop	{d8}
 800dd48:	bd08      	pop	{r3, pc}
 800dd4a:	bf00      	nop
 800dd4c:	0800f1f8 	.word	0x0800f1f8

0800dd50 <atan2f>:
 800dd50:	f000 b904 	b.w	800df5c <__ieee754_atan2f>

0800dd54 <sqrtf>:
 800dd54:	b508      	push	{r3, lr}
 800dd56:	ed2d 8b02 	vpush	{d8}
 800dd5a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd5e:	f000 fad7 	bl	800e310 <__ieee754_sqrtf>
 800dd62:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	d60c      	bvs.n	800dd86 <sqrtf+0x32>
 800dd6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dd8c <sqrtf+0x38>
 800dd70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	d505      	bpl.n	800dd86 <sqrtf+0x32>
 800dd7a:	f7fc fe33 	bl	800a9e4 <__errno>
 800dd7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dd82:	2321      	movs	r3, #33	; 0x21
 800dd84:	6003      	str	r3, [r0, #0]
 800dd86:	ecbd 8b02 	vpop	{d8}
 800dd8a:	bd08      	pop	{r3, pc}
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <__ieee754_asinf>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	ee10 5a10 	vmov	r5, s0
 800dd96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dd9a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800dd9e:	ed2d 8b04 	vpush	{d8-d9}
 800dda2:	d10c      	bne.n	800ddbe <__ieee754_asinf+0x2e>
 800dda4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800df1c <__ieee754_asinf+0x18c>
 800dda8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800df20 <__ieee754_asinf+0x190>
 800ddac:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ddb0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ddb4:	eeb0 0a67 	vmov.f32	s0, s15
 800ddb8:	ecbd 8b04 	vpop	{d8-d9}
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	dd04      	ble.n	800ddca <__ieee754_asinf+0x3a>
 800ddc0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ddc4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ddc8:	e7f6      	b.n	800ddb8 <__ieee754_asinf+0x28>
 800ddca:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ddce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ddd2:	da0b      	bge.n	800ddec <__ieee754_asinf+0x5c>
 800ddd4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ddd8:	da52      	bge.n	800de80 <__ieee754_asinf+0xf0>
 800ddda:	eddf 7a52 	vldr	s15, [pc, #328]	; 800df24 <__ieee754_asinf+0x194>
 800ddde:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dde2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800dde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddea:	dce5      	bgt.n	800ddb8 <__ieee754_asinf+0x28>
 800ddec:	f000 ff30 	bl	800ec50 <fabsf>
 800ddf0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ddf4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ddf8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ddfc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800df28 <__ieee754_asinf+0x198>
 800de00:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800df2c <__ieee754_asinf+0x19c>
 800de04:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800df30 <__ieee754_asinf+0x1a0>
 800de08:	eea8 7a27 	vfma.f32	s14, s16, s15
 800de0c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800df34 <__ieee754_asinf+0x1a4>
 800de10:	eee7 7a08 	vfma.f32	s15, s14, s16
 800de14:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800df38 <__ieee754_asinf+0x1a8>
 800de18:	eea7 7a88 	vfma.f32	s14, s15, s16
 800de1c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800df3c <__ieee754_asinf+0x1ac>
 800de20:	eee7 7a08 	vfma.f32	s15, s14, s16
 800de24:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800df40 <__ieee754_asinf+0x1b0>
 800de28:	eea7 9a88 	vfma.f32	s18, s15, s16
 800de2c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800df44 <__ieee754_asinf+0x1b4>
 800de30:	eee8 7a07 	vfma.f32	s15, s16, s14
 800de34:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800df48 <__ieee754_asinf+0x1b8>
 800de38:	eea7 7a88 	vfma.f32	s14, s15, s16
 800de3c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800df4c <__ieee754_asinf+0x1bc>
 800de40:	eee7 7a08 	vfma.f32	s15, s14, s16
 800de44:	eeb0 0a48 	vmov.f32	s0, s16
 800de48:	eee7 8a88 	vfma.f32	s17, s15, s16
 800de4c:	f000 fa60 	bl	800e310 <__ieee754_sqrtf>
 800de50:	4b3f      	ldr	r3, [pc, #252]	; (800df50 <__ieee754_asinf+0x1c0>)
 800de52:	ee29 9a08 	vmul.f32	s18, s18, s16
 800de56:	429c      	cmp	r4, r3
 800de58:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800de5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800de60:	dd3d      	ble.n	800dede <__ieee754_asinf+0x14e>
 800de62:	eea0 0a06 	vfma.f32	s0, s0, s12
 800de66:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800df54 <__ieee754_asinf+0x1c4>
 800de6a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800de6e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800df20 <__ieee754_asinf+0x190>
 800de72:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de76:	2d00      	cmp	r5, #0
 800de78:	bfd8      	it	le
 800de7a:	eeb1 0a40 	vnegle.f32	s0, s0
 800de7e:	e79b      	b.n	800ddb8 <__ieee754_asinf+0x28>
 800de80:	ee60 7a00 	vmul.f32	s15, s0, s0
 800de84:	eddf 6a28 	vldr	s13, [pc, #160]	; 800df28 <__ieee754_asinf+0x198>
 800de88:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800df2c <__ieee754_asinf+0x19c>
 800de8c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800df40 <__ieee754_asinf+0x1b0>
 800de90:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800de94:	eddf 6a27 	vldr	s13, [pc, #156]	; 800df34 <__ieee754_asinf+0x1a4>
 800de98:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800df38 <__ieee754_asinf+0x1a8>
 800dea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dea4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800df3c <__ieee754_asinf+0x1ac>
 800dea8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800deac:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800df30 <__ieee754_asinf+0x1a0>
 800deb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800deb4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800df44 <__ieee754_asinf+0x1b4>
 800deb8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800debc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800df48 <__ieee754_asinf+0x1b8>
 800dec0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dec4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800df4c <__ieee754_asinf+0x1bc>
 800dec8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800decc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ded0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ded4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ded8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800dedc:	e76c      	b.n	800ddb8 <__ieee754_asinf+0x28>
 800dede:	ee10 3a10 	vmov	r3, s0
 800dee2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dee6:	f023 030f 	bic.w	r3, r3, #15
 800deea:	ee07 3a10 	vmov	s14, r3
 800deee:	eea7 8a47 	vfms.f32	s16, s14, s14
 800def2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800def6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800defa:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800defe:	eddf 7a07 	vldr	s15, [pc, #28]	; 800df1c <__ieee754_asinf+0x18c>
 800df02:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800df06:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800df0a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800df58 <__ieee754_asinf+0x1c8>
 800df0e:	eeb0 6a40 	vmov.f32	s12, s0
 800df12:	eea7 6a66 	vfms.f32	s12, s14, s13
 800df16:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800df1a:	e7aa      	b.n	800de72 <__ieee754_asinf+0xe2>
 800df1c:	b33bbd2e 	.word	0xb33bbd2e
 800df20:	3fc90fdb 	.word	0x3fc90fdb
 800df24:	7149f2ca 	.word	0x7149f2ca
 800df28:	3811ef08 	.word	0x3811ef08
 800df2c:	3a4f7f04 	.word	0x3a4f7f04
 800df30:	3e2aaaab 	.word	0x3e2aaaab
 800df34:	bd241146 	.word	0xbd241146
 800df38:	3e4e0aa8 	.word	0x3e4e0aa8
 800df3c:	bea6b090 	.word	0xbea6b090
 800df40:	3d9dc62e 	.word	0x3d9dc62e
 800df44:	bf303361 	.word	0xbf303361
 800df48:	4001572d 	.word	0x4001572d
 800df4c:	c019d139 	.word	0xc019d139
 800df50:	3f799999 	.word	0x3f799999
 800df54:	333bbd2e 	.word	0x333bbd2e
 800df58:	3f490fdb 	.word	0x3f490fdb

0800df5c <__ieee754_atan2f>:
 800df5c:	ee10 2a90 	vmov	r2, s1
 800df60:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800df64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800df68:	b510      	push	{r4, lr}
 800df6a:	eef0 7a40 	vmov.f32	s15, s0
 800df6e:	dc06      	bgt.n	800df7e <__ieee754_atan2f+0x22>
 800df70:	ee10 0a10 	vmov	r0, s0
 800df74:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800df78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df7c:	dd04      	ble.n	800df88 <__ieee754_atan2f+0x2c>
 800df7e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800df82:	eeb0 0a67 	vmov.f32	s0, s15
 800df86:	bd10      	pop	{r4, pc}
 800df88:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800df8c:	d103      	bne.n	800df96 <__ieee754_atan2f+0x3a>
 800df8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df92:	f000 bd89 	b.w	800eaa8 <atanf>
 800df96:	1794      	asrs	r4, r2, #30
 800df98:	f004 0402 	and.w	r4, r4, #2
 800df9c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dfa0:	b93b      	cbnz	r3, 800dfb2 <__ieee754_atan2f+0x56>
 800dfa2:	2c02      	cmp	r4, #2
 800dfa4:	d05c      	beq.n	800e060 <__ieee754_atan2f+0x104>
 800dfa6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e074 <__ieee754_atan2f+0x118>
 800dfaa:	2c03      	cmp	r4, #3
 800dfac:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800dfb0:	e7e7      	b.n	800df82 <__ieee754_atan2f+0x26>
 800dfb2:	b939      	cbnz	r1, 800dfc4 <__ieee754_atan2f+0x68>
 800dfb4:	eddf 7a30 	vldr	s15, [pc, #192]	; 800e078 <__ieee754_atan2f+0x11c>
 800dfb8:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800e07c <__ieee754_atan2f+0x120>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	fe67 7a80 	vselge.f32	s15, s15, s0
 800dfc2:	e7de      	b.n	800df82 <__ieee754_atan2f+0x26>
 800dfc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dfc8:	d110      	bne.n	800dfec <__ieee754_atan2f+0x90>
 800dfca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dfce:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfd2:	d107      	bne.n	800dfe4 <__ieee754_atan2f+0x88>
 800dfd4:	2c02      	cmp	r4, #2
 800dfd6:	d846      	bhi.n	800e066 <__ieee754_atan2f+0x10a>
 800dfd8:	4b29      	ldr	r3, [pc, #164]	; (800e080 <__ieee754_atan2f+0x124>)
 800dfda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfde:	edd4 7a00 	vldr	s15, [r4]
 800dfe2:	e7ce      	b.n	800df82 <__ieee754_atan2f+0x26>
 800dfe4:	2c02      	cmp	r4, #2
 800dfe6:	d841      	bhi.n	800e06c <__ieee754_atan2f+0x110>
 800dfe8:	4b26      	ldr	r3, [pc, #152]	; (800e084 <__ieee754_atan2f+0x128>)
 800dfea:	e7f6      	b.n	800dfda <__ieee754_atan2f+0x7e>
 800dfec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dff0:	d0e0      	beq.n	800dfb4 <__ieee754_atan2f+0x58>
 800dff2:	1a5b      	subs	r3, r3, r1
 800dff4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800dff8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800dffc:	da1a      	bge.n	800e034 <__ieee754_atan2f+0xd8>
 800dffe:	2a00      	cmp	r2, #0
 800e000:	da01      	bge.n	800e006 <__ieee754_atan2f+0xaa>
 800e002:	313c      	adds	r1, #60	; 0x3c
 800e004:	db19      	blt.n	800e03a <__ieee754_atan2f+0xde>
 800e006:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e00a:	f000 fe21 	bl	800ec50 <fabsf>
 800e00e:	f000 fd4b 	bl	800eaa8 <atanf>
 800e012:	eef0 7a40 	vmov.f32	s15, s0
 800e016:	2c01      	cmp	r4, #1
 800e018:	d012      	beq.n	800e040 <__ieee754_atan2f+0xe4>
 800e01a:	2c02      	cmp	r4, #2
 800e01c:	d017      	beq.n	800e04e <__ieee754_atan2f+0xf2>
 800e01e:	2c00      	cmp	r4, #0
 800e020:	d0af      	beq.n	800df82 <__ieee754_atan2f+0x26>
 800e022:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e088 <__ieee754_atan2f+0x12c>
 800e026:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e02a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e08c <__ieee754_atan2f+0x130>
 800e02e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e032:	e7a6      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e034:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e078 <__ieee754_atan2f+0x11c>
 800e038:	e7ed      	b.n	800e016 <__ieee754_atan2f+0xba>
 800e03a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e090 <__ieee754_atan2f+0x134>
 800e03e:	e7ea      	b.n	800e016 <__ieee754_atan2f+0xba>
 800e040:	ee17 3a90 	vmov	r3, s15
 800e044:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e048:	ee07 3a90 	vmov	s15, r3
 800e04c:	e799      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e04e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e088 <__ieee754_atan2f+0x12c>
 800e052:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e056:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e08c <__ieee754_atan2f+0x130>
 800e05a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e05e:	e790      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e060:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e08c <__ieee754_atan2f+0x130>
 800e064:	e78d      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e066:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e094 <__ieee754_atan2f+0x138>
 800e06a:	e78a      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e06c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e090 <__ieee754_atan2f+0x134>
 800e070:	e787      	b.n	800df82 <__ieee754_atan2f+0x26>
 800e072:	bf00      	nop
 800e074:	c0490fdb 	.word	0xc0490fdb
 800e078:	3fc90fdb 	.word	0x3fc90fdb
 800e07c:	bfc90fdb 	.word	0xbfc90fdb
 800e080:	08010490 	.word	0x08010490
 800e084:	0801049c 	.word	0x0801049c
 800e088:	33bbbd2e 	.word	0x33bbbd2e
 800e08c:	40490fdb 	.word	0x40490fdb
 800e090:	00000000 	.word	0x00000000
 800e094:	3f490fdb 	.word	0x3f490fdb

0800e098 <__ieee754_rem_pio2f>:
 800e098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e09a:	ee10 6a10 	vmov	r6, s0
 800e09e:	4b8e      	ldr	r3, [pc, #568]	; (800e2d8 <__ieee754_rem_pio2f+0x240>)
 800e0a0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e0a4:	429d      	cmp	r5, r3
 800e0a6:	b087      	sub	sp, #28
 800e0a8:	eef0 7a40 	vmov.f32	s15, s0
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	dc05      	bgt.n	800e0bc <__ieee754_rem_pio2f+0x24>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	ed80 0a00 	vstr	s0, [r0]
 800e0b6:	6043      	str	r3, [r0, #4]
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	e01a      	b.n	800e0f2 <__ieee754_rem_pio2f+0x5a>
 800e0bc:	4b87      	ldr	r3, [pc, #540]	; (800e2dc <__ieee754_rem_pio2f+0x244>)
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	dc46      	bgt.n	800e150 <__ieee754_rem_pio2f+0xb8>
 800e0c2:	2e00      	cmp	r6, #0
 800e0c4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e2e0 <__ieee754_rem_pio2f+0x248>
 800e0c8:	4b86      	ldr	r3, [pc, #536]	; (800e2e4 <__ieee754_rem_pio2f+0x24c>)
 800e0ca:	f025 050f 	bic.w	r5, r5, #15
 800e0ce:	dd1f      	ble.n	800e110 <__ieee754_rem_pio2f+0x78>
 800e0d0:	429d      	cmp	r5, r3
 800e0d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e0d6:	d00e      	beq.n	800e0f6 <__ieee754_rem_pio2f+0x5e>
 800e0d8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e2e8 <__ieee754_rem_pio2f+0x250>
 800e0dc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e0e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e0e4:	ed80 0a00 	vstr	s0, [r0]
 800e0e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	edc4 7a01 	vstr	s15, [r4, #4]
 800e0f2:	b007      	add	sp, #28
 800e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e2ec <__ieee754_rem_pio2f+0x254>
 800e0fa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e2f0 <__ieee754_rem_pio2f+0x258>
 800e0fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e102:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e106:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e10a:	edc0 6a00 	vstr	s13, [r0]
 800e10e:	e7eb      	b.n	800e0e8 <__ieee754_rem_pio2f+0x50>
 800e110:	429d      	cmp	r5, r3
 800e112:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e116:	d00e      	beq.n	800e136 <__ieee754_rem_pio2f+0x9e>
 800e118:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e2e8 <__ieee754_rem_pio2f+0x250>
 800e11c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e120:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e124:	ed80 0a00 	vstr	s0, [r0]
 800e128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	edc4 7a01 	vstr	s15, [r4, #4]
 800e134:	e7dd      	b.n	800e0f2 <__ieee754_rem_pio2f+0x5a>
 800e136:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e2ec <__ieee754_rem_pio2f+0x254>
 800e13a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e2f0 <__ieee754_rem_pio2f+0x258>
 800e13e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e142:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e146:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e14a:	edc0 6a00 	vstr	s13, [r0]
 800e14e:	e7eb      	b.n	800e128 <__ieee754_rem_pio2f+0x90>
 800e150:	4b68      	ldr	r3, [pc, #416]	; (800e2f4 <__ieee754_rem_pio2f+0x25c>)
 800e152:	429d      	cmp	r5, r3
 800e154:	dc72      	bgt.n	800e23c <__ieee754_rem_pio2f+0x1a4>
 800e156:	f000 fd7b 	bl	800ec50 <fabsf>
 800e15a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e2f8 <__ieee754_rem_pio2f+0x260>
 800e15e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e162:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e16a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e16e:	ee17 0a90 	vmov	r0, s15
 800e172:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e2e0 <__ieee754_rem_pio2f+0x248>
 800e176:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e17a:	281f      	cmp	r0, #31
 800e17c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e2e8 <__ieee754_rem_pio2f+0x250>
 800e180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e184:	eeb1 6a47 	vneg.f32	s12, s14
 800e188:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e18c:	ee16 2a90 	vmov	r2, s13
 800e190:	dc1c      	bgt.n	800e1cc <__ieee754_rem_pio2f+0x134>
 800e192:	495a      	ldr	r1, [pc, #360]	; (800e2fc <__ieee754_rem_pio2f+0x264>)
 800e194:	1e47      	subs	r7, r0, #1
 800e196:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e19a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e19e:	428b      	cmp	r3, r1
 800e1a0:	d014      	beq.n	800e1cc <__ieee754_rem_pio2f+0x134>
 800e1a2:	6022      	str	r2, [r4, #0]
 800e1a4:	ed94 7a00 	vldr	s14, [r4]
 800e1a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1b2:	ed84 0a01 	vstr	s0, [r4, #4]
 800e1b6:	da9c      	bge.n	800e0f2 <__ieee754_rem_pio2f+0x5a>
 800e1b8:	eeb1 7a47 	vneg.f32	s14, s14
 800e1bc:	eeb1 0a40 	vneg.f32	s0, s0
 800e1c0:	ed84 7a00 	vstr	s14, [r4]
 800e1c4:	ed84 0a01 	vstr	s0, [r4, #4]
 800e1c8:	4240      	negs	r0, r0
 800e1ca:	e792      	b.n	800e0f2 <__ieee754_rem_pio2f+0x5a>
 800e1cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e1d0:	15eb      	asrs	r3, r5, #23
 800e1d2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e1d6:	2d08      	cmp	r5, #8
 800e1d8:	dde3      	ble.n	800e1a2 <__ieee754_rem_pio2f+0x10a>
 800e1da:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e2ec <__ieee754_rem_pio2f+0x254>
 800e1de:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e2f0 <__ieee754_rem_pio2f+0x258>
 800e1e2:	eef0 6a40 	vmov.f32	s13, s0
 800e1e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e1ea:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e1ee:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e1f2:	eef0 7a40 	vmov.f32	s15, s0
 800e1f6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e1fa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e1fe:	ee15 2a90 	vmov	r2, s11
 800e202:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e206:	1a5b      	subs	r3, r3, r1
 800e208:	2b19      	cmp	r3, #25
 800e20a:	dc04      	bgt.n	800e216 <__ieee754_rem_pio2f+0x17e>
 800e20c:	edc4 5a00 	vstr	s11, [r4]
 800e210:	eeb0 0a66 	vmov.f32	s0, s13
 800e214:	e7c6      	b.n	800e1a4 <__ieee754_rem_pio2f+0x10c>
 800e216:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e300 <__ieee754_rem_pio2f+0x268>
 800e21a:	eeb0 0a66 	vmov.f32	s0, s13
 800e21e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e222:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e226:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e304 <__ieee754_rem_pio2f+0x26c>
 800e22a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e22e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e232:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e236:	ed84 7a00 	vstr	s14, [r4]
 800e23a:	e7b3      	b.n	800e1a4 <__ieee754_rem_pio2f+0x10c>
 800e23c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e240:	db06      	blt.n	800e250 <__ieee754_rem_pio2f+0x1b8>
 800e242:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e246:	edc0 7a01 	vstr	s15, [r0, #4]
 800e24a:	edc0 7a00 	vstr	s15, [r0]
 800e24e:	e733      	b.n	800e0b8 <__ieee754_rem_pio2f+0x20>
 800e250:	15ea      	asrs	r2, r5, #23
 800e252:	3a86      	subs	r2, #134	; 0x86
 800e254:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e258:	ee07 3a90 	vmov	s15, r3
 800e25c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e260:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e308 <__ieee754_rem_pio2f+0x270>
 800e264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e26c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e274:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e27c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e280:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e284:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e290:	edcd 7a05 	vstr	s15, [sp, #20]
 800e294:	d11e      	bne.n	800e2d4 <__ieee754_rem_pio2f+0x23c>
 800e296:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29e:	bf14      	ite	ne
 800e2a0:	2302      	movne	r3, #2
 800e2a2:	2301      	moveq	r3, #1
 800e2a4:	4919      	ldr	r1, [pc, #100]	; (800e30c <__ieee754_rem_pio2f+0x274>)
 800e2a6:	9101      	str	r1, [sp, #4]
 800e2a8:	2102      	movs	r1, #2
 800e2aa:	9100      	str	r1, [sp, #0]
 800e2ac:	a803      	add	r0, sp, #12
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	f000 f832 	bl	800e318 <__kernel_rem_pio2f>
 800e2b4:	2e00      	cmp	r6, #0
 800e2b6:	f6bf af1c 	bge.w	800e0f2 <__ieee754_rem_pio2f+0x5a>
 800e2ba:	edd4 7a00 	vldr	s15, [r4]
 800e2be:	eef1 7a67 	vneg.f32	s15, s15
 800e2c2:	edc4 7a00 	vstr	s15, [r4]
 800e2c6:	edd4 7a01 	vldr	s15, [r4, #4]
 800e2ca:	eef1 7a67 	vneg.f32	s15, s15
 800e2ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800e2d2:	e779      	b.n	800e1c8 <__ieee754_rem_pio2f+0x130>
 800e2d4:	2303      	movs	r3, #3
 800e2d6:	e7e5      	b.n	800e2a4 <__ieee754_rem_pio2f+0x20c>
 800e2d8:	3f490fd8 	.word	0x3f490fd8
 800e2dc:	4016cbe3 	.word	0x4016cbe3
 800e2e0:	3fc90f80 	.word	0x3fc90f80
 800e2e4:	3fc90fd0 	.word	0x3fc90fd0
 800e2e8:	37354443 	.word	0x37354443
 800e2ec:	37354400 	.word	0x37354400
 800e2f0:	2e85a308 	.word	0x2e85a308
 800e2f4:	43490f80 	.word	0x43490f80
 800e2f8:	3f22f984 	.word	0x3f22f984
 800e2fc:	080104a8 	.word	0x080104a8
 800e300:	2e85a300 	.word	0x2e85a300
 800e304:	248d3132 	.word	0x248d3132
 800e308:	43800000 	.word	0x43800000
 800e30c:	08010528 	.word	0x08010528

0800e310 <__ieee754_sqrtf>:
 800e310:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e314:	4770      	bx	lr
	...

0800e318 <__kernel_rem_pio2f>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	ed2d 8b04 	vpush	{d8-d9}
 800e320:	b0d9      	sub	sp, #356	; 0x164
 800e322:	4688      	mov	r8, r1
 800e324:	9002      	str	r0, [sp, #8]
 800e326:	49bb      	ldr	r1, [pc, #748]	; (800e614 <__kernel_rem_pio2f+0x2fc>)
 800e328:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e330:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800e334:	1e59      	subs	r1, r3, #1
 800e336:	1d13      	adds	r3, r2, #4
 800e338:	db27      	blt.n	800e38a <__kernel_rem_pio2f+0x72>
 800e33a:	f1b2 0b03 	subs.w	fp, r2, #3
 800e33e:	bf48      	it	mi
 800e340:	f102 0b04 	addmi.w	fp, r2, #4
 800e344:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800e348:	1c45      	adds	r5, r0, #1
 800e34a:	00ec      	lsls	r4, r5, #3
 800e34c:	1a47      	subs	r7, r0, r1
 800e34e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e352:	9403      	str	r4, [sp, #12]
 800e354:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e358:	eb0a 0c01 	add.w	ip, sl, r1
 800e35c:	ae1c      	add	r6, sp, #112	; 0x70
 800e35e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800e362:	2400      	movs	r4, #0
 800e364:	4564      	cmp	r4, ip
 800e366:	dd12      	ble.n	800e38e <__kernel_rem_pio2f+0x76>
 800e368:	9b01      	ldr	r3, [sp, #4]
 800e36a:	ac1c      	add	r4, sp, #112	; 0x70
 800e36c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e370:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800e374:	f04f 0c00 	mov.w	ip, #0
 800e378:	45d4      	cmp	ip, sl
 800e37a:	dc27      	bgt.n	800e3cc <__kernel_rem_pio2f+0xb4>
 800e37c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e380:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e384:	4627      	mov	r7, r4
 800e386:	2600      	movs	r6, #0
 800e388:	e016      	b.n	800e3b8 <__kernel_rem_pio2f+0xa0>
 800e38a:	2000      	movs	r0, #0
 800e38c:	e7dc      	b.n	800e348 <__kernel_rem_pio2f+0x30>
 800e38e:	42e7      	cmn	r7, r4
 800e390:	bf5d      	ittte	pl
 800e392:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800e396:	ee07 3a90 	vmovpl	s15, r3
 800e39a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e39e:	eef0 7a47 	vmovmi.f32	s15, s14
 800e3a2:	ece6 7a01 	vstmia	r6!, {s15}
 800e3a6:	3401      	adds	r4, #1
 800e3a8:	e7dc      	b.n	800e364 <__kernel_rem_pio2f+0x4c>
 800e3aa:	ecf9 6a01 	vldmia	r9!, {s13}
 800e3ae:	ed97 7a00 	vldr	s14, [r7]
 800e3b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e3b6:	3601      	adds	r6, #1
 800e3b8:	428e      	cmp	r6, r1
 800e3ba:	f1a7 0704 	sub.w	r7, r7, #4
 800e3be:	ddf4      	ble.n	800e3aa <__kernel_rem_pio2f+0x92>
 800e3c0:	eceb 7a01 	vstmia	fp!, {s15}
 800e3c4:	f10c 0c01 	add.w	ip, ip, #1
 800e3c8:	3404      	adds	r4, #4
 800e3ca:	e7d5      	b.n	800e378 <__kernel_rem_pio2f+0x60>
 800e3cc:	ab08      	add	r3, sp, #32
 800e3ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e3d2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e620 <__kernel_rem_pio2f+0x308>
 800e3d6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e61c <__kernel_rem_pio2f+0x304>
 800e3da:	9304      	str	r3, [sp, #16]
 800e3dc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e3e0:	4656      	mov	r6, sl
 800e3e2:	00b3      	lsls	r3, r6, #2
 800e3e4:	9305      	str	r3, [sp, #20]
 800e3e6:	ab58      	add	r3, sp, #352	; 0x160
 800e3e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e3ec:	ac08      	add	r4, sp, #32
 800e3ee:	ab44      	add	r3, sp, #272	; 0x110
 800e3f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e3f4:	46a4      	mov	ip, r4
 800e3f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e3fa:	4637      	mov	r7, r6
 800e3fc:	2f00      	cmp	r7, #0
 800e3fe:	f1a0 0004 	sub.w	r0, r0, #4
 800e402:	dc4f      	bgt.n	800e4a4 <__kernel_rem_pio2f+0x18c>
 800e404:	4628      	mov	r0, r5
 800e406:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e40a:	f000 fc71 	bl	800ecf0 <scalbnf>
 800e40e:	eeb0 8a40 	vmov.f32	s16, s0
 800e412:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e416:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e41a:	f000 fc21 	bl	800ec60 <floorf>
 800e41e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e422:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e426:	2d00      	cmp	r5, #0
 800e428:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e42c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e430:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e434:	ee17 9a90 	vmov	r9, s15
 800e438:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e43c:	dd44      	ble.n	800e4c8 <__kernel_rem_pio2f+0x1b0>
 800e43e:	f106 3cff 	add.w	ip, r6, #4294967295
 800e442:	ab08      	add	r3, sp, #32
 800e444:	f1c5 0e08 	rsb	lr, r5, #8
 800e448:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e44c:	fa47 f00e 	asr.w	r0, r7, lr
 800e450:	4481      	add	r9, r0
 800e452:	fa00 f00e 	lsl.w	r0, r0, lr
 800e456:	1a3f      	subs	r7, r7, r0
 800e458:	f1c5 0007 	rsb	r0, r5, #7
 800e45c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e460:	4107      	asrs	r7, r0
 800e462:	2f00      	cmp	r7, #0
 800e464:	dd3f      	ble.n	800e4e6 <__kernel_rem_pio2f+0x1ce>
 800e466:	f04f 0e00 	mov.w	lr, #0
 800e46a:	f109 0901 	add.w	r9, r9, #1
 800e46e:	4673      	mov	r3, lr
 800e470:	4576      	cmp	r6, lr
 800e472:	dc6b      	bgt.n	800e54c <__kernel_rem_pio2f+0x234>
 800e474:	2d00      	cmp	r5, #0
 800e476:	dd04      	ble.n	800e482 <__kernel_rem_pio2f+0x16a>
 800e478:	2d01      	cmp	r5, #1
 800e47a:	d078      	beq.n	800e56e <__kernel_rem_pio2f+0x256>
 800e47c:	2d02      	cmp	r5, #2
 800e47e:	f000 8081 	beq.w	800e584 <__kernel_rem_pio2f+0x26c>
 800e482:	2f02      	cmp	r7, #2
 800e484:	d12f      	bne.n	800e4e6 <__kernel_rem_pio2f+0x1ce>
 800e486:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e48a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e48e:	b353      	cbz	r3, 800e4e6 <__kernel_rem_pio2f+0x1ce>
 800e490:	4628      	mov	r0, r5
 800e492:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e496:	f000 fc2b 	bl	800ecf0 <scalbnf>
 800e49a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e49e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e4a2:	e020      	b.n	800e4e6 <__kernel_rem_pio2f+0x1ce>
 800e4a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e4a8:	3f01      	subs	r7, #1
 800e4aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e4b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e4ba:	ecac 0a01 	vstmia	ip!, {s0}
 800e4be:	ed90 0a00 	vldr	s0, [r0]
 800e4c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e4c6:	e799      	b.n	800e3fc <__kernel_rem_pio2f+0xe4>
 800e4c8:	d105      	bne.n	800e4d6 <__kernel_rem_pio2f+0x1be>
 800e4ca:	1e70      	subs	r0, r6, #1
 800e4cc:	ab08      	add	r3, sp, #32
 800e4ce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e4d2:	11ff      	asrs	r7, r7, #7
 800e4d4:	e7c5      	b.n	800e462 <__kernel_rem_pio2f+0x14a>
 800e4d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e4da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	da31      	bge.n	800e548 <__kernel_rem_pio2f+0x230>
 800e4e4:	2700      	movs	r7, #0
 800e4e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	f040 809b 	bne.w	800e628 <__kernel_rem_pio2f+0x310>
 800e4f2:	1e74      	subs	r4, r6, #1
 800e4f4:	46a4      	mov	ip, r4
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	45d4      	cmp	ip, sl
 800e4fa:	da4a      	bge.n	800e592 <__kernel_rem_pio2f+0x27a>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d07a      	beq.n	800e5f6 <__kernel_rem_pio2f+0x2de>
 800e500:	ab08      	add	r3, sp, #32
 800e502:	3d08      	subs	r5, #8
 800e504:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f000 8081 	beq.w	800e610 <__kernel_rem_pio2f+0x2f8>
 800e50e:	4628      	mov	r0, r5
 800e510:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e514:	00a5      	lsls	r5, r4, #2
 800e516:	f000 fbeb 	bl	800ecf0 <scalbnf>
 800e51a:	aa44      	add	r2, sp, #272	; 0x110
 800e51c:	1d2b      	adds	r3, r5, #4
 800e51e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e620 <__kernel_rem_pio2f+0x308>
 800e522:	18d1      	adds	r1, r2, r3
 800e524:	4622      	mov	r2, r4
 800e526:	2a00      	cmp	r2, #0
 800e528:	f280 80ae 	bge.w	800e688 <__kernel_rem_pio2f+0x370>
 800e52c:	4622      	mov	r2, r4
 800e52e:	2a00      	cmp	r2, #0
 800e530:	f2c0 80cc 	blt.w	800e6cc <__kernel_rem_pio2f+0x3b4>
 800e534:	a944      	add	r1, sp, #272	; 0x110
 800e536:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e53a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e618 <__kernel_rem_pio2f+0x300>
 800e53e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e542:	2000      	movs	r0, #0
 800e544:	1aa1      	subs	r1, r4, r2
 800e546:	e0b6      	b.n	800e6b6 <__kernel_rem_pio2f+0x39e>
 800e548:	2702      	movs	r7, #2
 800e54a:	e78c      	b.n	800e466 <__kernel_rem_pio2f+0x14e>
 800e54c:	6820      	ldr	r0, [r4, #0]
 800e54e:	b94b      	cbnz	r3, 800e564 <__kernel_rem_pio2f+0x24c>
 800e550:	b118      	cbz	r0, 800e55a <__kernel_rem_pio2f+0x242>
 800e552:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e556:	6020      	str	r0, [r4, #0]
 800e558:	2001      	movs	r0, #1
 800e55a:	f10e 0e01 	add.w	lr, lr, #1
 800e55e:	3404      	adds	r4, #4
 800e560:	4603      	mov	r3, r0
 800e562:	e785      	b.n	800e470 <__kernel_rem_pio2f+0x158>
 800e564:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e568:	6020      	str	r0, [r4, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	e7f5      	b.n	800e55a <__kernel_rem_pio2f+0x242>
 800e56e:	1e74      	subs	r4, r6, #1
 800e570:	a808      	add	r0, sp, #32
 800e572:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e576:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e57a:	f10d 0c20 	add.w	ip, sp, #32
 800e57e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e582:	e77e      	b.n	800e482 <__kernel_rem_pio2f+0x16a>
 800e584:	1e74      	subs	r4, r6, #1
 800e586:	a808      	add	r0, sp, #32
 800e588:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e58c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e590:	e7f3      	b.n	800e57a <__kernel_rem_pio2f+0x262>
 800e592:	ab08      	add	r3, sp, #32
 800e594:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e598:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e59c:	4318      	orrs	r0, r3
 800e59e:	e7ab      	b.n	800e4f8 <__kernel_rem_pio2f+0x1e0>
 800e5a0:	f10c 0c01 	add.w	ip, ip, #1
 800e5a4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	d0f9      	beq.n	800e5a0 <__kernel_rem_pio2f+0x288>
 800e5ac:	9b05      	ldr	r3, [sp, #20]
 800e5ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e5b2:	eb0d 0003 	add.w	r0, sp, r3
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	18f4      	adds	r4, r6, r3
 800e5ba:	ab1c      	add	r3, sp, #112	; 0x70
 800e5bc:	1c77      	adds	r7, r6, #1
 800e5be:	384c      	subs	r0, #76	; 0x4c
 800e5c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e5c4:	4466      	add	r6, ip
 800e5c6:	42be      	cmp	r6, r7
 800e5c8:	f6ff af0b 	blt.w	800e3e2 <__kernel_rem_pio2f+0xca>
 800e5cc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e5d0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e5d4:	ee07 3a90 	vmov	s15, r3
 800e5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5dc:	f04f 0c00 	mov.w	ip, #0
 800e5e0:	ece4 7a01 	vstmia	r4!, {s15}
 800e5e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e5e8:	46a1      	mov	r9, r4
 800e5ea:	458c      	cmp	ip, r1
 800e5ec:	dd07      	ble.n	800e5fe <__kernel_rem_pio2f+0x2e6>
 800e5ee:	ece0 7a01 	vstmia	r0!, {s15}
 800e5f2:	3701      	adds	r7, #1
 800e5f4:	e7e7      	b.n	800e5c6 <__kernel_rem_pio2f+0x2ae>
 800e5f6:	9804      	ldr	r0, [sp, #16]
 800e5f8:	f04f 0c01 	mov.w	ip, #1
 800e5fc:	e7d2      	b.n	800e5a4 <__kernel_rem_pio2f+0x28c>
 800e5fe:	ecfe 6a01 	vldmia	lr!, {s13}
 800e602:	ed39 7a01 	vldmdb	r9!, {s14}
 800e606:	f10c 0c01 	add.w	ip, ip, #1
 800e60a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e60e:	e7ec      	b.n	800e5ea <__kernel_rem_pio2f+0x2d2>
 800e610:	3c01      	subs	r4, #1
 800e612:	e775      	b.n	800e500 <__kernel_rem_pio2f+0x1e8>
 800e614:	080110dc 	.word	0x080110dc
 800e618:	080110b0 	.word	0x080110b0
 800e61c:	43800000 	.word	0x43800000
 800e620:	3b800000 	.word	0x3b800000
 800e624:	00000000 	.word	0x00000000
 800e628:	9b03      	ldr	r3, [sp, #12]
 800e62a:	eeb0 0a48 	vmov.f32	s0, s16
 800e62e:	1a98      	subs	r0, r3, r2
 800e630:	f000 fb5e 	bl	800ecf0 <scalbnf>
 800e634:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e61c <__kernel_rem_pio2f+0x304>
 800e638:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e640:	db19      	blt.n	800e676 <__kernel_rem_pio2f+0x35e>
 800e642:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e620 <__kernel_rem_pio2f+0x308>
 800e646:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e64a:	aa08      	add	r2, sp, #32
 800e64c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e650:	1c74      	adds	r4, r6, #1
 800e652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e656:	3508      	adds	r5, #8
 800e658:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e65c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e660:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e664:	ee10 3a10 	vmov	r3, s0
 800e668:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e66c:	ee17 3a90 	vmov	r3, s15
 800e670:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e674:	e74b      	b.n	800e50e <__kernel_rem_pio2f+0x1f6>
 800e676:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e67a:	aa08      	add	r2, sp, #32
 800e67c:	ee10 3a10 	vmov	r3, s0
 800e680:	4634      	mov	r4, r6
 800e682:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e686:	e742      	b.n	800e50e <__kernel_rem_pio2f+0x1f6>
 800e688:	a808      	add	r0, sp, #32
 800e68a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e68e:	9001      	str	r0, [sp, #4]
 800e690:	ee07 0a90 	vmov	s15, r0
 800e694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e698:	3a01      	subs	r2, #1
 800e69a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e69e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e6a2:	ed61 7a01 	vstmdb	r1!, {s15}
 800e6a6:	e73e      	b.n	800e526 <__kernel_rem_pio2f+0x20e>
 800e6a8:	ecfc 6a01 	vldmia	ip!, {s13}
 800e6ac:	ecb6 7a01 	vldmia	r6!, {s14}
 800e6b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	4550      	cmp	r0, sl
 800e6b8:	dc01      	bgt.n	800e6be <__kernel_rem_pio2f+0x3a6>
 800e6ba:	4288      	cmp	r0, r1
 800e6bc:	ddf4      	ble.n	800e6a8 <__kernel_rem_pio2f+0x390>
 800e6be:	a858      	add	r0, sp, #352	; 0x160
 800e6c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6c4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e6c8:	3a01      	subs	r2, #1
 800e6ca:	e730      	b.n	800e52e <__kernel_rem_pio2f+0x216>
 800e6cc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e6ce:	2a02      	cmp	r2, #2
 800e6d0:	dc09      	bgt.n	800e6e6 <__kernel_rem_pio2f+0x3ce>
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	dc2a      	bgt.n	800e72c <__kernel_rem_pio2f+0x414>
 800e6d6:	d043      	beq.n	800e760 <__kernel_rem_pio2f+0x448>
 800e6d8:	f009 0007 	and.w	r0, r9, #7
 800e6dc:	b059      	add	sp, #356	; 0x164
 800e6de:	ecbd 8b04 	vpop	{d8-d9}
 800e6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	d1f5      	bne.n	800e6d8 <__kernel_rem_pio2f+0x3c0>
 800e6ec:	ab30      	add	r3, sp, #192	; 0xc0
 800e6ee:	442b      	add	r3, r5
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f1a1 0104 	sub.w	r1, r1, #4
 800e6fc:	dc51      	bgt.n	800e7a2 <__kernel_rem_pio2f+0x48a>
 800e6fe:	4621      	mov	r1, r4
 800e700:	2901      	cmp	r1, #1
 800e702:	f1a2 0204 	sub.w	r2, r2, #4
 800e706:	dc5c      	bgt.n	800e7c2 <__kernel_rem_pio2f+0x4aa>
 800e708:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e70c:	3304      	adds	r3, #4
 800e70e:	2c01      	cmp	r4, #1
 800e710:	dc67      	bgt.n	800e7e2 <__kernel_rem_pio2f+0x4ca>
 800e712:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e716:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e71a:	2f00      	cmp	r7, #0
 800e71c:	d167      	bne.n	800e7ee <__kernel_rem_pio2f+0x4d6>
 800e71e:	edc8 6a00 	vstr	s13, [r8]
 800e722:	ed88 7a01 	vstr	s14, [r8, #4]
 800e726:	edc8 7a02 	vstr	s15, [r8, #8]
 800e72a:	e7d5      	b.n	800e6d8 <__kernel_rem_pio2f+0x3c0>
 800e72c:	aa30      	add	r2, sp, #192	; 0xc0
 800e72e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e732:	4413      	add	r3, r2
 800e734:	4622      	mov	r2, r4
 800e736:	2a00      	cmp	r2, #0
 800e738:	da24      	bge.n	800e784 <__kernel_rem_pio2f+0x46c>
 800e73a:	b34f      	cbz	r7, 800e790 <__kernel_rem_pio2f+0x478>
 800e73c:	eef1 7a47 	vneg.f32	s15, s14
 800e740:	edc8 7a00 	vstr	s15, [r8]
 800e744:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e74c:	aa31      	add	r2, sp, #196	; 0xc4
 800e74e:	2301      	movs	r3, #1
 800e750:	429c      	cmp	r4, r3
 800e752:	da20      	bge.n	800e796 <__kernel_rem_pio2f+0x47e>
 800e754:	b10f      	cbz	r7, 800e75a <__kernel_rem_pio2f+0x442>
 800e756:	eef1 7a67 	vneg.f32	s15, s15
 800e75a:	edc8 7a01 	vstr	s15, [r8, #4]
 800e75e:	e7bb      	b.n	800e6d8 <__kernel_rem_pio2f+0x3c0>
 800e760:	aa30      	add	r2, sp, #192	; 0xc0
 800e762:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e624 <__kernel_rem_pio2f+0x30c>
 800e766:	4413      	add	r3, r2
 800e768:	2c00      	cmp	r4, #0
 800e76a:	da05      	bge.n	800e778 <__kernel_rem_pio2f+0x460>
 800e76c:	b10f      	cbz	r7, 800e772 <__kernel_rem_pio2f+0x45a>
 800e76e:	eef1 7a67 	vneg.f32	s15, s15
 800e772:	edc8 7a00 	vstr	s15, [r8]
 800e776:	e7af      	b.n	800e6d8 <__kernel_rem_pio2f+0x3c0>
 800e778:	ed33 7a01 	vldmdb	r3!, {s14}
 800e77c:	3c01      	subs	r4, #1
 800e77e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e782:	e7f1      	b.n	800e768 <__kernel_rem_pio2f+0x450>
 800e784:	ed73 7a01 	vldmdb	r3!, {s15}
 800e788:	3a01      	subs	r2, #1
 800e78a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e78e:	e7d2      	b.n	800e736 <__kernel_rem_pio2f+0x41e>
 800e790:	eef0 7a47 	vmov.f32	s15, s14
 800e794:	e7d4      	b.n	800e740 <__kernel_rem_pio2f+0x428>
 800e796:	ecb2 7a01 	vldmia	r2!, {s14}
 800e79a:	3301      	adds	r3, #1
 800e79c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7a0:	e7d6      	b.n	800e750 <__kernel_rem_pio2f+0x438>
 800e7a2:	edd1 7a00 	vldr	s15, [r1]
 800e7a6:	edd1 6a01 	vldr	s13, [r1, #4]
 800e7aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e7ae:	3801      	subs	r0, #1
 800e7b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7b4:	ed81 7a00 	vstr	s14, [r1]
 800e7b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7bc:	edc1 7a01 	vstr	s15, [r1, #4]
 800e7c0:	e799      	b.n	800e6f6 <__kernel_rem_pio2f+0x3de>
 800e7c2:	edd2 7a00 	vldr	s15, [r2]
 800e7c6:	edd2 6a01 	vldr	s13, [r2, #4]
 800e7ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e7ce:	3901      	subs	r1, #1
 800e7d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7d4:	ed82 7a00 	vstr	s14, [r2]
 800e7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7dc:	edc2 7a01 	vstr	s15, [r2, #4]
 800e7e0:	e78e      	b.n	800e700 <__kernel_rem_pio2f+0x3e8>
 800e7e2:	ed33 7a01 	vldmdb	r3!, {s14}
 800e7e6:	3c01      	subs	r4, #1
 800e7e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7ec:	e78f      	b.n	800e70e <__kernel_rem_pio2f+0x3f6>
 800e7ee:	eef1 6a66 	vneg.f32	s13, s13
 800e7f2:	eeb1 7a47 	vneg.f32	s14, s14
 800e7f6:	edc8 6a00 	vstr	s13, [r8]
 800e7fa:	ed88 7a01 	vstr	s14, [r8, #4]
 800e7fe:	eef1 7a67 	vneg.f32	s15, s15
 800e802:	e790      	b.n	800e726 <__kernel_rem_pio2f+0x40e>

0800e804 <__kernel_tanf>:
 800e804:	b508      	push	{r3, lr}
 800e806:	ee10 3a10 	vmov	r3, s0
 800e80a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e80e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800e812:	eef0 7a40 	vmov.f32	s15, s0
 800e816:	da17      	bge.n	800e848 <__kernel_tanf+0x44>
 800e818:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800e81c:	ee17 1a10 	vmov	r1, s14
 800e820:	bb41      	cbnz	r1, 800e874 <__kernel_tanf+0x70>
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	4313      	orrs	r3, r2
 800e826:	d108      	bne.n	800e83a <__kernel_tanf+0x36>
 800e828:	f000 fa12 	bl	800ec50 <fabsf>
 800e82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e834:	eeb0 0a67 	vmov.f32	s0, s15
 800e838:	bd08      	pop	{r3, pc}
 800e83a:	2801      	cmp	r0, #1
 800e83c:	d0fa      	beq.n	800e834 <__kernel_tanf+0x30>
 800e83e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e846:	e7f5      	b.n	800e834 <__kernel_tanf+0x30>
 800e848:	494c      	ldr	r1, [pc, #304]	; (800e97c <__kernel_tanf+0x178>)
 800e84a:	428a      	cmp	r2, r1
 800e84c:	db12      	blt.n	800e874 <__kernel_tanf+0x70>
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfb8      	it	lt
 800e852:	eef1 7a40 	vneglt.f32	s15, s0
 800e856:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e980 <__kernel_tanf+0x17c>
 800e85a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e85e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800e984 <__kernel_tanf+0x180>
 800e862:	bfb8      	it	lt
 800e864:	eef1 0a60 	vneglt.f32	s1, s1
 800e868:	ee70 0a60 	vsub.f32	s1, s0, s1
 800e86c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800e870:	eddf 0a45 	vldr	s1, [pc, #276]	; 800e988 <__kernel_tanf+0x184>
 800e874:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e98c <__kernel_tanf+0x188>
 800e878:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800e990 <__kernel_tanf+0x18c>
 800e87c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800e994 <__kernel_tanf+0x190>
 800e880:	493e      	ldr	r1, [pc, #248]	; (800e97c <__kernel_tanf+0x178>)
 800e882:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e886:	428a      	cmp	r2, r1
 800e888:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e88c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e890:	eddf 5a41 	vldr	s11, [pc, #260]	; 800e998 <__kernel_tanf+0x194>
 800e894:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e898:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800e99c <__kernel_tanf+0x198>
 800e89c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e8a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e9a0 <__kernel_tanf+0x19c>
 800e8a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e8a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800e9a4 <__kernel_tanf+0x1a0>
 800e8ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e8b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800e9a8 <__kernel_tanf+0x1a4>
 800e8b4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800e8b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800e9ac <__kernel_tanf+0x1a8>
 800e8bc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e8c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800e9b0 <__kernel_tanf+0x1ac>
 800e8c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800e8c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800e9b4 <__kernel_tanf+0x1b0>
 800e8cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800e8d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800e9b8 <__kernel_tanf+0x1b4>
 800e8d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800e8d8:	eeb0 7a46 	vmov.f32	s14, s12
 800e8dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e8e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800e8e4:	eeb0 6a60 	vmov.f32	s12, s1
 800e8e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 800e8ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e9bc <__kernel_tanf+0x1b8>
 800e8f0:	eee6 0a26 	vfma.f32	s1, s12, s13
 800e8f4:	eee5 0a07 	vfma.f32	s1, s10, s14
 800e8f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e8fc:	db1d      	blt.n	800e93a <__kernel_tanf+0x136>
 800e8fe:	ee06 0a90 	vmov	s13, r0
 800e902:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800e906:	ee27 6a07 	vmul.f32	s12, s14, s14
 800e90a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800e90e:	179b      	asrs	r3, r3, #30
 800e910:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800e914:	f003 0302 	and.w	r3, r3, #2
 800e918:	f1c3 0301 	rsb	r3, r3, #1
 800e91c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e920:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800e924:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e92c:	ee07 3a90 	vmov	s15, r3
 800e930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e934:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e938:	e77c      	b.n	800e834 <__kernel_tanf+0x30>
 800e93a:	2801      	cmp	r0, #1
 800e93c:	d01b      	beq.n	800e976 <__kernel_tanf+0x172>
 800e93e:	4b20      	ldr	r3, [pc, #128]	; (800e9c0 <__kernel_tanf+0x1bc>)
 800e940:	ee17 2a10 	vmov	r2, s14
 800e944:	401a      	ands	r2, r3
 800e946:	ee06 2a10 	vmov	s12, r2
 800e94a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e94e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e952:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e956:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e95e:	ee16 2a90 	vmov	r2, s13
 800e962:	4013      	ands	r3, r2
 800e964:	ee07 3a90 	vmov	s15, r3
 800e968:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e96c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800e970:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e974:	e75e      	b.n	800e834 <__kernel_tanf+0x30>
 800e976:	eef0 7a47 	vmov.f32	s15, s14
 800e97a:	e75b      	b.n	800e834 <__kernel_tanf+0x30>
 800e97c:	3f2ca140 	.word	0x3f2ca140
 800e980:	3f490fda 	.word	0x3f490fda
 800e984:	33222168 	.word	0x33222168
 800e988:	00000000 	.word	0x00000000
 800e98c:	b79bae5f 	.word	0xb79bae5f
 800e990:	38a3f445 	.word	0x38a3f445
 800e994:	37d95384 	.word	0x37d95384
 800e998:	3a1a26c8 	.word	0x3a1a26c8
 800e99c:	3b6b6916 	.word	0x3b6b6916
 800e9a0:	3cb327a4 	.word	0x3cb327a4
 800e9a4:	3e088889 	.word	0x3e088889
 800e9a8:	3895c07a 	.word	0x3895c07a
 800e9ac:	398137b9 	.word	0x398137b9
 800e9b0:	3abede48 	.word	0x3abede48
 800e9b4:	3c11371f 	.word	0x3c11371f
 800e9b8:	3d5d0dd1 	.word	0x3d5d0dd1
 800e9bc:	3eaaaaab 	.word	0x3eaaaaab
 800e9c0:	fffff000 	.word	0xfffff000

0800e9c4 <with_errno>:
 800e9c4:	b513      	push	{r0, r1, r4, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	ed8d 0b00 	vstr	d0, [sp]
 800e9cc:	f7fc f80a 	bl	800a9e4 <__errno>
 800e9d0:	ed9d 0b00 	vldr	d0, [sp]
 800e9d4:	6004      	str	r4, [r0, #0]
 800e9d6:	b002      	add	sp, #8
 800e9d8:	bd10      	pop	{r4, pc}

0800e9da <xflow>:
 800e9da:	b082      	sub	sp, #8
 800e9dc:	b158      	cbz	r0, 800e9f6 <xflow+0x1c>
 800e9de:	eeb1 7b40 	vneg.f64	d7, d0
 800e9e2:	ed8d 7b00 	vstr	d7, [sp]
 800e9e6:	ed9d 7b00 	vldr	d7, [sp]
 800e9ea:	2022      	movs	r0, #34	; 0x22
 800e9ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e9f0:	b002      	add	sp, #8
 800e9f2:	f7ff bfe7 	b.w	800e9c4 <with_errno>
 800e9f6:	eeb0 7b40 	vmov.f64	d7, d0
 800e9fa:	e7f2      	b.n	800e9e2 <xflow+0x8>
 800e9fc:	0000      	movs	r0, r0
	...

0800ea00 <__math_uflow>:
 800ea00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea08 <__math_uflow+0x8>
 800ea04:	f7ff bfe9 	b.w	800e9da <xflow>
 800ea08:	00000000 	.word	0x00000000
 800ea0c:	10000000 	.word	0x10000000

0800ea10 <__math_oflow>:
 800ea10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea18 <__math_oflow+0x8>
 800ea14:	f7ff bfe1 	b.w	800e9da <xflow>
 800ea18:	00000000 	.word	0x00000000
 800ea1c:	70000000 	.word	0x70000000

0800ea20 <__math_divzero>:
 800ea20:	b082      	sub	sp, #8
 800ea22:	2800      	cmp	r0, #0
 800ea24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ea28:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ea2c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ea30:	ed8d 7b00 	vstr	d7, [sp]
 800ea34:	ed9d 0b00 	vldr	d0, [sp]
 800ea38:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ea48 <__math_divzero+0x28>
 800ea3c:	2022      	movs	r0, #34	; 0x22
 800ea3e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ea42:	b002      	add	sp, #8
 800ea44:	f7ff bfbe 	b.w	800e9c4 <with_errno>
	...

0800ea50 <__math_invalid>:
 800ea50:	eeb0 7b40 	vmov.f64	d7, d0
 800ea54:	eeb4 7b47 	vcmp.f64	d7, d7
 800ea58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ea60:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ea64:	d602      	bvs.n	800ea6c <__math_invalid+0x1c>
 800ea66:	2021      	movs	r0, #33	; 0x21
 800ea68:	f7ff bfac 	b.w	800e9c4 <with_errno>
 800ea6c:	4770      	bx	lr

0800ea6e <__math_check_uflow>:
 800ea6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea76:	d102      	bne.n	800ea7e <__math_check_uflow+0x10>
 800ea78:	2022      	movs	r0, #34	; 0x22
 800ea7a:	f7ff bfa3 	b.w	800e9c4 <with_errno>
 800ea7e:	4770      	bx	lr

0800ea80 <__math_check_oflow>:
 800ea80:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800eaa0 <__math_check_oflow+0x20>
 800ea84:	eeb0 7bc0 	vabs.f64	d7, d0
 800ea88:	eeb4 7b46 	vcmp.f64	d7, d6
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	dd02      	ble.n	800ea98 <__math_check_oflow+0x18>
 800ea92:	2022      	movs	r0, #34	; 0x22
 800ea94:	f7ff bf96 	b.w	800e9c4 <with_errno>
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	f3af 8000 	nop.w
 800eaa0:	ffffffff 	.word	0xffffffff
 800eaa4:	7fefffff 	.word	0x7fefffff

0800eaa8 <atanf>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	ee10 5a10 	vmov	r5, s0
 800eaae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eab2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800eab6:	eef0 7a40 	vmov.f32	s15, s0
 800eaba:	db0f      	blt.n	800eadc <atanf+0x34>
 800eabc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eac0:	dd04      	ble.n	800eacc <atanf+0x24>
 800eac2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eac6:	eeb0 0a67 	vmov.f32	s0, s15
 800eaca:	bd38      	pop	{r3, r4, r5, pc}
 800eacc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ec04 <atanf+0x15c>
 800ead0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ec08 <atanf+0x160>
 800ead4:	2d00      	cmp	r5, #0
 800ead6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800eada:	e7f4      	b.n	800eac6 <atanf+0x1e>
 800eadc:	4b4b      	ldr	r3, [pc, #300]	; (800ec0c <atanf+0x164>)
 800eade:	429c      	cmp	r4, r3
 800eae0:	dc10      	bgt.n	800eb04 <atanf+0x5c>
 800eae2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800eae6:	da0a      	bge.n	800eafe <atanf+0x56>
 800eae8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ec10 <atanf+0x168>
 800eaec:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eaf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaf4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafc:	dce3      	bgt.n	800eac6 <atanf+0x1e>
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e013      	b.n	800eb2c <atanf+0x84>
 800eb04:	f000 f8a4 	bl	800ec50 <fabsf>
 800eb08:	4b42      	ldr	r3, [pc, #264]	; (800ec14 <atanf+0x16c>)
 800eb0a:	429c      	cmp	r4, r3
 800eb0c:	dc4f      	bgt.n	800ebae <atanf+0x106>
 800eb0e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800eb12:	429c      	cmp	r4, r3
 800eb14:	dc41      	bgt.n	800eb9a <atanf+0xf2>
 800eb16:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eb1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb22:	2300      	movs	r3, #0
 800eb24:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eb32:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ec18 <atanf+0x170>
 800eb36:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ec1c <atanf+0x174>
 800eb3a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800ec20 <atanf+0x178>
 800eb3e:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eb42:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eb46:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ec24 <atanf+0x17c>
 800eb4a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb4e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ec28 <atanf+0x180>
 800eb52:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb56:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ec2c <atanf+0x184>
 800eb5a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ec30 <atanf+0x188>
 800eb62:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb66:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ec34 <atanf+0x18c>
 800eb6a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eb6e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ec38 <atanf+0x190>
 800eb72:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb76:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800ec3c <atanf+0x194>
 800eb7a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eb7e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ec40 <atanf+0x198>
 800eb82:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb86:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800eb8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb92:	d121      	bne.n	800ebd8 <atanf+0x130>
 800eb94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb98:	e795      	b.n	800eac6 <atanf+0x1e>
 800eb9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eba2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eba6:	2301      	movs	r3, #1
 800eba8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebac:	e7be      	b.n	800eb2c <atanf+0x84>
 800ebae:	4b25      	ldr	r3, [pc, #148]	; (800ec44 <atanf+0x19c>)
 800ebb0:	429c      	cmp	r4, r3
 800ebb2:	dc0b      	bgt.n	800ebcc <atanf+0x124>
 800ebb4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ebb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebbc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ebc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebca:	e7af      	b.n	800eb2c <atanf+0x84>
 800ebcc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ebd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e7a9      	b.n	800eb2c <atanf+0x84>
 800ebd8:	4a1b      	ldr	r2, [pc, #108]	; (800ec48 <atanf+0x1a0>)
 800ebda:	491c      	ldr	r1, [pc, #112]	; (800ec4c <atanf+0x1a4>)
 800ebdc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ebe0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ebe4:	ed93 0a00 	vldr	s0, [r3]
 800ebe8:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ebec:	ed92 0a00 	vldr	s0, [r2]
 800ebf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebf4:	2d00      	cmp	r5, #0
 800ebf6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ebfa:	bfb8      	it	lt
 800ebfc:	eef1 7a67 	vneglt.f32	s15, s15
 800ec00:	e761      	b.n	800eac6 <atanf+0x1e>
 800ec02:	bf00      	nop
 800ec04:	3fc90fdb 	.word	0x3fc90fdb
 800ec08:	bfc90fdb 	.word	0xbfc90fdb
 800ec0c:	3edfffff 	.word	0x3edfffff
 800ec10:	7149f2ca 	.word	0x7149f2ca
 800ec14:	3f97ffff 	.word	0x3f97ffff
 800ec18:	3c8569d7 	.word	0x3c8569d7
 800ec1c:	3d4bda59 	.word	0x3d4bda59
 800ec20:	bd6ef16b 	.word	0xbd6ef16b
 800ec24:	3d886b35 	.word	0x3d886b35
 800ec28:	3dba2e6e 	.word	0x3dba2e6e
 800ec2c:	3e124925 	.word	0x3e124925
 800ec30:	3eaaaaab 	.word	0x3eaaaaab
 800ec34:	bd15a221 	.word	0xbd15a221
 800ec38:	bd9d8795 	.word	0xbd9d8795
 800ec3c:	bde38e38 	.word	0xbde38e38
 800ec40:	be4ccccd 	.word	0xbe4ccccd
 800ec44:	401bffff 	.word	0x401bffff
 800ec48:	080110e8 	.word	0x080110e8
 800ec4c:	080110f8 	.word	0x080110f8

0800ec50 <fabsf>:
 800ec50:	ee10 3a10 	vmov	r3, s0
 800ec54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec58:	ee00 3a10 	vmov	s0, r3
 800ec5c:	4770      	bx	lr
	...

0800ec60 <floorf>:
 800ec60:	ee10 3a10 	vmov	r3, s0
 800ec64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ec68:	3a7f      	subs	r2, #127	; 0x7f
 800ec6a:	2a16      	cmp	r2, #22
 800ec6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec70:	dc2a      	bgt.n	800ecc8 <floorf+0x68>
 800ec72:	2a00      	cmp	r2, #0
 800ec74:	da11      	bge.n	800ec9a <floorf+0x3a>
 800ec76:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ecd8 <floorf+0x78>
 800ec7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec86:	dd05      	ble.n	800ec94 <floorf+0x34>
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da23      	bge.n	800ecd4 <floorf+0x74>
 800ec8c:	4a13      	ldr	r2, [pc, #76]	; (800ecdc <floorf+0x7c>)
 800ec8e:	2900      	cmp	r1, #0
 800ec90:	bf18      	it	ne
 800ec92:	4613      	movne	r3, r2
 800ec94:	ee00 3a10 	vmov	s0, r3
 800ec98:	4770      	bx	lr
 800ec9a:	4911      	ldr	r1, [pc, #68]	; (800ece0 <floorf+0x80>)
 800ec9c:	4111      	asrs	r1, r2
 800ec9e:	420b      	tst	r3, r1
 800eca0:	d0fa      	beq.n	800ec98 <floorf+0x38>
 800eca2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ecd8 <floorf+0x78>
 800eca6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ecaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	ddef      	ble.n	800ec94 <floorf+0x34>
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	bfbe      	ittt	lt
 800ecb8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ecbc:	fa40 f202 	asrlt.w	r2, r0, r2
 800ecc0:	189b      	addlt	r3, r3, r2
 800ecc2:	ea23 0301 	bic.w	r3, r3, r1
 800ecc6:	e7e5      	b.n	800ec94 <floorf+0x34>
 800ecc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eccc:	d3e4      	bcc.n	800ec98 <floorf+0x38>
 800ecce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ecd2:	4770      	bx	lr
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e7dd      	b.n	800ec94 <floorf+0x34>
 800ecd8:	7149f2ca 	.word	0x7149f2ca
 800ecdc:	bf800000 	.word	0xbf800000
 800ece0:	007fffff 	.word	0x007fffff

0800ece4 <nanf>:
 800ece4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ecec <nanf+0x8>
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	7fc00000 	.word	0x7fc00000

0800ecf0 <scalbnf>:
 800ecf0:	ee10 3a10 	vmov	r3, s0
 800ecf4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ecf8:	d024      	beq.n	800ed44 <scalbnf+0x54>
 800ecfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ecfe:	d302      	bcc.n	800ed06 <scalbnf+0x16>
 800ed00:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed04:	4770      	bx	lr
 800ed06:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ed0a:	d121      	bne.n	800ed50 <scalbnf+0x60>
 800ed0c:	4b29      	ldr	r3, [pc, #164]	; (800edb4 <scalbnf+0xc4>)
 800ed0e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800edb8 <scalbnf+0xc8>
 800ed12:	4298      	cmp	r0, r3
 800ed14:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed18:	db15      	blt.n	800ed46 <scalbnf+0x56>
 800ed1a:	ee10 3a10 	vmov	r3, s0
 800ed1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed22:	3a19      	subs	r2, #25
 800ed24:	4402      	add	r2, r0
 800ed26:	2afe      	cmp	r2, #254	; 0xfe
 800ed28:	dd14      	ble.n	800ed54 <scalbnf+0x64>
 800ed2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800edbc <scalbnf+0xcc>
 800ed2e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800edc0 <scalbnf+0xd0>
 800ed32:	ee10 3a10 	vmov	r3, s0
 800ed36:	eeb0 7a67 	vmov.f32	s14, s15
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800ed40:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ed44:	4770      	bx	lr
 800ed46:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800edc4 <scalbnf+0xd4>
 800ed4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed4e:	4770      	bx	lr
 800ed50:	0dd2      	lsrs	r2, r2, #23
 800ed52:	e7e7      	b.n	800ed24 <scalbnf+0x34>
 800ed54:	2a00      	cmp	r2, #0
 800ed56:	dd06      	ble.n	800ed66 <scalbnf+0x76>
 800ed58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed5c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ed60:	ee00 3a10 	vmov	s0, r3
 800ed64:	4770      	bx	lr
 800ed66:	f112 0f16 	cmn.w	r2, #22
 800ed6a:	da19      	bge.n	800eda0 <scalbnf+0xb0>
 800ed6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed70:	4298      	cmp	r0, r3
 800ed72:	ee10 3a10 	vmov	r3, s0
 800ed76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed7a:	dd09      	ble.n	800ed90 <scalbnf+0xa0>
 800ed7c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800edbc <scalbnf+0xcc>
 800ed80:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800edc0 <scalbnf+0xd0>
 800ed84:	eef0 7a40 	vmov.f32	s15, s0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800ed8e:	e7dc      	b.n	800ed4a <scalbnf+0x5a>
 800ed90:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800edc4 <scalbnf+0xd4>
 800ed94:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800edc8 <scalbnf+0xd8>
 800ed98:	eef0 7a40 	vmov.f32	s15, s0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	e7f4      	b.n	800ed8a <scalbnf+0x9a>
 800eda0:	3219      	adds	r2, #25
 800eda2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eda6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800edaa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800edcc <scalbnf+0xdc>
 800edae:	ee07 3a10 	vmov	s14, r3
 800edb2:	e7c5      	b.n	800ed40 <scalbnf+0x50>
 800edb4:	ffff3cb0 	.word	0xffff3cb0
 800edb8:	4c000000 	.word	0x4c000000
 800edbc:	7149f2ca 	.word	0x7149f2ca
 800edc0:	f149f2ca 	.word	0xf149f2ca
 800edc4:	0da24260 	.word	0x0da24260
 800edc8:	8da24260 	.word	0x8da24260
 800edcc:	33000000 	.word	0x33000000

0800edd0 <_init>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	bf00      	nop
 800edd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd6:	bc08      	pop	{r3}
 800edd8:	469e      	mov	lr, r3
 800edda:	4770      	bx	lr

0800eddc <_fini>:
 800eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edde:	bf00      	nop
 800ede0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede2:	bc08      	pop	{r3}
 800ede4:	469e      	mov	lr, r3
 800ede6:	4770      	bx	lr
