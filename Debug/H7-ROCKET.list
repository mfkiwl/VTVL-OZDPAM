
H7-ROCKET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002398  0800fcb0  0800fcb0  0001fcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012048  08012048  00022048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012050  08012050  00022050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012054  08012054  00022054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  24000000  08012058  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000388  24000208  0801225c  00030208  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24000590  0801225c  00030590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001898c  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000337c  00000000  00000000  00048bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fc8  00000000  00000000  0004bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e50  00000000  00000000  0004cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000385be  00000000  00000000  0004dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000188e9  00000000  00000000  00086316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b0fc  00000000  00000000  0009ebff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f9cfb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005728  00000000  00000000  001f9d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc98 	.word	0x0800fc98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800fc98 	.word	0x0800fc98

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b974 	b.w	8000c24 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	4604      	mov	r4, r0
 800095c:	468e      	mov	lr, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d14d      	bne.n	80009fe <__udivmoddi4+0xaa>
 8000962:	428a      	cmp	r2, r1
 8000964:	4694      	mov	ip, r2
 8000966:	d969      	bls.n	8000a3c <__udivmoddi4+0xe8>
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	b152      	cbz	r2, 8000984 <__udivmoddi4+0x30>
 800096e:	fa01 f302 	lsl.w	r3, r1, r2
 8000972:	f1c2 0120 	rsb	r1, r2, #32
 8000976:	fa20 f101 	lsr.w	r1, r0, r1
 800097a:	fa0c fc02 	lsl.w	ip, ip, r2
 800097e:	ea41 0e03 	orr.w	lr, r1, r3
 8000982:	4094      	lsls	r4, r2
 8000984:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000988:	0c21      	lsrs	r1, r4, #16
 800098a:	fbbe f6f8 	udiv	r6, lr, r8
 800098e:	fa1f f78c 	uxth.w	r7, ip
 8000992:	fb08 e316 	mls	r3, r8, r6, lr
 8000996:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800099a:	fb06 f107 	mul.w	r1, r6, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d90a      	bls.n	80009b8 <__udivmoddi4+0x64>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009aa:	f080 811f 	bcs.w	8000bec <__udivmoddi4+0x298>
 80009ae:	4299      	cmp	r1, r3
 80009b0:	f240 811c 	bls.w	8000bec <__udivmoddi4+0x298>
 80009b4:	3e02      	subs	r6, #2
 80009b6:	4463      	add	r3, ip
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c8:	fb00 f707 	mul.w	r7, r0, r7
 80009cc:	42a7      	cmp	r7, r4
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x92>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	f080 810a 	bcs.w	8000bf0 <__udivmoddi4+0x29c>
 80009dc:	42a7      	cmp	r7, r4
 80009de:	f240 8107 	bls.w	8000bf0 <__udivmoddi4+0x29c>
 80009e2:	4464      	add	r4, ip
 80009e4:	3802      	subs	r0, #2
 80009e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ea:	1be4      	subs	r4, r4, r7
 80009ec:	2600      	movs	r6, #0
 80009ee:	b11d      	cbz	r5, 80009f8 <__udivmoddi4+0xa4>
 80009f0:	40d4      	lsrs	r4, r2
 80009f2:	2300      	movs	r3, #0
 80009f4:	e9c5 4300 	strd	r4, r3, [r5]
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d909      	bls.n	8000a16 <__udivmoddi4+0xc2>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	f000 80ef 	beq.w	8000be6 <__udivmoddi4+0x292>
 8000a08:	2600      	movs	r6, #0
 8000a0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0e:	4630      	mov	r0, r6
 8000a10:	4631      	mov	r1, r6
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	fab3 f683 	clz	r6, r3
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d14a      	bne.n	8000ab4 <__udivmoddi4+0x160>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xd4>
 8000a22:	4282      	cmp	r2, r0
 8000a24:	f200 80f9 	bhi.w	8000c1a <__udivmoddi4+0x2c6>
 8000a28:	1a84      	subs	r4, r0, r2
 8000a2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	469e      	mov	lr, r3
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d0e0      	beq.n	80009f8 <__udivmoddi4+0xa4>
 8000a36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a3a:	e7dd      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000a3c:	b902      	cbnz	r2, 8000a40 <__udivmoddi4+0xec>
 8000a3e:	deff      	udf	#255	; 0xff
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	f040 8092 	bne.w	8000b6e <__udivmoddi4+0x21a>
 8000a4a:	eba1 010c 	sub.w	r1, r1, ip
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2601      	movs	r6, #1
 8000a58:	0c20      	lsrs	r0, r4, #16
 8000a5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a66:	fb0e f003 	mul.w	r0, lr, r3
 8000a6a:	4288      	cmp	r0, r1
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x12c>
 8000a6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x12a>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2c0>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	1a09      	subs	r1, r1, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a88:	fb07 1110 	mls	r1, r7, r0, r1
 8000a8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x156>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x154>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2ca>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ab2:	e79c      	b.n	80009ee <__udivmoddi4+0x9a>
 8000ab4:	f1c6 0720 	rsb	r7, r6, #32
 8000ab8:	40b3      	lsls	r3, r6
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ac6:	fa01 f306 	lsl.w	r3, r1, r6
 8000aca:	431c      	orrs	r4, r3
 8000acc:	40f9      	lsrs	r1, r7
 8000ace:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ada:	0c20      	lsrs	r0, r4, #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ae4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae8:	fb08 f00e 	mul.w	r0, r8, lr
 8000aec:	4288      	cmp	r0, r1
 8000aee:	fa02 f206 	lsl.w	r2, r2, r6
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b8>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2bc>
 8000b00:	4288      	cmp	r0, r1
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2bc>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b14:	fb09 1110 	mls	r1, r9, r0, r1
 8000b18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	458e      	cmp	lr, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1e2>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2b4>
 8000b2e:	458e      	cmp	lr, r1
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2b4>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b3e:	eba1 010e 	sub.w	r1, r1, lr
 8000b42:	42a1      	cmp	r1, r4
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46a6      	mov	lr, r4
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x2a0>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x212>
 8000b4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b52:	eb61 010e 	sbc.w	r1, r1, lr
 8000b56:	fa01 f707 	lsl.w	r7, r1, r7
 8000b5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b5e:	40f1      	lsrs	r1, r6
 8000b60:	431f      	orrs	r7, r3
 8000b62:	e9c5 7100 	strd	r7, r1, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	40d8      	lsrs	r0, r3
 8000b74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b78:	fa21 f303 	lsr.w	r3, r1, r3
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	4301      	orrs	r1, r0
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b90:	0c0b      	lsrs	r3, r1, #16
 8000b92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b96:	fb00 f60e 	mul.w	r6, r0, lr
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x260>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b8>
 8000bac:	429e      	cmp	r6, r3
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b8>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x28a>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2b0>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2b0>
 8000bda:	3e02      	subs	r6, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	1ac9      	subs	r1, r1, r3
 8000be0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0x104>
 8000be6:	462e      	mov	r6, r5
 8000be8:	4628      	mov	r0, r5
 8000bea:	e705      	b.n	80009f8 <__udivmoddi4+0xa4>
 8000bec:	4606      	mov	r6, r0
 8000bee:	e6e3      	b.n	80009b8 <__udivmoddi4+0x64>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	e6f8      	b.n	80009e6 <__udivmoddi4+0x92>
 8000bf4:	454b      	cmp	r3, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f8>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c00:	3801      	subs	r0, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f8>
 8000c04:	4646      	mov	r6, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x28a>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1e2>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x260>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b8>
 8000c14:	3b02      	subs	r3, #2
 8000c16:	4461      	add	r1, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x12c>
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	e709      	b.n	8000a32 <__udivmoddi4+0xde>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x156>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <FusionAhrsInitialise+0x74>)
 8000c46:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <FusionAhrsInitialise+0x78>)
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000c8e:	bf00      	nop
 8000c90:	372c      	adds	r7, #44	; 0x2c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	7f7fffff 	.word	0x7f7fffff
 8000ca0:	41200000 	.word	0x41200000

08000ca4 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cb0:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 8000cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 8000cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000cdc:	b490      	push	{r4, r7}
 8000cde:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ce8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000cec:	6018      	str	r0, [r3, #0]
 8000cee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000cf2:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8000cf6:	eeb0 5a61 	vmov.f32	s10, s3
 8000cfa:	eef0 5a42 	vmov.f32	s11, s4
 8000cfe:	eeb0 6a62 	vmov.f32	s12, s5
 8000d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d06:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000d0a:	eef0 6a43 	vmov.f32	s13, s6
 8000d0e:	eeb0 7a63 	vmov.f32	s14, s7
 8000d12:	eef0 7a44 	vmov.f32	s15, s8
 8000d16:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d1a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000d1e:	f507 6085 	add.w	r0, r7, #1064	; 0x428
 8000d22:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8000d26:	edc0 4a00 	vstr	s9, [r0]
 8000d2a:	ed81 0a00 	vstr	s0, [r1]
 8000d2e:	edc1 0a01 	vstr	s1, [r1, #4]
 8000d32:	ed81 1a02 	vstr	s2, [r1, #8]
 8000d36:	ed82 5a00 	vstr	s10, [r2]
 8000d3a:	edc2 5a01 	vstr	s11, [r2, #4]
 8000d3e:	ed82 6a02 	vstr	s12, [r2, #8]
 8000d42:	edc3 6a00 	vstr	s13, [r3]
 8000d46:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d4a:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000d4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d60:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000d78:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d7c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	d116      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000d8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000d92:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d10b      	bne.n	8000dbc <FusionAhrsUpdate+0xe0>
 8000da4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000da8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8000db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	f000 85b4 	beq.w	8001924 <FusionAhrsUpdate+0xc48>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000dbc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dc0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dce:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ddc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000de0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	edd3 6a03 	vldr	s13, [r3, #12]
 8000dea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000dee:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e08:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000e0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e10:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e1a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e1e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e30:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e3e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e50:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e54:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000e58:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000e5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e60:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e6e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e88:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	edd3 6a06 	vldr	s13, [r3, #24]
 8000e92:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000e96:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000eb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8000eb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000eb8:	f5a3 7167 	sub.w	r1, r3, #924	; 0x39c
 8000ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ec0:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ecc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed0:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8000ed4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ed8:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8000edc:	460b      	mov	r3, r1
 8000ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000ee4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ee8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ef4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f00:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f04:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f08:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f10:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f24:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f28:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f2c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f30:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8000f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f40:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f44:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000f48:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000f60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f64:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000f68:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f7a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f7e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000f80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000f84:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	105a      	asrs	r2, r3, #1
 8000f8c:	4bd1      	ldr	r3, [pc, #836]	; (80012d4 <FusionAhrsUpdate+0x5f8>)
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000f94:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8000f98:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000f9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fa4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fa8:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000faa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fae:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fc6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fde:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000fee:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000ff6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000ffa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8000ffe:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001000:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800100a:	f5a3 716f 	sub.w	r1, r3, #956	; 0x3bc
 800100e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001012:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8001016:	460b      	mov	r3, r1
 8001018:	ca07      	ldmia	r2, {r0, r1, r2}
 800101a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800101e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001028:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800102a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800102e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001046:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800104a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800104e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001052:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001056:	ed93 7a01 	vldr	s14, [r3, #4]
 800105a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800106a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800106e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001072:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001076:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800107a:	ed93 7a02 	vldr	s14, [r3, #8]
 800107e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800108e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001096:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800109a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800109e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010a2:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80010a6:	460b      	mov	r3, r1
 80010a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010b2:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80010b6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80010bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80010c0:	bf00      	nop
 80010c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80010ca:	461c      	mov	r4, r3
 80010cc:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80010d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010dc:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80010e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010e4:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80010e8:	460b      	mov	r3, r1
 80010ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010f4:	f5a3 7175 	sub.w	r1, r3, #980	; 0x3d4
 80010f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80010fc:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8001100:	460b      	mov	r3, r1
 8001102:	ca07      	ldmia	r2, {r0, r1, r2}
 8001104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001108:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800110c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001110:	ed93 7a01 	vldr	s14, [r3, #4]
 8001114:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001118:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001128:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800112c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001130:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001134:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001138:	edd3 7a01 	vldr	s15, [r3, #4]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001148:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800114c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001150:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001154:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001158:	ed93 7a02 	vldr	s14, [r3, #8]
 800115c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001160:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001170:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800117c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001180:	edd3 7a02 	vldr	s15, [r3, #8]
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001190:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001194:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001198:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800119c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011a8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011b8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80011bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011c4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011d8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80011dc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80011e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011e4:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 80011e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011ec:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 80011f0:	460b      	mov	r3, r1
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80011fc:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8001200:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001204:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001208:	460b      	mov	r3, r1
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001214:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8001218:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800121c:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001220:	460b      	mov	r3, r1
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001228:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800122c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001238:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001248:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800124c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001250:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001254:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001258:	edd3 7a01 	vldr	s15, [r3, #4]
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001268:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800126c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001270:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001274:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001278:	edd3 7a02 	vldr	s15, [r3, #8]
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001284:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001288:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 800128c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001290:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	edd3 7a01 	vldr	s15, [r3, #4]
 800129a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	f100 833c 	bmi.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	f300 832b 	bgt.w	8001926 <FusionAhrsUpdate+0xc4a>
 80012d0:	e002      	b.n	80012d8 <FusionAhrsUpdate+0x5fc>
 80012d2:	bf00      	nop
 80012d4:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80012d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012dc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80012e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012ea:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80012fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	edd3 6a03 	vldr	s13, [r3, #12]
 8001306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800130a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	edd3 7a06 	vldr	s15, [r3, #24]
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800131c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001320:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001324:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001328:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800132c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ed93 7a03 	vldr	s14, [r3, #12]
 8001336:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800133a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	edd3 7a03 	vldr	s15, [r3, #12]
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800134c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001350:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001354:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	edd3 6a05 	vldr	s13, [r3, #20]
 800135e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001362:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	edd3 7a05 	vldr	s15, [r3, #20]
 800136c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001374:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001378:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800137c:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001380:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001384:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	ed93 7a05 	vldr	s14, [r3, #20]
 800138e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001392:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	edd3 7a06 	vldr	s15, [r3, #24]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013a4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80013ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013c8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80013cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80013d0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013d4:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80013d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013dc:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80013e0:	460b      	mov	r3, r1
 80013e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ec:	f5a3 713e 	sub.w	r1, r3, #760	; 0x2f8
 80013f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013f4:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 80013f8:	460b      	mov	r3, r1
 80013fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001400:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001404:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001408:	ed93 7a01 	vldr	s14, [r3, #4]
 800140c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001410:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001420:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001424:	edd3 6a02 	vldr	s13, [r3, #8]
 8001428:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800142c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001430:	edd3 7a01 	vldr	s15, [r3, #4]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001440:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001444:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001448:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800144c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001450:	ed93 7a02 	vldr	s14, [r3, #8]
 8001454:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001458:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001468:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001474:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001478:	edd3 7a02 	vldr	s15, [r3, #8]
 800147c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001488:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800148c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001490:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001494:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014a0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80014b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014bc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014dc:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80014e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80014ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80014f2:	461c      	mov	r4, r3
 80014f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001500:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001504:	f5a3 7147 	sub.w	r1, r3, #796	; 0x31c
 8001508:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800150c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001510:	460b      	mov	r3, r1
 8001512:	ca07      	ldmia	r2, {r0, r1, r2}
 8001514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001518:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800151c:	f5a3 714a 	sub.w	r1, r3, #808	; 0x328
 8001520:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001524:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001528:	460b      	mov	r3, r1
 800152a:	ca07      	ldmia	r2, {r0, r1, r2}
 800152c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001530:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001534:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001550:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001554:	edd3 6a01 	vldr	s13, [r3, #4]
 8001558:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800155c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001570:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001574:	edd3 6a02 	vldr	s13, [r3, #8]
 8001578:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800157c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001580:	edd3 7a02 	vldr	s15, [r3, #8]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001590:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001594:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80015ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015b0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015b4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015c6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015ca:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015d0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	105a      	asrs	r2, r3, #1
 80015d8:	4bd0      	ldr	r3, [pc, #832]	; (800191c <FusionAhrsUpdate+0xc40>)
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80015e0:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 80015e4:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015f0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015f4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015fa:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001612:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001626:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800162a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800163a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001642:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001646:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800164a:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800164c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001656:	f5a3 714f 	sub.w	r1, r3, #828	; 0x33c
 800165a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800165e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8001662:	460b      	mov	r3, r1
 8001664:	ca07      	ldmia	r2, {r0, r1, r2}
 8001666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800166a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001674:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001676:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800167a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001692:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001696:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800169a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800169e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016b6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016ba:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016c2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80016c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ca:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016da:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80016de:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016e6:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80016ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016f4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016f8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80016fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001702:	bf00      	nop
 8001704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001708:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800170c:	461c      	mov	r4, r3
 800170e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800171a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800171e:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8001722:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001726:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800172a:	460b      	mov	r3, r1
 800172c:	ca07      	ldmia	r2, {r0, r1, r2}
 800172e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001732:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001736:	f5a3 7155 	sub.w	r1, r3, #852	; 0x354
 800173a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800173e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8001742:	460b      	mov	r3, r1
 8001744:	ca07      	ldmia	r2, {r0, r1, r2}
 8001746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800174a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800174e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001752:	ed93 7a01 	vldr	s14, [r3, #4]
 8001756:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800175a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800175e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001766:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800176a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800176e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001772:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001776:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800177a:	edd3 7a01 	vldr	s15, [r3, #4]
 800177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800178a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800178e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001792:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001796:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800179a:	ed93 7a02 	vldr	s14, [r3, #8]
 800179e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017b2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017be:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017d2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80017d6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017de:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ea:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80017ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017fa:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80017fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001802:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001806:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800181a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800181e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001822:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001826:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 800182a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800183c:	461c      	mov	r4, r3
 800183e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800184a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800184e:	f5a3 7161 	sub.w	r1, r3, #900	; 0x384
 8001852:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001856:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800185a:	460b      	mov	r3, r1
 800185c:	ca07      	ldmia	r2, {r0, r1, r2}
 800185e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001862:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001866:	f5a3 715e 	sub.w	r1, r3, #888	; 0x378
 800186a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800186e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001872:	460b      	mov	r3, r1
 8001874:	ca07      	ldmia	r2, {r0, r1, r2}
 8001876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800187a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800187e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800188a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800189a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800189e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80018a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018b2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018c2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018c6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80018ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ce:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80018d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018da:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018de:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018ea:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80018ee:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80018f6:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80018fa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001904:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001908:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800190c:	461c      	mov	r4, r3
 800190e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800191a:	e004      	b.n	8001926 <FusionAhrsUpdate+0xc4a>
 800191c:	5f3759df 	.word	0x5f3759df
 8001920:	3c8efa35 	.word	0x3c8efa35
            break;
 8001924:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001926:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800192a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d107      	bne.n	800194e <FusionAhrsUpdate+0xc72>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 800193e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001942:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 800194e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001952:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800195e:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001960:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001964:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800196e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001972:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	dd2f      	ble.n	80019e6 <FusionAhrsUpdate+0xd0a>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001986:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800198a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001994:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001998:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ae:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ba:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80019be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019ca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 80019d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019d8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80019e4:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 80019e6:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8001920 <FusionAhrsUpdate+0xc44>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 80019ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019f6:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80019fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80019fe:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 8001a02:	460b      	mov	r3, r1
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001a0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a12:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a32:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a4a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a4e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a52:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a56:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a5a:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a6a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a72:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8001a76:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a88:	461c      	mov	r4, r3
 8001a8a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001a8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001a9a:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 8001a9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001aa2:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001aae:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001ab8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001ad8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001adc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ae0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae4:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001af0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001af8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001afc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b04:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b14:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b1c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8001b20:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b2a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b32:	461c      	mov	r4, r3
 8001b34:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001b38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b44:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 8001b48:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b4c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001b50:	460b      	mov	r3, r1
 8001b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b58:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b5c:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8001b60:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b64:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001b70:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001b98:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001b9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ba8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001bc0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bcc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001be0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001be4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8001bf0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c02:	461c      	mov	r4, r3
 8001c04:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001c08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c10:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c14:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8001c18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c1c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001c20:	460b      	mov	r3, r1
 8001c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c2c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001c36:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c3a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c4e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c52:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001c56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c5a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c62:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c6e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c72:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001c76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c7a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001c7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c82:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c8e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c92:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001c96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001c9a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001c9e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ca8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cc2:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8001cc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cde:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8001ce2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ce6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8001cea:	460b      	mov	r3, r1
 8001cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001cf2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001cf6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cfe:	eeb1 7a67 	vneg.f32	s14, s15
 8001d02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d16:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d1e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d36:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d3e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d42:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d56:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d7e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d9e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001da2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001da6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001daa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dbe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001dc2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001dc6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001dd6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001de6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001df2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e02:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e06:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e0a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e0e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e26:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e2a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001e2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e32:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e4e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e52:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e6e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e72:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e7a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e8e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e92:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001e96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001e9a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e9e:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ebc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec0:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8001ec4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ec8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4614      	mov	r4, r2
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ed8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001edc:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8001ee0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee8:	4614      	mov	r4, r2
 8001eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001ef0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f00:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f10:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f14:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001f18:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f28:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f38:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f3c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001f40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f4c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f50:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f60:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f64:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001f68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f74:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f78:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f88:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f8c:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001f90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001f94:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f98:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fa2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fa6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001faa:	461c      	mov	r4, r3
 8001fac:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001fb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001fc4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001fc8:	f103 040c 	add.w	r4, r3, #12
 8001fcc:	4613      	mov	r3, r2
 8001fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fd4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fd8:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8001fdc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fe0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	330c      	adds	r3, #12
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001ff0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ff4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002000:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002010:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002014:	edd3 6a01 	vldr	s13, [r3, #4]
 8002018:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800201c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002020:	edd3 7a01 	vldr	s15, [r3, #4]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002030:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002034:	edd3 6a02 	vldr	s13, [r3, #8]
 8002038:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800203c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002050:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002054:	edd3 6a03 	vldr	s13, [r3, #12]
 8002058:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800205c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002060:	edd3 7a03 	vldr	s15, [r3, #12]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206c:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8002070:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8002074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8002080:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002084:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002088:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 800208c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800208e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002098:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800209c:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800209e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020a2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	105a      	asrs	r2, r3, #1
 80020aa:	4bcc      	ldr	r3, [pc, #816]	; (80023dc <FusionAhrsUpdate+0x1700>)
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80020b2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80020b6:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80020b8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020c6:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80020c8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020dc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020e0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002108:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800210c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8002110:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002114:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002118:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800211a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800211e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002122:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800213a:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800213e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002142:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002146:	ed93 7a01 	vldr	s14, [r3, #4]
 800214a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002156:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800215a:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800215e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002162:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002166:	ed93 7a02 	vldr	s14, [r3, #8]
 800216a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002176:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800217a:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800217e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002182:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002186:	ed93 7a03 	vldr	s14, [r3, #12]
 800218a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002196:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800219a:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 800219e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80021a6:	f507 7462 	add.w	r4, r7, #904	; 0x388
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021b8:	461c      	mov	r4, r3
 80021ba:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 80021c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021c8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80021d2:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 80021d6:	f103 040c 	add.w	r4, r3, #12
 80021da:	4613      	mov	r3, r2
 80021dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 80021e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80021f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002206:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002214:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	edd3 7a05 	vldr	s15, [r3, #20]
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800222a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800222e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002232:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8002236:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800223a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	ed93 7a03 	vldr	s14, [r3, #12]
 8002244:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002248:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002256:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800225a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	edd3 6a05 	vldr	s13, [r3, #20]
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800227e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002282:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002286:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 800228a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800228e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	ed93 7a03 	vldr	s14, [r3, #12]
 8002298:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800229c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022b6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80022c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022c4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80022da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80022e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022ea:	f5a3 712f 	sub.w	r1, r3, #700	; 0x2bc
 80022ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022f2:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80022f6:	460b      	mov	r3, r1
 80022f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002302:	f5a3 712c 	sub.w	r1, r3, #688	; 0x2b0
 8002306:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800230a:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800230e:	460b      	mov	r3, r1
 8002310:	ca07      	ldmia	r2, {r0, r1, r2}
 8002312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002316:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800231a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002326:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002336:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800233a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800233e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002342:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002346:	ed93 7a01 	vldr	s14, [r3, #4]
 800234a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800234e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800235e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002362:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002366:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800236a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800236e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002372:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002376:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800237a:	edd3 7a02 	vldr	s15, [r3, #8]
 800237e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002382:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002386:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800238a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800238e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002392:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8002396:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800239a:	ca07      	ldmia	r2, {r0, r1, r2}
 800239c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023a4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80023a8:	461c      	mov	r4, r3
 80023aa:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80023ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 80023b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023ba:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80023c4:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 80023c8:	331c      	adds	r3, #28
 80023ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80023cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 80023d0:	bf00      	nop
 80023d2:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc90      	pop	{r4, r7}
 80023da:	4770      	bx	lr
 80023dc:	5f3759df 	.word	0x5f3759df

080023e0 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	61f8      	str	r0, [r7, #28]
 80023e8:	eeb0 5a40 	vmov.f32	s10, s0
 80023ec:	eef0 5a60 	vmov.f32	s11, s1
 80023f0:	eeb0 6a41 	vmov.f32	s12, s2
 80023f4:	eef0 6a61 	vmov.f32	s13, s3
 80023f8:	eeb0 7a42 	vmov.f32	s14, s4
 80023fc:	eef0 7a62 	vmov.f32	s15, s5
 8002400:	ed87 3a00 	vstr	s6, [r7]
 8002404:	ed87 5a04 	vstr	s10, [r7, #16]
 8002408:	edc7 5a05 	vstr	s11, [r7, #20]
 800240c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002410:	edc7 6a01 	vstr	s13, [r7, #4]
 8002414:	ed87 7a02 	vstr	s14, [r7, #8]
 8002418:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002432:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002436:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800243a:	ed97 5a01 	vldr	s10, [r7, #4]
 800243e:	edd7 5a02 	vldr	s11, [r7, #8]
 8002442:	ed97 6a03 	vldr	s12, [r7, #12]
 8002446:	edd7 6a04 	vldr	s13, [r7, #16]
 800244a:	ed97 7a05 	vldr	s14, [r7, #20]
 800244e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002452:	edd7 4a00 	vldr	s9, [r7]
 8002456:	eef0 1a45 	vmov.f32	s3, s10
 800245a:	eeb0 2a65 	vmov.f32	s4, s11
 800245e:	eef0 2a46 	vmov.f32	s5, s12
 8002462:	eeb0 0a66 	vmov.f32	s0, s13
 8002466:	eef0 0a47 	vmov.f32	s1, s14
 800246a:	eeb0 1a67 	vmov.f32	s2, s15
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7fe fc34 	bl	8000cdc <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002474:	69f8      	ldr	r0, [r7, #28]
 8002476:	f000 f862 	bl	800253e <FusionAhrsIsInitialising>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002488:	e00d      	b.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002494:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80024b0 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002498:	69f8      	ldr	r0, [r7, #28]
 800249a:	f000 f869 	bl	8002570 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80024a6:	bf00      	nop
 80024a8:	3730      	adds	r7, #48	; 0x30
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000

080024b4 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 80024b4:	b490      	push	{r4, r7}
 80024b6:	b096      	sub	sp, #88	; 0x58
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6178      	str	r0, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024c2:	330c      	adds	r3, #12
 80024c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80024ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024d2:	eef1 7a67 	vneg.f32	s15, s15
 80024d6:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80024da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024de:	eef1 7a67 	vneg.f32	s15, s15
 80024e2:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80024e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024ea:	eef1 7a67 	vneg.f32	s15, s15
 80024ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 80024f2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002500:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 800250e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002516:	ee06 0a10 	vmov	s12, r0
 800251a:	ee06 1a90 	vmov	s13, r1
 800251e:	ee07 2a10 	vmov	s14, r2
 8002522:	ee07 3a90 	vmov	s15, r3
}
 8002526:	eeb0 0a46 	vmov.f32	s0, s12
 800252a:	eef0 0a66 	vmov.f32	s1, s13
 800252e:	eeb0 1a47 	vmov.f32	s2, s14
 8002532:	eef0 1a67 	vmov.f32	s3, s15
 8002536:	3758      	adds	r7, #88	; 0x58
 8002538:	46bd      	mov	sp, r7
 800253a:	bc90      	pop	{r4, r7}
 800253c:	4770      	bx	lr

0800253e <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	bfcc      	ite	gt
 800255c:	2301      	movgt	r3, #1
 800255e:	2300      	movle	r3, #0
 8002560:	b2db      	uxtb	r3, r3
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b0af      	sub	sp, #188	; 0xbc
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	ed87 0a00 	vstr	s0, [r7]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002582:	330c      	adds	r3, #12
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800258a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800258e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002596:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800259a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800259e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80025aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80025ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	f00c f847 	bl	800e65c <sqrtf>
 80025ce:	eeb0 7a40 	vmov.f32	s14, s0
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80025de:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80025ee:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80025f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80025fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002602:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800260e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002612:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 800261e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800262c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002630:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 040c 	add.w	r4, r3, #12
 8002640:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	edd3 7a05 	vldr	s15, [r3, #20]
 8002656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a06 	vldr	s15, [r3, #24]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ed93 7a03 	vldr	s14, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edd3 7a03 	vldr	s15, [r3, #12]
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002682:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 6a04 	vldr	s13, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	eef0 0a67 	vmov.f32	s1, s15
 800269e:	eeb0 0a46 	vmov.f32	s0, s12
 80026a2:	f00b ffd9 	bl	800e658 <atan2f>
 80026a6:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 80026b0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80026b4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002854 <FusionAhrsSetYaw+0x2e4>
 80026b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 80026bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 80026d0:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026d4:	f00b fb10 	bl	800dcf8 <cosf>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 80026dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 80026ee:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80026f2:	f00b fe9d 	bl	800e430 <sinf>
 80026f6:	eef0 7a40 	vmov.f32	s15, s0
 80026fa:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 80026fe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002702:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002716:	330c      	adds	r3, #12
 8002718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 800271e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002722:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800272e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800273e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800274e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 800275e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002762:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800276e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800277e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800278a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800278e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279a:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 800279e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80027ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027da:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 80027de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80027ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80027fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800280e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 800281e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800282c:	f107 0418 	add.w	r4, r7, #24
 8002830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 040c 	add.w	r4, r3, #12
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 800284a:	bf00      	nop
 800284c:	37bc      	adds	r7, #188	; 0xbc
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	3c8efa35 	.word	0x3c8efa35

08002858 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	ed87 0a02 	vstr	s0, [r7, #8]
 8002864:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edd3 7a01 	vldr	s15, [r3, #4]
 800287a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80028c0 <FusionBiasInitialise+0x68>
 8002882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edc3 7a02 	vstr	s15, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	f3af 8000 	nop.w
 80028c0:	8c0eff43 	.word	0x8c0eff43
 80028c4:	3fc015bf 	.word	0x3fc015bf

080028c8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b0b4      	sub	sp, #208	; 0xd0
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	61f8      	str	r0, [r7, #28]
 80028d0:	eef0 6a40 	vmov.f32	s13, s0
 80028d4:	eeb0 7a60 	vmov.f32	s14, s1
 80028d8:	eef0 7a41 	vmov.f32	s15, s2
 80028dc:	edc7 6a04 	vstr	s13, [r7, #16]
 80028e0:	ed87 7a05 	vstr	s14, [r7, #20]
 80028e4:	edc7 7a06 	vstr	s15, [r7, #24]
 80028e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ec:	f107 0210 	add.w	r2, r7, #16
 80028f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	3210      	adds	r2, #16
 80028fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002904:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002914:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002918:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002924:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002934:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002938:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800293c:	ca07      	ldmia	r2, {r0, r1, r2}
 800293e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800294a:	ca07      	ldmia	r2, {r0, r1, r2}
 800294c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	eeb0 7ae7 	vabs.f32	s14, s15
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	dc17      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	dc0b      	bgt.n	8002998 <FusionBiasUpdate+0xd0>
 8002980:	edd7 7a06 	vldr	s15, [r7, #24]
 8002984:	eeb0 7ae7 	vabs.f32	s14, s15
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd0b      	ble.n	80029b0 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
        return gyroscope;
 80029a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029ae:	e08f      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d512      	bpl.n	80029ea <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80029da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029e8:	e072      	b.n	8002ad0 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	689c      	ldr	r4, [r3, #8]
 80029ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029f2:	f107 0210 	add.w	r2, r7, #16
 80029f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029fc:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002a00:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002a04:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8002a10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002a14:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002a20:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a24:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002a30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a34:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a42:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a52:	3210      	adds	r2, #16
 8002a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a5e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002a68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002a78:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002a88:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aaa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ac6:	f107 0210 	add.w	r2, r7, #16
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002adc:	ee06 1a90 	vmov	s13, r1
 8002ae0:	ee07 2a10 	vmov	s14, r2
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8002aec:	eef0 0a47 	vmov.f32	s1, s14
 8002af0:	eeb0 1a67 	vmov.f32	s2, s15
 8002af4:	37d0      	adds	r7, #208	; 0xd0
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc90      	pop	{r4, r7}
 8002afa:	4770      	bx	lr

08002afc <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b18:	eef0 0a67 	vmov.f32	s1, s15
 8002b1c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fe99 	bl	8002858 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 8002b26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b2a:	68b8      	ldr	r0, [r7, #8]
 8002b2c:	f7fe f87c 	bl	8000c28 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8002b30:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002b48 <initFusionAHRS+0x4c>
 8002b34:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fe f8b3 	bl	8000ca4 <FusionAhrsSetMagneticField>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	428c0000 	.word	0x428c0000

08002b4c <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b58:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002b5c:	6018      	str	r0, [r3, #0]
 8002b5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b62:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b66:	6019      	str	r1, [r3, #0]
 8002b68:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b6c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b76:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002b7a:	ed83 0a00 	vstr	s0, [r3]
 8002b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b82:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8002b86:	edc3 0a00 	vstr	s1, [r3]
 8002b8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b8e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002b92:	ed83 1a00 	vstr	s2, [r3]
 8002b96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b9a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002b9e:	edc3 1a00 	vstr	s3, [r3]
 8002ba2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ba6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002baa:	ed83 2a00 	vstr	s4, [r3]
 8002bae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bb2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bb6:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8002bba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bbe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002bc8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bcc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002bd6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bda:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002be4:	4bed      	ldr	r3, [pc, #948]	; (8002f9c <getFusionAHRS_6DoF+0x450>)
 8002be6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002bea:	461d      	mov	r5, r3
 8002bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c3c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c40:	461d      	mov	r5, r3
 8002c42:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c5a:	4ad1      	ldr	r2, [pc, #836]	; (8002fa0 <getFusionAHRS_6DoF+0x454>)
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c66:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8002c6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c6e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002c72:	460b      	mov	r3, r1
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c7e:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 8002c82:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c86:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c92:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c96:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8002c9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002c9e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002caa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cb2:	ed93 7a00 	vldr	s14, [r3]
 8002cb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cce:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002cd2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cde:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ce2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cf2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002cfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002cfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d1e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002d22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d26:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8002d2a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d34:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d38:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d42:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d58:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d5c:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8002d60:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d64:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8002d70:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d90:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d94:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8002d98:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002d9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002da4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002db8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dbc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8002dc0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dcc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002de0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002de4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002de8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002dec:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8002df0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dfa:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002dfe:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002e02:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e08:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e0c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8002e10:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e14:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e30:	461c      	mov	r4, r3
 8002e32:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8002e3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e42:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e46:	ed93 7a00 	vldr	s14, [r3]
 8002e4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e5e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e7e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e86:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8002ea6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eaa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eae:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ec6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eca:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ece:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ed2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ee6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002eea:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ef2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f0a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8002f0e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f12:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f16:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f1a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f2e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f32:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f36:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f4e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002f52:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f72:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002f76:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f7a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8002f7e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f88:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002f8c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002f90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 8002f96:	bf00      	nop
 8002f98:	e004      	b.n	8002fa4 <getFusionAHRS_6DoF+0x458>
 8002f9a:	bf00      	nop
 8002f9c:	0800fcb0 	.word	0x0800fcb0
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8002fa8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8002fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 8002fb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fba:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fbe:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fce:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fd2:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fe2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002fe6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8002fee:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ff2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ff6:	4aed      	ldr	r2, [pc, #948]	; (80033ac <getFusionAHRS_6DoF+0x860>)
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	4615      	mov	r5, r2
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800300c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800301a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003028:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003036:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800303a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800303e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003042:	460b      	mov	r3, r1
 8003044:	ca07      	ldmia	r2, {r0, r1, r2}
 8003046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800304a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800304e:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8003052:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003056:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800306e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8003072:	4acf      	ldr	r2, [pc, #828]	; (80033b0 <getFusionAHRS_6DoF+0x864>)
 8003074:	ca07      	ldmia	r2, {r0, r1, r2}
 8003076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800307a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800307e:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8003082:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003086:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800308a:	460b      	mov	r3, r1
 800308c:	ca07      	ldmia	r2, {r0, r1, r2}
 800308e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003092:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003096:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 800309a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800309e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80030a2:	460b      	mov	r3, r1
 80030a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030aa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ae:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80030b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030b6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80030ba:	460b      	mov	r3, r1
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80030c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030c6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030ca:	ed93 7a00 	vldr	s14, [r3]
 80030ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030e2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80030e6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80030ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030ee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80030fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800310a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800310e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003112:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003116:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800311a:	ed93 7a02 	vldr	s14, [r3, #8]
 800311e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003122:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003126:	edd3 7a02 	vldr	s15, [r3, #8]
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003132:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003136:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800313a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800313e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8003142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003146:	ca07      	ldmia	r2, {r0, r1, r2}
 8003148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800314c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003150:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003154:	ca07      	ldmia	r2, {r0, r1, r2}
 8003156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800315a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800315e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003162:	461c      	mov	r4, r3
 8003164:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800316c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003170:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003174:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 8003178:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800317c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8003180:	460b      	mov	r3, r1
 8003182:	ca07      	ldmia	r2, {r0, r1, r2}
 8003184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003188:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800318c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003190:	ed93 7a00 	vldr	s14, [r3]
 8003194:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003198:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031ac:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80031b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80031bc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031c0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031cc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80031d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031dc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80031e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80031e4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80031ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80031fc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003200:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003204:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8003208:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800320c:	ca07      	ldmia	r2, {r0, r1, r2}
 800320e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003212:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003216:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800321a:	ca07      	ldmia	r2, {r0, r1, r2}
 800321c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003220:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003224:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8003228:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800322c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003244:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003248:	461c      	mov	r4, r3
 800324a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800324e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003256:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800325a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003266:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003272:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003276:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800327a:	edd3 6a01 	vldr	s13, [r3, #4]
 800327e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003282:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003286:	edd3 7a01 	vldr	s15, [r3, #4]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003292:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003296:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800329a:	edd3 6a02 	vldr	s13, [r3, #8]
 800329e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80032ba:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80032be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ce:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80032e2:	edd3 6a04 	vldr	s13, [r3, #16]
 80032e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003302:	edd3 6a05 	vldr	s13, [r3, #20]
 8003306:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800330a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800331e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003322:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003326:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800332a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800332e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003332:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003336:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003342:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003346:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800334a:	edd3 6a07 	vldr	s13, [r3, #28]
 800334e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003352:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003356:	edd3 7a01 	vldr	s15, [r3, #4]
 800335a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003362:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003366:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800336a:	edd3 6a08 	vldr	s13, [r3, #32]
 800336e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003372:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003376:	edd3 7a02 	vldr	s15, [r3, #8]
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003386:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800338a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800338e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003392:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003396:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800339a:	ca07      	ldmia	r2, {r0, r1, r2}
 800339c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033a0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80033a8:	e006      	b.n	80033b8 <getFusionAHRS_6DoF+0x86c>
 80033aa:	bf00      	nop
 80033ac:	0800fcb0 	.word	0x0800fcb0
 80033b0:	2400000c 	.word	0x2400000c
 80033b4:	42652ee0 	.word	0x42652ee0
 80033b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033be:	bf00      	nop
 80033c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033c8:	461c      	mov	r4, r3
 80033ca:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80033ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 80033d6:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 80033da:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 80033de:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80033e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80033ea:	eeb0 0a66 	vmov.f32	s0, s13
 80033ee:	eef0 0a47 	vmov.f32	s1, s14
 80033f2:	eeb0 1a67 	vmov.f32	s2, s15
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7ff fa66 	bl	80028c8 <FusionBiasUpdate>
 80033fc:	eef0 6a40 	vmov.f32	s13, s0
 8003400:	eeb0 7a60 	vmov.f32	s14, s1
 8003404:	eef0 7a41 	vmov.f32	s15, s2
 8003408:	edc7 6a87 	vstr	s13, [r7, #540]	; 0x21c
 800340c:	ed87 7a88 	vstr	s14, [r7, #544]	; 0x220
 8003410:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 8003414:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003418:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003422:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800342a:	ed93 5a00 	vldr	s10, [r3]
 800342e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003432:	ed93 6a02 	vldr	s12, [r3, #8]
 8003436:	edd7 6a87 	vldr	s13, [r7, #540]	; 0x21c
 800343a:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 800343e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8003442:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003446:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800344a:	eeb0 3a64 	vmov.f32	s6, s9
 800344e:	eef0 1a45 	vmov.f32	s3, s10
 8003452:	eeb0 2a65 	vmov.f32	s4, s11
 8003456:	eef0 2a46 	vmov.f32	s5, s12
 800345a:	eeb0 0a66 	vmov.f32	s0, s13
 800345e:	eef0 0a47 	vmov.f32	s1, s14
 8003462:	eeb0 1a67 	vmov.f32	s2, s15
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f7fe ffba 	bl	80023e0 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800346c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003470:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	f7ff f81d 	bl	80024b4 <FusionAhrsGetQuaternion>
 800347a:	eeb0 6a40 	vmov.f32	s12, s0
 800347e:	eef0 6a60 	vmov.f32	s13, s1
 8003482:	eeb0 7a41 	vmov.f32	s14, s2
 8003486:	eef0 7a61 	vmov.f32	s15, s3
 800348a:	ed87 6a8d 	vstr	s12, [r7, #564]	; 0x234
 800348e:	edc7 6a8e 	vstr	s13, [r7, #568]	; 0x238
 8003492:	ed87 7a8f 	vstr	s14, [r7, #572]	; 0x23c
 8003496:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240
 800349a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800349e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034a2:	461c      	mov	r4, r3
 80034a4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80034a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80034ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034b2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034be:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034d2:	edc7 7abb 	vstr	s15, [r7, #748]	; 0x2ec
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80034d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034da:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034de:	ed93 7a02 	vldr	s14, [r3, #8]
 80034e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034e6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034f6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80034fa:	edd3 6a00 	vldr	s13, [r3]
 80034fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003502:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003506:	edd3 7a01 	vldr	s15, [r3, #4]
 800350a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003512:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003516:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800351a:	ed93 7a03 	vldr	s14, [r3, #12]
 800351e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003522:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003526:	edd3 7a03 	vldr	s15, [r3, #12]
 800352a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352e:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	eef0 0a67 	vmov.f32	s1, s15
 800353a:	eeb0 0a66 	vmov.f32	s0, s13
 800353e:	f00b f88b 	bl	800e658 <atan2f>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	edc7 7aba 	vstr	s15, [r7, #744]	; 0x2e8
    return radians * (180.0f / (float) M_PI);
 800354a:	edd7 7aba 	vldr	s15, [r7, #744]	; 0x2e8
 800354e:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 8003552:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003556:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800355a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800355e:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003562:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003566:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800356a:	ed93 7a01 	vldr	s14, [r3, #4]
 800356e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003572:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003576:	edd3 7a03 	vldr	s15, [r3, #12]
 800357a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003582:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003586:	edd3 6a00 	vldr	s13, [r3]
 800358a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800358e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003592:	edd3 7a02 	vldr	s15, [r3, #8]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	f00b f82b 	bl	800e600 <asinf>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	edc7 7ab9 	vstr	s15, [r7, #740]	; 0x2e4
    return radians * (180.0f / (float) M_PI);
 80035b6:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 80035ba:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035c6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80035ca:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80035ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035d2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035de:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ea:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035ee:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035f2:	edd3 6a00 	vldr	s13, [r3]
 80035f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035fa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80035fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003606:	ee77 6a67 	vsub.f32	s13, s14, s15
 800360a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800360e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8003612:	ed93 7a01 	vldr	s14, [r3, #4]
 8003616:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800361a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800361e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003626:	edd7 7abb 	vldr	s15, [r7, #748]	; 0x2ec
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	eef0 0a67 	vmov.f32	s1, s15
 8003632:	eeb0 0a66 	vmov.f32	s0, s13
 8003636:	f00b f80f 	bl	800e658 <atan2f>
 800363a:	eef0 7a40 	vmov.f32	s15, s0
 800363e:	edc7 7ab8 	vstr	s15, [r7, #736]	; 0x2e0
    return radians * (180.0f / (float) M_PI);
 8003642:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 8003646:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80033b4 <getFusionAHRS_6DoF+0x868>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 800364e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003652:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003656:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 800365a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800365e:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8003662:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003666:	ca07      	ldmia	r2, {r0, r1, r2}
 8003668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800366c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003670:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003674:	461c      	mov	r4, r3
 8003676:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800367a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800367e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 8003682:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003686:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003690:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 8003698:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 80036ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036b2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036bc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	bf00      	nop

080036d0 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	460b      	mov	r3, r1
 80036da:	ed87 0a01 	vstr	s0, [r7, #4]
 80036de:	edc7 0a00 	vstr	s1, [r7]
 80036e2:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 80036e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80037a4 <LPFTwoPole_Init+0xd4>
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d141      	bne.n	800377e <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 80036fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80037a8 <LPFTwoPole_Init+0xd8>
 8003702:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370e:	edd7 7a00 	vldr	s15, [r7]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	edd7 7a00 	vldr	s15, [r7]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 8003724:	edd7 7a05 	vldr	s15, [r7, #20]
 8003728:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80037ac <LPFTwoPole_Init+0xdc>
 800372c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003730:	edd7 7a00 	vldr	s15, [r7]
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	edd3 7a03 	vldr	s15, [r3, #12]
 8003746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003758:	edd7 7a05 	vldr	s15, [r7, #20]
 800375c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80037ac <LPFTwoPole_Init+0xdc>
 8003760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003764:	edd7 7a00 	vldr	s15, [r7]
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003774:	eef1 7a67 	vneg.f32	s15, s15
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40c90fdb 	.word	0x40c90fdb
 80037a8:	3fcfa0f9 	.word	0x3fcfa0f9
 80037ac:	400d2f1b 	.word	0x400d2f1b

080037b0 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80037d8:	edd7 7a00 	vldr	s15, [r7]
 80037dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	ed93 6a05 	vldr	s12, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80037fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	ee07 3a90 	vmov	s15, r3
}
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	ed2d 8b02 	vpush	{d8}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003830:	edc7 0a01 	vstr	s1, [r7, #4]
 8003834:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003838:	edd7 7a02 	vldr	s15, [r7, #8]
 800383c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003840:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003920 <NotchFilterInit+0x100>
 8003844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800384c:	edc7 7a06 	vstr	s15, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003850:	edd7 7a01 	vldr	s15, [r7, #4]
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003920 <NotchFilterInit+0x100>
 800385c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003860:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003864:	edc7 7a05 	vstr	s15, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 8003868:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800386c:	edd7 7a00 	vldr	s15, [r7]
 8003870:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003874:	edd7 7a06 	vldr	s15, [r7, #24]
 8003878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800387c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003880:	edd7 7a00 	vldr	s15, [r7]
 8003884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	f00a fd7a 	bl	800e384 <tanf>
 8003890:	eef0 7a40 	vmov.f32	s15, s0
 8003894:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003898:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 800389c:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80038b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 80038be:	ed97 7a05 	vldr	s14, [r7, #20]
 80038c2:	edd7 7a00 	vldr	s15, [r7]
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	e013      	b.n	8003906 <NotchFilterInit+0xe6>
	{
		filt->x[n] = 0.0f;
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3304      	adds	r3, #4
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	dde8      	ble.n	80038de <NotchFilterInit+0xbe>
	}
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	ecbd 8b02 	vpop	{d8}
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	f3af 8000 	nop.w
 8003920:	54442d18 	.word	0x54442d18
 8003924:	401921fb 	.word	0x401921fb

08003928 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	edd3 7a02 	vldr	s15, [r3, #8]
 8003966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003978:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	edd3 7a04 	vldr	s15, [r3, #16]
 8003996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399a:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80039a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80039b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	ed93 6a00 	vldr	s12, [r3]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80039d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d8:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	ed93 7a00 	vldr	s14, [r3]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
}
 80039fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a22:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a28:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a40:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a46:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a5e:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a82:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa0:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aaa:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003abe:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <MX_GPIO_Init+0x16c>)
 8003aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4828      	ldr	r0, [pc, #160]	; (8003b7c <MX_GPIO_Init+0x170>)
 8003adc:	f003 f91a 	bl	8006d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003ae6:	4826      	ldr	r0, [pc, #152]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003ae8:	f003 f914 	bl	8006d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K1_Pin;
 8003aec:	2308      	movs	r3, #8
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K1_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	4619      	mov	r1, r3
 8003afe:	4821      	ldr	r0, [pc, #132]	; (8003b84 <MX_GPIO_Init+0x178>)
 8003b00:	f002 ff58 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4818      	ldr	r0, [pc, #96]	; (8003b7c <MX_GPIO_Init+0x170>)
 8003b1c:	f002 ff4a 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_K2_Pin;
 8003b20:	2320      	movs	r3, #32
 8003b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b24:	2300      	movs	r3, #0
 8003b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Switch_K2_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	f107 031c 	add.w	r3, r7, #28
 8003b30:	4619      	mov	r1, r3
 8003b32:	4815      	ldr	r0, [pc, #84]	; (8003b88 <MX_GPIO_Init+0x17c>)
 8003b34:	f002 ff3e 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003b52:	f002 ff2f 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BMI160_INT_Pin|MPU9250_INT_Pin;
 8003b56:	2360      	movs	r3, #96	; 0x60
 8003b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_GPIO_Init+0x174>)
 8003b6a:	f002 ff23 	bl	80069b4 <HAL_GPIO_Init>

}
 8003b6e:	bf00      	nop
 8003b70:	3730      	adds	r7, #48	; 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020000 	.word	0x58020000
 8003b80:	58020c00 	.word	0x58020c00
 8003b84:	58021000 	.word	0x58021000
 8003b88:	58020800 	.word	0x58020800

08003b8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <MX_I2C1_Init+0x7c>)
 8003b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <MX_I2C1_Init+0x80>)
 8003b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bc6:	480f      	ldr	r0, [pc, #60]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bc8:	f003 f8be 	bl	8006d48 <HAL_I2C_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bd2:	f000 fbff 	bl	80043d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bda:	f003 fe19 	bl	8007810 <HAL_I2CEx_ConfigAnalogFilter>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003be4:	f000 fbf6 	bl	80043d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be8:	2100      	movs	r1, #0
 8003bea:	4806      	ldr	r0, [pc, #24]	; (8003c04 <MX_I2C1_Init+0x78>)
 8003bec:	f003 fe5b 	bl	80078a6 <HAL_I2CEx_ConfigDigitalFilter>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bf6:	f000 fbed 	bl	80043d4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f003 fea0 	bl	8007940 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	24000224 	.word	0x24000224
 8003c08:	40005400 	.word	0x40005400
 8003c0c:	00401242 	.word	0x00401242

08003c10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <MX_I2C2_Init+0x7c>)
 8003c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401242;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <MX_I2C2_Init+0x80>)
 8003c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c4a:	480f      	ldr	r0, [pc, #60]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c4c:	f003 f87c 	bl	8006d48 <HAL_I2C_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003c56:	f000 fbbd 	bl	80043d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	480a      	ldr	r0, [pc, #40]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c5e:	f003 fdd7 	bl	8007810 <HAL_I2CEx_ConfigAnalogFilter>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003c68:	f000 fbb4 	bl	80043d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4806      	ldr	r0, [pc, #24]	; (8003c88 <MX_I2C2_Init+0x78>)
 8003c70:	f003 fe19 	bl	80078a6 <HAL_I2CEx_ConfigDigitalFilter>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003c7a:	f000 fbab 	bl	80043d4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f003 fe5e 	bl	8007940 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	24000270 	.word	0x24000270
 8003c8c:	40005800 	.word	0x40005800
 8003c90:	00401242 	.word	0x00401242

08003c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b0ba      	sub	sp, #232	; 0xe8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	22bc      	movs	r2, #188	; 0xbc
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f007 faf3 	bl	800b2a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a49      	ldr	r2, [pc, #292]	; (8003de4 <HAL_I2C_MspInit+0x150>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d142      	bne.n	8003d4a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cce:	f107 0318 	add.w	r3, r7, #24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fe4c 	bl	8008970 <HAL_RCCEx_PeriphCLKConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cde:	f000 fb79 	bl	80043d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce8:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d00:	23c0      	movs	r3, #192	; 0xc0
 8003d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d06:	2312      	movs	r3, #18
 8003d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4831      	ldr	r0, [pc, #196]	; (8003dec <HAL_I2C_MspInit+0x158>)
 8003d26:	f002 fe45 	bl	80069b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003d48:	e047      	b.n	8003dda <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <HAL_I2C_MspInit+0x15c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d142      	bne.n	8003dda <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d54:	2308      	movs	r3, #8
 8003d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d5e:	f107 0318 	add.w	r3, r7, #24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 fe04 	bl	8008970 <HAL_RCCEx_PeriphCLKConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8003d6e:	f000 fb31 	bl	80043d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d78:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d98:	2312      	movs	r3, #18
 8003d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003daa:	2304      	movs	r3, #4
 8003dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003db4:	4619      	mov	r1, r3
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <HAL_I2C_MspInit+0x158>)
 8003db8:	f002 fdfc 	bl	80069b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_I2C_MspInit+0x154>)
 8003dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	37e8      	adds	r7, #232	; 0xe8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40005400 	.word	0x40005400
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58020400 	.word	0x58020400
 8003df0:	40005800 	.word	0x40005800

08003df4 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <DWT_Init+0x28>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <DWT_Init+0x28>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <DWT_Init+0x2c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <DWT_Init+0x2c>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000edf0 	.word	0xe000edf0
 8003e20:	e0001000 	.word	0xe0001000

08003e24 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8003e24:	b4b0      	push	{r4, r5, r7}
 8003e26:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <micros+0x2c>)
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <micros+0x30>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <micros+0x34>)
 8003e32:	fba1 1303 	umull	r1, r3, r1, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	461c      	mov	r4, r3
 8003e40:	4615      	mov	r5, r2
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
}
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bcb0      	pop	{r4, r5, r7}
 8003e4e:	4770      	bx	lr
 8003e50:	e0001000 	.word	0xe0001000
 8003e54:	24000024 	.word	0x24000024
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4804      	ldr	r0, [pc, #16]	; (8003e84 <_write+0x28>)
 8003e74:	f006 f934 	bl	800a0e0 <HAL_UART_Transmit>
	return len;
 8003e78:	687b      	ldr	r3, [r7, #4]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	240004ec 	.word	0x240004ec

08003e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8e:	f002 fbeb 	bl	8006668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e92:	f000 fa25 	bl	80042e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e96:	f7ff fdb9 	bl	8003a0c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8003e9a:	f002 fb07 	bl	80064ac <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8003e9e:	f7ff fe75 	bl	8003b8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003ea2:	f7ff feb5 	bl	8003c10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Init DWT Clock for proper us time tick
  DWT_Init();
 8003ea6:	f7ff ffa5 	bl	8003df4 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003eaa:	4bd1      	ldr	r3, [pc, #836]	; (80041f0 <main+0x368>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	eef0 0a67 	vmov.f32	s1, s15
 8003eb4:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80041f4 <main+0x36c>
 8003eb8:	2101      	movs	r1, #1
 8003eba:	48cf      	ldr	r0, [pc, #828]	; (80041f8 <main+0x370>)
 8003ebc:	f7ff fc08 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003ec0:	4bcb      	ldr	r3, [pc, #812]	; (80041f0 <main+0x368>)
 8003ec2:	edd3 7a00 	vldr	s15, [r3]
 8003ec6:	eef0 0a67 	vmov.f32	s1, s15
 8003eca:	ed9f 0aca 	vldr	s0, [pc, #808]	; 80041f4 <main+0x36c>
 8003ece:	2101      	movs	r1, #1
 8003ed0:	48ca      	ldr	r0, [pc, #808]	; (80041fc <main+0x374>)
 8003ed2:	f7ff fbfd 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003ed6:	4bc6      	ldr	r3, [pc, #792]	; (80041f0 <main+0x368>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	eef0 0a67 	vmov.f32	s1, s15
 8003ee0:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80041f4 <main+0x36c>
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	48c6      	ldr	r0, [pc, #792]	; (8004200 <main+0x378>)
 8003ee8:	f7ff fbf2 	bl	80036d0 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003eec:	4bc0      	ldr	r3, [pc, #768]	; (80041f0 <main+0x368>)
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eef0 0a67 	vmov.f32	s1, s15
 8003ef6:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8004204 <main+0x37c>
 8003efa:	2101      	movs	r1, #1
 8003efc:	48c2      	ldr	r0, [pc, #776]	; (8004208 <main+0x380>)
 8003efe:	f7ff fbe7 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003f02:	4bbb      	ldr	r3, [pc, #748]	; (80041f0 <main+0x368>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	eef0 0a67 	vmov.f32	s1, s15
 8003f0c:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8004204 <main+0x37c>
 8003f10:	2101      	movs	r1, #1
 8003f12:	48be      	ldr	r0, [pc, #760]	; (800420c <main+0x384>)
 8003f14:	f7ff fbdc 	bl	80036d0 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003f18:	4bb5      	ldr	r3, [pc, #724]	; (80041f0 <main+0x368>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	eef0 0a67 	vmov.f32	s1, s15
 8003f22:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8004204 <main+0x37c>
 8003f26:	2101      	movs	r1, #1
 8003f28:	48b9      	ldr	r0, [pc, #740]	; (8004210 <main+0x388>)
 8003f2a:	f7ff fbd1 	bl	80036d0 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f2e:	4bb0      	ldr	r3, [pc, #704]	; (80041f0 <main+0x368>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	eeb0 1a67 	vmov.f32	s2, s15
 8003f38:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f3c:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8004214 <main+0x38c>
 8003f40:	48b5      	ldr	r0, [pc, #724]	; (8004218 <main+0x390>)
 8003f42:	f7ff fc6d 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f46:	4baa      	ldr	r3, [pc, #680]	; (80041f0 <main+0x368>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	eeb0 1a67 	vmov.f32	s2, s15
 8003f50:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f54:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8004214 <main+0x38c>
 8003f58:	48b0      	ldr	r0, [pc, #704]	; (800421c <main+0x394>)
 8003f5a:	f7ff fc61 	bl	8003820 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003f5e:	4ba4      	ldr	r3, [pc, #656]	; (80041f0 <main+0x368>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	eeb0 1a67 	vmov.f32	s2, s15
 8003f68:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f6c:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8004214 <main+0x38c>
 8003f70:	48ab      	ldr	r0, [pc, #684]	; (8004220 <main+0x398>)
 8003f72:	f7ff fc55 	bl	8003820 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8003f76:	4bab      	ldr	r3, [pc, #684]	; (8004224 <main+0x39c>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	48a9      	ldr	r0, [pc, #676]	; (8004228 <main+0x3a0>)
 8003f82:	f001 fd49 	bl	8005a18 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8003f86:	4b9a      	ldr	r3, [pc, #616]	; (80041f0 <main+0x368>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	4aa6      	ldr	r2, [pc, #664]	; (800422c <main+0x3a4>)
 8003f92:	49a7      	ldr	r1, [pc, #668]	; (8004230 <main+0x3a8>)
 8003f94:	48a7      	ldr	r0, [pc, #668]	; (8004234 <main+0x3ac>)
 8003f96:	f7fe fdb1 	bl	8002afc <initFusionAHRS>

  //Init sensors
	while (MPU6050_Init(&hi2c1, &imu_t));
 8003f9a:	bf00      	nop
 8003f9c:	49a6      	ldr	r1, [pc, #664]	; (8004238 <main+0x3b0>)
 8003f9e:	48a7      	ldr	r0, [pc, #668]	; (800423c <main+0x3b4>)
 8003fa0:	f000 fa1e 	bl	80043e0 <MPU6050_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f8      	bne.n	8003f9c <main+0x114>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 8003faa:	4ba3      	ldr	r3, [pc, #652]	; (8004238 <main+0x3b0>)
 8003fac:	7e1b      	ldrb	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d104      	bne.n	8003fbc <main+0x134>
	{
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2120      	movs	r1, #32
 8003fb6:	48a2      	ldr	r0, [pc, #648]	; (8004240 <main+0x3b8>)
 8003fb8:	f002 feac 	bl	8006d14 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Get system time in us
	timer_u64 = micros();
 8003fbc:	f7ff ff32 	bl	8003e24 <micros>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	499f      	ldr	r1, [pc, #636]	; (8004244 <main+0x3bc>)
 8003fc6:	e9c1 2300 	strd	r2, r3, [r1]

	if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 8003fca:	4b9e      	ldr	r3, [pc, #632]	; (8004244 <main+0x3bc>)
 8003fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fd0:	4b9d      	ldr	r3, [pc, #628]	; (8004248 <main+0x3c0>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	1a84      	subs	r4, r0, r2
 8003fd8:	eb61 0503 	sbc.w	r5, r1, r3
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fc5a 	bl	8000898 <__aeabi_ul2f>
 8003fe4:	ee07 0a10 	vmov	s14, r0
 8003fe8:	4b8e      	ldr	r3, [pc, #568]	; (8004224 <main+0x39c>)
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff6:	f2c0 8135 	blt.w	8004264 <main+0x3dc>
 8003ffa:	4b8f      	ldr	r3, [pc, #572]	; (8004238 <main+0x3b0>)
 8003ffc:	7e1b      	ldrb	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 8130 	bne.w	8004264 <main+0x3dc>
	{
		lastTime_u64 = micros();
 8004004:	f7ff ff0e 	bl	8003e24 <micros>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	498e      	ldr	r1, [pc, #568]	; (8004248 <main+0x3c0>)
 800400e:	e9c1 2300 	strd	r2, r3, [r1]

		//Read MPU6050 sensor data
		readMPU6050(&hi2c1, &imu_t);
 8004012:	4989      	ldr	r1, [pc, #548]	; (8004238 <main+0x3b0>)
 8004014:	4889      	ldr	r0, [pc, #548]	; (800423c <main+0x3b4>)
 8004016:	f000 fa49 	bl	80044ac <readMPU6050>

		//Get accelerometer data in "g" and run LPF
		accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.AccelX_MPU6050_f32));
 800401a:	4b87      	ldr	r3, [pc, #540]	; (8004238 <main+0x3b0>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	eeb0 0a67 	vmov.f32	s0, s15
 8004024:	4874      	ldr	r0, [pc, #464]	; (80041f8 <main+0x370>)
 8004026:	f7ff fbc3 	bl	80037b0 <LPFTwoPole_Update>
 800402a:	eef0 7a40 	vmov.f32	s15, s0
 800402e:	4b87      	ldr	r3, [pc, #540]	; (800424c <main+0x3c4>)
 8004030:	edc3 7a00 	vstr	s15, [r3]
		accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.AccelY_MPU6050_f32));
 8004034:	4b80      	ldr	r3, [pc, #512]	; (8004238 <main+0x3b0>)
 8004036:	edd3 7a01 	vldr	s15, [r3, #4]
 800403a:	eeb0 0a67 	vmov.f32	s0, s15
 800403e:	486f      	ldr	r0, [pc, #444]	; (80041fc <main+0x374>)
 8004040:	f7ff fbb6 	bl	80037b0 <LPFTwoPole_Update>
 8004044:	eef0 7a40 	vmov.f32	s15, s0
 8004048:	4b80      	ldr	r3, [pc, #512]	; (800424c <main+0x3c4>)
 800404a:	edc3 7a01 	vstr	s15, [r3, #4]
		accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.AccelZ_MPU6050_f32));
 800404e:	4b7a      	ldr	r3, [pc, #488]	; (8004238 <main+0x3b0>)
 8004050:	edd3 7a02 	vldr	s15, [r3, #8]
 8004054:	eeb0 0a67 	vmov.f32	s0, s15
 8004058:	4869      	ldr	r0, [pc, #420]	; (8004200 <main+0x378>)
 800405a:	f7ff fba9 	bl	80037b0 <LPFTwoPole_Update>
 800405e:	eef0 7a40 	vmov.f32	s15, s0
 8004062:	4b7a      	ldr	r3, [pc, #488]	; (800424c <main+0x3c4>)
 8004064:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get gyro data in "deg/s" and run LPF
		gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.GyroX_MPU6050_f32);
 8004068:	4b73      	ldr	r3, [pc, #460]	; (8004238 <main+0x3b0>)
 800406a:	edd3 7a03 	vldr	s15, [r3, #12]
 800406e:	eeb0 0a67 	vmov.f32	s0, s15
 8004072:	4869      	ldr	r0, [pc, #420]	; (8004218 <main+0x390>)
 8004074:	f7ff fc58 	bl	8003928 <NotchFilter_Update>
 8004078:	eef0 7a40 	vmov.f32	s15, s0
 800407c:	4b74      	ldr	r3, [pc, #464]	; (8004250 <main+0x3c8>)
 800407e:	edc3 7a00 	vstr	s15, [r3]
		gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.GyroY_MPU6050_f32);
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <main+0x3b0>)
 8004084:	edd3 7a04 	vldr	s15, [r3, #16]
 8004088:	eeb0 0a67 	vmov.f32	s0, s15
 800408c:	4863      	ldr	r0, [pc, #396]	; (800421c <main+0x394>)
 800408e:	f7ff fc4b 	bl	8003928 <NotchFilter_Update>
 8004092:	eef0 7a40 	vmov.f32	s15, s0
 8004096:	4b6e      	ldr	r3, [pc, #440]	; (8004250 <main+0x3c8>)
 8004098:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.GyroZ_MPU6050_f32);
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <main+0x3b0>)
 800409e:	edd3 7a05 	vldr	s15, [r3, #20]
 80040a2:	eeb0 0a67 	vmov.f32	s0, s15
 80040a6:	485e      	ldr	r0, [pc, #376]	; (8004220 <main+0x398>)
 80040a8:	f7ff fc3e 	bl	8003928 <NotchFilter_Update>
 80040ac:	eef0 7a40 	vmov.f32	s15, s0
 80040b0:	4b67      	ldr	r3, [pc, #412]	; (8004250 <main+0x3c8>)
 80040b2:	edc3 7a02 	vstr	s15, [r3, #8]

		//Put gyro data into Notch Filter to flat-out any data in specific frequency band
		gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 80040b6:	4b66      	ldr	r3, [pc, #408]	; (8004250 <main+0x3c8>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	4851      	ldr	r0, [pc, #324]	; (8004208 <main+0x380>)
 80040c2:	f7ff fb75 	bl	80037b0 <LPFTwoPole_Update>
 80040c6:	eef0 7a40 	vmov.f32	s15, s0
 80040ca:	4b62      	ldr	r3, [pc, #392]	; (8004254 <main+0x3cc>)
 80040cc:	edc3 7a00 	vstr	s15, [r3]
		gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 80040d0:	4b5f      	ldr	r3, [pc, #380]	; (8004250 <main+0x3c8>)
 80040d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040d6:	eeb0 0a67 	vmov.f32	s0, s15
 80040da:	484c      	ldr	r0, [pc, #304]	; (800420c <main+0x384>)
 80040dc:	f7ff fb68 	bl	80037b0 <LPFTwoPole_Update>
 80040e0:	eef0 7a40 	vmov.f32	s15, s0
 80040e4:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <main+0x3cc>)
 80040e6:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 80040ea:	4b59      	ldr	r3, [pc, #356]	; (8004250 <main+0x3c8>)
 80040ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f0:	eeb0 0a67 	vmov.f32	s0, s15
 80040f4:	4846      	ldr	r0, [pc, #280]	; (8004210 <main+0x388>)
 80040f6:	f7ff fb5b 	bl	80037b0 <LPFTwoPole_Update>
 80040fa:	eef0 7a40 	vmov.f32	s15, s0
 80040fe:	4b55      	ldr	r3, [pc, #340]	; (8004254 <main+0x3cc>)
 8004100:	edc3 7a02 	vstr	s15, [r3, #8]

		//Get state estimations, using quaternion and fusion-quaternion based estimators
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8004104:	4b51      	ldr	r3, [pc, #324]	; (800424c <main+0x3c4>)
 8004106:	edd3 5a00 	vldr	s11, [r3]
 800410a:	4b50      	ldr	r3, [pc, #320]	; (800424c <main+0x3c4>)
 800410c:	ed93 5a01 	vldr	s10, [r3, #4]
 8004110:	4b4e      	ldr	r3, [pc, #312]	; (800424c <main+0x3c4>)
 8004112:	edd3 4a02 	vldr	s9, [r3, #8]
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8004116:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <main+0x3cc>)
 8004118:	edd3 7a00 	vldr	s15, [r3]
 800411c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004120:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80041e8 <main+0x360>
 8004124:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8004128:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
				gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 800412c:	4b49      	ldr	r3, [pc, #292]	; (8004254 <main+0x3cc>)
 800412e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004136:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80041e8 <main+0x360>
 800413a:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 800413e:	eef7 3bc7 	vcvt.f32.f64	s7, d7
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8004142:	4b44      	ldr	r3, [pc, #272]	; (8004254 <main+0x3cc>)
 8004144:	edd3 7a02 	vldr	s15, [r3, #8]
 8004148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800414c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80041e8 <main+0x360>
 8004150:	ee27 7b06 	vmul.f64	d7, d7, d6
		quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8004154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004158:	eef0 2a67 	vmov.f32	s5, s15
 800415c:	eeb0 2a63 	vmov.f32	s4, s7
 8004160:	eef0 1a44 	vmov.f32	s3, s8
 8004164:	eeb0 1a64 	vmov.f32	s2, s9
 8004168:	eef0 0a45 	vmov.f32	s1, s10
 800416c:	eeb0 0a65 	vmov.f32	s0, s11
 8004170:	482d      	ldr	r0, [pc, #180]	; (8004228 <main+0x3a0>)
 8004172:	f001 fca3 	bl	8005abc <quaternionUpdate>

		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <main+0x3c4>)
 8004178:	edd3 5a00 	vldr	s11, [r3]
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <main+0x3c4>)
 800417e:	ed93 5a01 	vldr	s10, [r3, #4]
 8004182:	4b32      	ldr	r3, [pc, #200]	; (800424c <main+0x3c4>)
 8004184:	edd3 4a02 	vldr	s9, [r3, #8]
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <main+0x3cc>)
 800418a:	edd3 7a00 	vldr	s15, [r3]
 800418e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004192:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80041e8 <main+0x360>
 8004196:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 800419a:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
				accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 800419e:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <main+0x3cc>)
 80041a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80041a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041a8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80041e8 <main+0x360>
 80041ac:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80041b0:	eef7 3bc7 	vcvt.f32.f64	s7, d7
					gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <main+0x3cc>)
 80041b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041be:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80041e8 <main+0x360>
 80041c2:	ee27 7b06 	vmul.f64	d7, d7, d6
		getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 80041c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041ca:	eef0 2a67 	vmov.f32	s5, s15
 80041ce:	eeb0 2a63 	vmov.f32	s4, s7
 80041d2:	eef0 1a44 	vmov.f32	s3, s8
 80041d6:	eeb0 1a64 	vmov.f32	s2, s9
 80041da:	eef0 0a45 	vmov.f32	s1, s10
 80041de:	eeb0 0a65 	vmov.f32	s0, s11
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <main+0x3a4>)
 80041e4:	e038      	b.n	8004258 <main+0x3d0>
 80041e6:	bf00      	nop
 80041e8:	a2529d39 	.word	0xa2529d39
 80041ec:	3f91df46 	.word	0x3f91df46
 80041f0:	24000018 	.word	0x24000018
 80041f4:	43820000 	.word	0x43820000
 80041f8:	240003c4 	.word	0x240003c4
 80041fc:	240003dc 	.word	0x240003dc
 8004200:	240003f4 	.word	0x240003f4
 8004204:	43800000 	.word	0x43800000
 8004208:	2400040c 	.word	0x2400040c
 800420c:	24000424 	.word	0x24000424
 8004210:	2400043c 	.word	0x2400043c
 8004214:	42940000 	.word	0x42940000
 8004218:	24000364 	.word	0x24000364
 800421c:	24000384 	.word	0x24000384
 8004220:	240003a4 	.word	0x240003a4
 8004224:	2400001c 	.word	0x2400001c
 8004228:	240002d8 	.word	0x240002d8
 800422c:	24000354 	.word	0x24000354
 8004230:	24000324 	.word	0x24000324
 8004234:	24000308 	.word	0x24000308
 8004238:	240002bc 	.word	0x240002bc
 800423c:	24000224 	.word	0x24000224
 8004240:	58020000 	.word	0x58020000
 8004244:	24000478 	.word	0x24000478
 8004248:	24000480 	.word	0x24000480
 800424c:	24000454 	.word	0x24000454
 8004250:	24000460 	.word	0x24000460
 8004254:	2400046c 	.word	0x2400046c
 8004258:	491c      	ldr	r1, [pc, #112]	; (80042cc <main+0x444>)
 800425a:	481d      	ldr	r0, [pc, #116]	; (80042d0 <main+0x448>)
 800425c:	f7fe fc76 	bl	8002b4c <getFusionAHRS_6DoF>

		newData_u8 = TRUE; //Set newData to high for activate UART printer
 8004260:	2301      	movs	r3, #1
 8004262:	71fb      	strb	r3, [r7, #7]

	}//end of timer if

	if(newData_u8)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f43f aea8 	beq.w	8003fbc <main+0x134>
	{
		printf("%f, %f, %f, %f, %f, %f\r\n",
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL,
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <main+0x44c>)
 800426e:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 8004272:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL,
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <main+0x44c>)
 8004278:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 800427c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL,
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <main+0x44c>)
 8004282:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 8004286:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <main+0x450>)
 800428c:	edd3 5a06 	vldr	s11, [r3, #24]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 8004290:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <main+0x450>)
 8004296:	edd3 4a05 	vldr	s9, [r3, #20]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 800429a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <main+0x450>)
 80042a0:	edd3 3a07 	vldr	s7, [r3, #28]
		printf("%f, %f, %f, %f, %f, %f\r\n",
 80042a4:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80042a8:	ed8d 3b08 	vstr	d3, [sp, #32]
 80042ac:	ed8d 4b06 	vstr	d4, [sp, #24]
 80042b0:	ed8d 5b04 	vstr	d5, [sp, #16]
 80042b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80042b8:	ed8d 7b00 	vstr	d7, [sp]
 80042bc:	ec53 2b12 	vmov	r2, r3, d2
 80042c0:	4806      	ldr	r0, [pc, #24]	; (80042dc <main+0x454>)
 80042c2:	f007 fc37 	bl	800bb34 <iprintf>
		newData_u8 = FALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	71fb      	strb	r3, [r7, #7]
	timer_u64 = micros();
 80042ca:	e677      	b.n	8003fbc <main+0x134>
 80042cc:	24000324 	.word	0x24000324
 80042d0:	24000308 	.word	0x24000308
 80042d4:	24000354 	.word	0x24000354
 80042d8:	240002d8 	.word	0x240002d8
 80042dc:	0800fcd4 	.word	0x0800fcd4

080042e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b09c      	sub	sp, #112	; 0x70
 80042e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ea:	224c      	movs	r2, #76	; 0x4c
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f006 ffd6 	bl	800b2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	2220      	movs	r2, #32
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f006 ffd0 	bl	800b2a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004300:	2002      	movs	r0, #2
 8004302:	f003 fb41 	bl	8007988 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004306:	2300      	movs	r3, #0
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4b30      	ldr	r3, [pc, #192]	; (80043cc <SystemClock_Config+0xec>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <SystemClock_Config+0xec>)
 8004310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004314:	6193      	str	r3, [r2, #24]
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <SystemClock_Config+0xec>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <SystemClock_Config+0xf0>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <SystemClock_Config+0xf0>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800432c:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <SystemClock_Config+0xf0>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004338:	bf00      	nop
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <SystemClock_Config+0xec>)
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d1f8      	bne.n	800433a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004348:	2301      	movs	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800434c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004352:	2302      	movs	r3, #2
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004356:	2302      	movs	r3, #2
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800435a:	2302      	movs	r3, #2
 800435c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800435e:	2340      	movs	r3, #64	; 0x40
 8004360:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004362:	2302      	movs	r3, #2
 8004364:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800436a:	2308      	movs	r3, #8
 800436c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800436e:	230c      	movs	r3, #12
 8004370:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004372:	2300      	movs	r3, #0
 8004374:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800437a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fb3c 	bl	80079fc <HAL_RCC_OscConfig>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800438a:	f000 f823 	bl	80043d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800438e:	233f      	movs	r3, #63	; 0x3f
 8004390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004392:	2303      	movs	r3, #3
 8004394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800439a:	2308      	movs	r3, #8
 800439c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80043a2:	2340      	movs	r3, #64	; 0x40
 80043a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80043a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f003 ff4f 	bl	8008258 <HAL_RCC_ClockConfig>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80043c0:	f000 f808 	bl	80043d4 <Error_Handler>
  }
}
 80043c4:	bf00      	nop
 80043c6:	3770      	adds	r7, #112	; 0x70
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58024800 	.word	0x58024800
 80043d0:	58000400 	.word	0x58000400

080043d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043d8:	b672      	cpsid	i
}
 80043da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043dc:	e7fe      	b.n	80043dc <Error_Handler+0x8>
	...

080043e0 <MPU6050_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af04      	add	r7, sp, #16
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	// Init user variables

	DataStruct->CALIBRATIN_OK_u8 = 0;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	761a      	strb	r2, [r3, #24]

	//pre-def. vars
	uint8_t readData;

	printf("MPU6050 is starting... \r\n");
 80043f0:	4825      	ldr	r0, [pc, #148]	; (8004488 <MPU6050_Init+0xa8>)
 80043f2:	f007 fc25 	bl	800bc40 <puts>
	printf("-------------------------\r\n");
 80043f6:	4825      	ldr	r0, [pc, #148]	; (800448c <MPU6050_Init+0xac>)
 80043f8:	f007 fc22 	bl	800bc40 <puts>

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 80043fc:	2364      	movs	r3, #100	; 0x64
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	2301      	movs	r3, #1
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	f107 030f 	add.w	r3, r7, #15
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2301      	movs	r3, #1
 800440c:	2275      	movs	r2, #117	; 0x75
 800440e:	21d0      	movs	r1, #208	; 0xd0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f002 fe3d 	bl	8007090 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {
		printf("MPU6050 -WHO AM I- is: (Must return 104) %d\r\n", readData);
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	4619      	mov	r1, r3
 800441a:	481d      	ldr	r0, [pc, #116]	; (8004490 <MPU6050_Init+0xb0>)
 800441c:	f007 fb8a 	bl	800bb34 <iprintf>
		printf("-------------------------\r\n");
 8004420:	481a      	ldr	r0, [pc, #104]	; (800448c <MPU6050_Init+0xac>)
 8004422:	f007 fc0d 	bl	800bc40 <puts>
	}

	if (readData == 104) {
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b68      	cmp	r3, #104	; 0x68
 800442a:	d128      	bne.n	800447e <MPU6050_Init+0x9e>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 800442c:	4919      	ldr	r1, [pc, #100]	; (8004494 <MPU6050_Init+0xb4>)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fec2 	bl	80051b8 <MPU6050SelfTest>
		if(SerialDebugA){
			printf("MPU6050 Self-Test Succesful! \r\n");
 8004434:	4818      	ldr	r0, [pc, #96]	; (8004498 <MPU6050_Init+0xb8>)
 8004436:	f007 fc03 	bl	800bc40 <puts>
			printf("-------------------------\r\n");
 800443a:	4814      	ldr	r0, [pc, #80]	; (800448c <MPU6050_Init+0xac>)
 800443c:	f007 fc00 	bl	800bc40 <puts>
		}

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 8004440:	4b16      	ldr	r3, [pc, #88]	; (800449c <MPU6050_Init+0xbc>)
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <MPU6050_Init+0xc0>)
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa8a 	bl	8004960 <calibrateMPU6050>
		if(SerialDebugA){
			printf("MPU6050 Calibration Succesful! \r\n");
 800444c:	4815      	ldr	r0, [pc, #84]	; (80044a4 <MPU6050_Init+0xc4>)
 800444e:	f007 fbf7 	bl	800bc40 <puts>
			printf("-------------------------\r\n");
 8004452:	480e      	ldr	r0, [pc, #56]	; (800448c <MPU6050_Init+0xac>)
 8004454:	f007 fbf4 	bl	800bc40 <puts>
		}
		HAL_Delay(1000);
 8004458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445c:	f002 f996 	bl	800678c <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f99b 	bl	800479c <initMPU6050>
		if(SerialDebugA){
			printf("MPU6050 Init Succesful! \r\n");
 8004466:	4810      	ldr	r0, [pc, #64]	; (80044a8 <MPU6050_Init+0xc8>)
 8004468:	f007 fbea 	bl	800bc40 <puts>
			printf("-------------------------\r\n");
 800446c:	4807      	ldr	r0, [pc, #28]	; (800448c <MPU6050_Init+0xac>)
 800446e:	f007 fbe7 	bl	800bc40 <puts>
		}
		HAL_Delay(1000);
 8004472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004476:	f002 f989 	bl	800678c <HAL_Delay>

		return 0;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <MPU6050_Init+0xa0>
	}
	return 1; // Loop forever if communication doesn't happen
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	0800fcf0 	.word	0x0800fcf0
 800448c:	0800fd0c 	.word	0x0800fd0c
 8004490:	0800fd28 	.word	0x0800fd28
 8004494:	240004b8 	.word	0x240004b8
 8004498:	0800fd58 	.word	0x0800fd58
 800449c:	240004ac 	.word	0x240004ac
 80044a0:	240004a0 	.word	0x240004a0
 80044a4:	0800fd78 	.word	0x0800fd78
 80044a8:	0800fd9c 	.word	0x0800fd9c

080044ac <readMPU6050>:

void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80044b6:	2364      	movs	r3, #100	; 0x64
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	2301      	movs	r3, #1
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	f107 030f 	add.w	r3, r7, #15
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2301      	movs	r3, #1
 80044c6:	223a      	movs	r2, #58	; 0x3a
 80044c8:	21d0      	movs	r1, #208	; 0xd0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f002 fde0 	bl	8007090 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d07d      	beq.n	80045d6 <readMPU6050+0x12a>
		readMPU6050AccelData(I2Cx, accelCount_MPU6050);  // Read the x/y/z adc values
 80044da:	4941      	ldr	r1, [pc, #260]	; (80045e0 <readMPU6050+0x134>)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8f7 	bl	80046d0 <readMPU6050AccelData>
		getMPU6050Ares();
 80044e2:	f000 f8c5 	bl	8004670 <getMPU6050Ares>

		// Now we'll calculate the accleration value into actual g's
		ax_MPU6050 = (float)accelCount_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 80044e6:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <readMPU6050+0x134>)
 80044e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f4:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <readMPU6050+0x138>)
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <readMPU6050+0x13c>)
 8004500:	edc3 7a00 	vstr	s15, [r3]
		ay_MPU6050 = (float)accelCount_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 8004504:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <readMPU6050+0x134>)
 8004506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <readMPU6050+0x138>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451c:	4b33      	ldr	r3, [pc, #204]	; (80045ec <readMPU6050+0x140>)
 800451e:	edc3 7a00 	vstr	s15, [r3]
		az_MPU6050 = (float)accelCount_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 8004522:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <readMPU6050+0x134>)
 8004524:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <readMPU6050+0x138>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <readMPU6050+0x144>)
 800453c:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX_MPU6050_f32 = ax_MPU6050;
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <readMPU6050+0x13c>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY_MPU6050_f32 = ay_MPU6050;
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <readMPU6050+0x140>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ_MPU6050_f32 = az_MPU6050;
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <readMPU6050+0x144>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	609a      	str	r2, [r3, #8]

		readMPU6050GyroData(I2Cx, gyroCount_MPU6050);  // Read the x/y/z adc values
 8004558:	4926      	ldr	r1, [pc, #152]	; (80045f4 <readMPU6050+0x148>)
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8eb 	bl	8004736 <readMPU6050GyroData>
		getMPU6050Gres();
 8004560:	f000 f852 	bl	8004608 <getMPU6050Gres>

		// Calculate the gyro value into actual degrees per second
		gx_MPU6050 = (float)gyroCount_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <readMPU6050+0x148>)
 8004566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <readMPU6050+0x14c>)
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <readMPU6050+0x150>)
 800457e:	edc3 7a00 	vstr	s15, [r3]
		gy_MPU6050 = (float)gyroCount_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <readMPU6050+0x148>)
 8004584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <readMPU6050+0x14c>)
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <readMPU6050+0x154>)
 800459c:	edc3 7a00 	vstr	s15, [r3]
		gz_MPU6050 = (float)gyroCount_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <readMPU6050+0x148>)
 80045a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <readMPU6050+0x14c>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <readMPU6050+0x158>)
 80045ba:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX_MPU6050_f32 = gx_MPU6050;
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <readMPU6050+0x150>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY_MPU6050_f32 = gy_MPU6050;
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <readMPU6050+0x154>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ_MPU6050_f32 = gz_MPU6050;
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <readMPU6050+0x158>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	615a      	str	r2, [r3, #20]
	}
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	24000490 	.word	0x24000490
 80045e4:	24000488 	.word	0x24000488
 80045e8:	240004d0 	.word	0x240004d0
 80045ec:	240004d4 	.word	0x240004d4
 80045f0:	240004d8 	.word	0x240004d8
 80045f4:	24000498 	.word	0x24000498
 80045f8:	2400048c 	.word	0x2400048c
 80045fc:	240004dc 	.word	0x240004dc
 8004600:	240004e0 	.word	0x240004e0
 8004604:	240004e4 	.word	0x240004e4

08004608 <getMPU6050Gres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMPU6050Gres() {
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <getMPU6050Gres+0x50>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d81b      	bhi.n	800464c <getMPU6050Gres+0x44>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <getMPU6050Gres+0x14>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	08004635 	.word	0x08004635
 8004624:	0800463d 	.word	0x0800463d
 8004628:	08004645 	.word	0x08004645
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <getMPU6050Gres+0x54>)
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <getMPU6050Gres+0x58>)
 8004630:	601a      	str	r2, [r3, #0]
          break;
 8004632:	e00b      	b.n	800464c <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <getMPU6050Gres+0x54>)
 8004636:	4a0b      	ldr	r2, [pc, #44]	; (8004664 <getMPU6050Gres+0x5c>)
 8004638:	601a      	str	r2, [r3, #0]
          break;
 800463a:	e007      	b.n	800464c <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <getMPU6050Gres+0x54>)
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <getMPU6050Gres+0x60>)
 8004640:	601a      	str	r2, [r3, #0]
          break;
 8004642:	e003      	b.n	800464c <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <getMPU6050Gres+0x54>)
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <getMPU6050Gres+0x64>)
 8004648:	601a      	str	r2, [r3, #0]
          break;
 800464a:	bf00      	nop
  }
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	24000020 	.word	0x24000020
 800465c:	2400048c 	.word	0x2400048c
 8004660:	3bfa0000 	.word	0x3bfa0000
 8004664:	3c7a0000 	.word	0x3c7a0000
 8004668:	3cfa0000 	.word	0x3cfa0000
 800466c:	3d7a0000 	.word	0x3d7a0000

08004670 <getMPU6050Ares>:

void getMPU6050Ares() {
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <getMPU6050Ares+0x58>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d81f      	bhi.n	80046bc <getMPU6050Ares+0x4c>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <getMPU6050Ares+0x14>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004695 	.word	0x08004695
 8004688:	0800469f 	.word	0x0800469f
 800468c:	080046a9 	.word	0x080046a9
 8004690:	080046b3 	.word	0x080046b3
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <getMPU6050Ares+0x5c>)
 8004696:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800469a:	601a      	str	r2, [r3, #0]
          break;
 800469c:	e00e      	b.n	80046bc <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <getMPU6050Ares+0x5c>)
 80046a0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80046a4:	601a      	str	r2, [r3, #0]
          break;
 80046a6:	e009      	b.n	80046bc <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 80046a8:	4b08      	ldr	r3, [pc, #32]	; (80046cc <getMPU6050Ares+0x5c>)
 80046aa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80046ae:	601a      	str	r2, [r3, #0]
          break;
 80046b0:	e004      	b.n	80046bc <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <getMPU6050Ares+0x5c>)
 80046b4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80046b8:	601a      	str	r2, [r3, #0]
          break;
 80046ba:	bf00      	nop
  }
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	24000021 	.word	0x24000021
 80046cc:	24000488 	.word	0x24000488

080046d0 <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af04      	add	r7, sp, #16
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80046da:	2364      	movs	r3, #100	; 0x64
 80046dc:	9302      	str	r3, [sp, #8]
 80046de:	2306      	movs	r3, #6
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2301      	movs	r3, #1
 80046ea:	223b      	movs	r2, #59	; 0x3b
 80046ec:	21d0      	movs	r1, #208	; 0xd0
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 fcce 	bl	8007090 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80046f4:	7a3b      	ldrb	r3, [r7, #8]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	7a7b      	ldrb	r3, [r7, #9]
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b21a      	sxth	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004706:	7abb      	ldrb	r3, [r7, #10]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	b219      	sxth	r1, r3
 800470c:	7afb      	ldrb	r3, [r7, #11]
 800470e:	b21a      	sxth	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	3302      	adds	r3, #2
 8004714:	430a      	orrs	r2, r1
 8004716:	b212      	sxth	r2, r2
 8004718:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 800471a:	7b3b      	ldrb	r3, [r7, #12]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	b219      	sxth	r1, r3
 8004720:	7b7b      	ldrb	r3, [r7, #13]
 8004722:	b21a      	sxth	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	3304      	adds	r3, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	b212      	sxth	r2, r2
 800472c:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004736:	b580      	push	{r7, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af04      	add	r7, sp, #16
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8004740:	2364      	movs	r3, #100	; 0x64
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	2306      	movs	r3, #6
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	f107 0308 	add.w	r3, r7, #8
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2301      	movs	r3, #1
 8004750:	2243      	movs	r2, #67	; 0x43
 8004752:	21d0      	movs	r1, #208	; 0xd0
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f002 fc9b 	bl	8007090 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 800475a:	7a3b      	ldrb	r3, [r7, #8]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	b21a      	sxth	r2, r3
 8004760:	7a7b      	ldrb	r3, [r7, #9]
 8004762:	b21b      	sxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b21a      	sxth	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 800476c:	7abb      	ldrb	r3, [r7, #10]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	b219      	sxth	r1, r3
 8004772:	7afb      	ldrb	r3, [r7, #11]
 8004774:	b21a      	sxth	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3302      	adds	r3, #2
 800477a:	430a      	orrs	r2, r1
 800477c:	b212      	sxth	r2, r2
 800477e:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004780:	7b3b      	ldrb	r3, [r7, #12]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b219      	sxth	r1, r3
 8004786:	7b7b      	ldrb	r3, [r7, #13]
 8004788:	b21a      	sxth	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	430a      	orrs	r2, r1
 8004790:	b212      	sxth	r2, r2
 8004792:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af04      	add	r7, sp, #16
 80047a2:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80047a4:	2300      	movs	r3, #0
 80047a6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80047a8:	2364      	movs	r3, #100	; 0x64
 80047aa:	9302      	str	r3, [sp, #8]
 80047ac:	2301      	movs	r3, #1
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	f107 030e 	add.w	r3, r7, #14
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2301      	movs	r3, #1
 80047b8:	226b      	movs	r2, #107	; 0x6b
 80047ba:	21d0      	movs	r1, #208	; 0xd0
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f002 fb53 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80047c2:	2064      	movs	r0, #100	; 0x64
 80047c4:	f001 ffe2 	bl	800678c <HAL_Delay>

	writeData = 0x01;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80047cc:	2364      	movs	r3, #100	; 0x64
 80047ce:	9302      	str	r3, [sp, #8]
 80047d0:	2301      	movs	r3, #1
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	f107 030e 	add.w	r3, r7, #14
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2301      	movs	r3, #1
 80047dc:	226b      	movs	r2, #107	; 0x6b
 80047de:	21d0      	movs	r1, #208	; 0xd0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f002 fb41 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80047e6:	2064      	movs	r0, #100	; 0x64
 80047e8:	f001 ffd0 	bl	800678c <HAL_Delay>

	writeData = 0x03;
 80047ec:	2303      	movs	r3, #3
 80047ee:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 80047f0:	2364      	movs	r3, #100	; 0x64
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	2301      	movs	r3, #1
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	f107 030e 	add.w	r3, r7, #14
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2301      	movs	r3, #1
 8004800:	221a      	movs	r2, #26
 8004802:	21d0      	movs	r1, #208	; 0xd0
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f002 fb2f 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800480a:	2064      	movs	r0, #100	; 0x64
 800480c:	f001 ffbe 	bl	800678c <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8004810:	2300      	movs	r3, #0
 8004812:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004814:	2364      	movs	r3, #100	; 0x64
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	2301      	movs	r3, #1
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f107 030e 	add.w	r3, r7, #14
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2301      	movs	r3, #1
 8004824:	2219      	movs	r2, #25
 8004826:	21d0      	movs	r1, #208	; 0xd0
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f002 fb1d 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800482e:	2064      	movs	r0, #100	; 0x64
 8004830:	f001 ffac 	bl	800678c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004834:	2364      	movs	r3, #100	; 0x64
 8004836:	9302      	str	r3, [sp, #8]
 8004838:	2301      	movs	r3, #1
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	f107 030f 	add.w	r3, r7, #15
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2301      	movs	r3, #1
 8004844:	221b      	movs	r2, #27
 8004846:	21d0      	movs	r1, #208	; 0xd0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f002 fc21 	bl	8007090 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	f023 0303 	bic.w	r3, r3, #3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	f023 0318 	bic.w	r3, r3, #24
 800485e:	b2db      	uxtb	r3, r3
 8004860:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <initMPU6050+0x1bc>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	b25a      	sxtb	r2, r3
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	b25b      	sxtb	r3, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	b25b      	sxtb	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8004876:	2064      	movs	r0, #100	; 0x64
 8004878:	f001 ff88 	bl	800678c <HAL_Delay>

	writeData = readData;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004880:	2364      	movs	r3, #100	; 0x64
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	2301      	movs	r3, #1
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f107 030e 	add.w	r3, r7, #14
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2301      	movs	r3, #1
 8004890:	221b      	movs	r2, #27
 8004892:	21d0      	movs	r1, #208	; 0xd0
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f002 fae7 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800489a:	2064      	movs	r0, #100	; 0x64
 800489c:	f001 ff76 	bl	800678c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 80048a0:	2364      	movs	r3, #100	; 0x64
 80048a2:	9302      	str	r3, [sp, #8]
 80048a4:	2301      	movs	r3, #1
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	f107 030f 	add.w	r3, r7, #15
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2301      	movs	r3, #1
 80048b0:	221c      	movs	r2, #28
 80048b2:	21d0      	movs	r1, #208	; 0xd0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f002 fbeb 	bl	8007090 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	f023 0318 	bic.w	r3, r3, #24
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <initMPU6050+0x1c0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	b25a      	sxtb	r2, r3
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	9302      	str	r3, [sp, #8]
 80048e0:	2301      	movs	r3, #1
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	f107 030e 	add.w	r3, r7, #14
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	2301      	movs	r3, #1
 80048ec:	221c      	movs	r2, #28
 80048ee:	21d0      	movs	r1, #208	; 0xd0
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 fab9 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80048f6:	2064      	movs	r0, #100	; 0x64
 80048f8:	f001 ff48 	bl	800678c <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 80048fc:	2364      	movs	r3, #100	; 0x64
 80048fe:	9302      	str	r3, [sp, #8]
 8004900:	2301      	movs	r3, #1
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	f107 030f 	add.w	r3, r7, #15
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2301      	movs	r3, #1
 800490c:	221d      	movs	r2, #29
 800490e:	21d0      	movs	r1, #208	; 0xd0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f002 fbbd 	bl	8007090 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	f023 030f 	bic.w	r3, r3, #15
 800491c:	b2db      	uxtb	r3, r3
 800491e:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	f043 0303 	orr.w	r3, r3, #3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 800492e:	2364      	movs	r3, #100	; 0x64
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	2301      	movs	r3, #1
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f107 030e 	add.w	r3, r7, #14
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2301      	movs	r3, #1
 800493e:	221d      	movs	r2, #29
 8004940:	21d0      	movs	r1, #208	; 0xd0
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f002 fa90 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004948:	2064      	movs	r0, #100	; 0x64
 800494a:	f001 ff1f 	bl	800678c <HAL_Delay>
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	24000020 	.word	0x24000020
 800495c:	24000021 	.word	0x24000021

08004960 <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 8004960:	b580      	push	{r7, lr}
 8004962:	b09e      	sub	sp, #120	; 0x78
 8004964:	af04      	add	r7, sp, #16
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800496e:	2300      	movs	r3, #0
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004972:	2300      	movs	r3, #0
 8004974:	643b      	str	r3, [r7, #64]	; 0x40
 8004976:	2300      	movs	r3, #0
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
 800497a:	2300      	movs	r3, #0
 800497c:	633b      	str	r3, [r7, #48]	; 0x30
 800497e:	2300      	movs	r3, #0
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	2300      	movs	r3, #0
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 800498c:	2364      	movs	r3, #100	; 0x64
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	2301      	movs	r3, #1
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2301      	movs	r3, #1
 800499c:	226b      	movs	r2, #107	; 0x6b
 800499e:	21d0      	movs	r1, #208	; 0xd0
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f002 fa61 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80049a6:	2064      	movs	r0, #100	; 0x64
 80049a8:	f001 fef0 	bl	800678c <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80049b2:	2364      	movs	r3, #100	; 0x64
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	2301      	movs	r3, #1
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2301      	movs	r3, #1
 80049c2:	226b      	movs	r2, #107	; 0x6b
 80049c4:	21d0      	movs	r1, #208	; 0xd0
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f002 fa4e 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 80049d2:	2364      	movs	r3, #100	; 0x64
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	2301      	movs	r3, #1
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2301      	movs	r3, #1
 80049e2:	226c      	movs	r2, #108	; 0x6c
 80049e4:	21d0      	movs	r1, #208	; 0xd0
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f002 fa3e 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80049ec:	20c8      	movs	r0, #200	; 0xc8
 80049ee:	f001 fecd 	bl	800678c <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 80049f8:	2364      	movs	r3, #100	; 0x64
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	2301      	movs	r3, #1
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	2238      	movs	r2, #56	; 0x38
 8004a0a:	21d0      	movs	r1, #208	; 0xd0
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f002 fa2b 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004a18:	2364      	movs	r3, #100	; 0x64
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2301      	movs	r3, #1
 8004a28:	2223      	movs	r2, #35	; 0x23
 8004a2a:	21d0      	movs	r1, #208	; 0xd0
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f002 fa1b 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004a38:	2364      	movs	r3, #100	; 0x64
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2301      	movs	r3, #1
 8004a48:	226b      	movs	r2, #107	; 0x6b
 8004a4a:	21d0      	movs	r1, #208	; 0xd0
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f002 fa0b 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004a58:	2364      	movs	r3, #100	; 0x64
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2301      	movs	r3, #1
 8004a68:	2224      	movs	r2, #36	; 0x24
 8004a6a:	21d0      	movs	r1, #208	; 0xd0
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f002 f9fb 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004a78:	2364      	movs	r3, #100	; 0x64
 8004a7a:	9302      	str	r3, [sp, #8]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2301      	movs	r3, #1
 8004a88:	226a      	movs	r2, #106	; 0x6a
 8004a8a:	21d0      	movs	r1, #208	; 0xd0
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f002 f9eb 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004a92:	230c      	movs	r3, #12
 8004a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004a98:	2364      	movs	r3, #100	; 0x64
 8004a9a:	9302      	str	r3, [sp, #8]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	226a      	movs	r2, #106	; 0x6a
 8004aaa:	21d0      	movs	r1, #208	; 0xd0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f002 f9db 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004ab2:	200f      	movs	r0, #15
 8004ab4:	f001 fe6a 	bl	800678c <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8004abe:	2364      	movs	r3, #100	; 0x64
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2301      	movs	r3, #1
 8004ace:	221a      	movs	r2, #26
 8004ad0:	21d0      	movs	r1, #208	; 0xd0
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f002 f9c8 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004ade:	2364      	movs	r3, #100	; 0x64
 8004ae0:	9302      	str	r3, [sp, #8]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2301      	movs	r3, #1
 8004aee:	2219      	movs	r2, #25
 8004af0:	21d0      	movs	r1, #208	; 0xd0
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f002 f9b8 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004afe:	2364      	movs	r3, #100	; 0x64
 8004b00:	9302      	str	r3, [sp, #8]
 8004b02:	2301      	movs	r3, #1
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	221b      	movs	r2, #27
 8004b10:	21d0      	movs	r1, #208	; 0xd0
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f002 f9a8 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004b1e:	2364      	movs	r3, #100	; 0x64
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	2301      	movs	r3, #1
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	221c      	movs	r2, #28
 8004b30:	21d0      	movs	r1, #208	; 0xd0
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f002 f998 	bl	8006e68 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004b38:	2383      	movs	r3, #131	; 0x83
 8004b3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b42:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004b4c:	2364      	movs	r3, #100	; 0x64
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	2301      	movs	r3, #1
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	226a      	movs	r2, #106	; 0x6a
 8004b5e:	21d0      	movs	r1, #208	; 0xd0
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f002 f981 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004b66:	2378      	movs	r3, #120	; 0x78
 8004b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004b6c:	2364      	movs	r3, #100	; 0x64
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2301      	movs	r3, #1
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2223      	movs	r2, #35	; 0x23
 8004b7e:	21d0      	movs	r1, #208	; 0xd0
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f002 f971 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004b86:	2028      	movs	r0, #40	; 0x28
 8004b88:	f001 fe00 	bl	800678c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004b92:	2364      	movs	r3, #100	; 0x64
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	2301      	movs	r3, #1
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	2223      	movs	r2, #35	; 0x23
 8004ba4:	21d0      	movs	r1, #208	; 0xd0
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f002 f95e 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004bac:	2364      	movs	r3, #100	; 0x64
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2272      	movs	r2, #114	; 0x72
 8004bbe:	21d0      	movs	r1, #208	; 0xd0
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f002 fa65 	bl	8007090 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004bc6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	b21a      	sxth	r2, r3
 8004bce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004bdc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004be0:	4a5a      	ldr	r2, [pc, #360]	; (8004d4c <calibrateMPU6050+0x3ec>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004bf2:	e077      	b.n	8004ce4 <calibrateMPU6050+0x384>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	833b      	strh	r3, [r7, #24]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	837b      	strh	r3, [r7, #26]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	83bb      	strh	r3, [r7, #28]
 8004c00:	2300      	movs	r3, #0
 8004c02:	823b      	strh	r3, [r7, #16]
 8004c04:	2300      	movs	r3, #0
 8004c06:	827b      	strh	r3, [r7, #18]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004c0c:	2364      	movs	r3, #100	; 0x64
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	230c      	movs	r3, #12
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	2274      	movs	r2, #116	; 0x74
 8004c1e:	21d0      	movs	r1, #208	; 0xd0
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f002 fa35 	bl	8007090 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004c26:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	b21a      	sxth	r2, r3
 8004c2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004c3a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	b21a      	sxth	r2, r3
 8004c42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004c4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	b21a      	sxth	r2, r3
 8004c56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004c62:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	b21a      	sxth	r2, r3
 8004c6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004c76:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004c8a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b21a      	sxth	r2, r3
 8004c92:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004c96:	b21b      	sxth	r3, r3
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004cae:	4413      	add	r3, r2
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004ccc:	4413      	add	r3, r2
 8004cce:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004cda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ce4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004ce8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d381      	bcc.n	8004bf4 <calibrateMPU6050+0x294>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8004cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cfe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8004d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d0a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8004d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d16:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8004d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d26:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd08      	ble.n	8004d50 <calibrateMPU6050+0x3f0>
 8004d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d48:	e007      	b.n	8004d5a <calibrateMPU6050+0x3fa>
 8004d4a:	bf00      	nop
 8004d4c:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8004d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d56:	4413      	add	r3, r2
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5c:	425b      	negs	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da00      	bge.n	8004d64 <calibrateMPU6050+0x404>
 8004d62:	3303      	adds	r3, #3
 8004d64:	109b      	asrs	r3, r3, #2
 8004d66:	121b      	asrs	r3, r3, #8
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	425b      	negs	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da00      	bge.n	8004d78 <calibrateMPU6050+0x418>
 8004d76:	3303      	adds	r3, #3
 8004d78:	109b      	asrs	r3, r3, #2
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	425b      	negs	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	da00      	bge.n	8004d8a <calibrateMPU6050+0x42a>
 8004d88:	3303      	adds	r3, #3
 8004d8a:	109b      	asrs	r3, r3, #2
 8004d8c:	121b      	asrs	r3, r3, #8
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	425b      	negs	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da00      	bge.n	8004d9e <calibrateMPU6050+0x43e>
 8004d9c:	3303      	adds	r3, #3
 8004d9e:	109b      	asrs	r3, r3, #2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8004da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da8:	425b      	negs	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da00      	bge.n	8004db0 <calibrateMPU6050+0x450>
 8004dae:	3303      	adds	r3, #3
 8004db0:	109b      	asrs	r3, r3, #2
 8004db2:	121b      	asrs	r3, r3, #8
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8004dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da00      	bge.n	8004dc4 <calibrateMPU6050+0x464>
 8004dc2:	3303      	adds	r3, #3
 8004dc4:	109b      	asrs	r3, r3, #2
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8004dcc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004dd4:	2364      	movs	r3, #100	; 0x64
 8004dd6:	9302      	str	r3, [sp, #8]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2301      	movs	r3, #1
 8004de4:	2213      	movs	r2, #19
 8004de6:	21d0      	movs	r1, #208	; 0xd0
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f002 f83d 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004dee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004df2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004df6:	2364      	movs	r3, #100	; 0x64
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2301      	movs	r3, #1
 8004e06:	2214      	movs	r2, #20
 8004e08:	21d0      	movs	r1, #208	; 0xd0
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f002 f82c 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004e10:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004e18:	2364      	movs	r3, #100	; 0x64
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2301      	movs	r3, #1
 8004e28:	2215      	movs	r2, #21
 8004e2a:	21d0      	movs	r1, #208	; 0xd0
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f002 f81b 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004e32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004e3a:	2364      	movs	r3, #100	; 0x64
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	2216      	movs	r2, #22
 8004e4c:	21d0      	movs	r1, #208	; 0xd0
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f002 f80a 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004e54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004e5c:	2364      	movs	r3, #100	; 0x64
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	2301      	movs	r3, #1
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	2217      	movs	r2, #23
 8004e6e:	21d0      	movs	r1, #208	; 0xd0
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f001 fff9 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004e76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004e7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004e7e:	2364      	movs	r3, #100	; 0x64
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	2301      	movs	r3, #1
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	2218      	movs	r2, #24
 8004e90:	21d0      	movs	r1, #208	; 0xd0
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f001 ffe8 	bl	8006e68 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ea2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ec2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed6:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8004eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ee4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef8:	edc3 7a00 	vstr	s15, [r3]

		printf("-------------------------\r\n");
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	2300      	movs	r3, #0
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8004f08:	2364      	movs	r3, #100	; 0x64
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2301      	movs	r3, #1
 8004f18:	2277      	movs	r2, #119	; 0x77
 8004f1a:	21d0      	movs	r1, #208	; 0xd0
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f002 f8b7 	bl	8007090 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004f22:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004f30:	2364      	movs	r3, #100	; 0x64
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	2302      	movs	r3, #2
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	227a      	movs	r2, #122	; 0x7a
 8004f42:	21d0      	movs	r1, #208	; 0xd0
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f002 f8a3 	bl	8007090 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004f4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004f54:	4313      	orrs	r3, r2
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004f58:	2364      	movs	r3, #100	; 0x64
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2301      	movs	r3, #1
 8004f68:	227d      	movs	r2, #125	; 0x7d
 8004f6a:	21d0      	movs	r1, #208	; 0xd0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f002 f88f 	bl	8007090 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004f72:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8004f80:	2301      	movs	r3, #1
 8004f82:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8004f84:	4a8a      	ldr	r2, [pc, #552]	; (80051b0 <calibrateMPU6050+0x850>)
 8004f86:	f107 0320 	add.w	r3, r7, #32
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	8019      	strh	r1, [r3, #0]
 8004f90:	3302      	adds	r3, #2
 8004f92:	0c12      	lsrs	r2, r2, #16
 8004f94:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f9c:	e017      	b.n	8004fce <calibrateMPU6050+0x66e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8004f9e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	3368      	adds	r3, #104	; 0x68
 8004fa6:	443b      	add	r3, r7
 8004fa8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <calibrateMPU6050+0x664>
 8004fb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fba:	3368      	adds	r3, #104	; 0x68
 8004fbc:	443b      	add	r3, r7
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8004fc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004fce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d9e3      	bls.n	8004f9e <calibrateMPU6050+0x63e>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da00      	bge.n	8004fe0 <calibrateMPU6050+0x680>
 8004fde:	3307      	adds	r3, #7
 8004fe0:	10db      	asrs	r3, r3, #3
 8004fe2:	425b      	negs	r3, r3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da00      	bge.n	8004ff2 <calibrateMPU6050+0x692>
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	10db      	asrs	r3, r3, #3
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da00      	bge.n	8005004 <calibrateMPU6050+0x6a4>
 8005002:	3307      	adds	r3, #7
 8005004:	10db      	asrs	r3, r3, #3
 8005006:	425b      	negs	r3, r3
 8005008:	4413      	add	r3, r2
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	121b      	asrs	r3, r3, #8
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800501e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005026:	4313      	orrs	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	121b      	asrs	r3, r3, #8
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005040:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005044:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005048:	4313      	orrs	r3, r2
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	121b      	asrs	r3, r3, #8
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005062:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005066:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800506a:	4313      	orrs	r3, r2
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8005072:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800507a:	2364      	movs	r3, #100	; 0x64
 800507c:	9302      	str	r3, [sp, #8]
 800507e:	2301      	movs	r3, #1
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2301      	movs	r3, #1
 800508a:	2277      	movs	r2, #119	; 0x77
 800508c:	21d0      	movs	r1, #208	; 0xd0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f001 feea 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8005094:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800509c:	2364      	movs	r3, #100	; 0x64
 800509e:	9302      	str	r3, [sp, #8]
 80050a0:	2301      	movs	r3, #1
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2301      	movs	r3, #1
 80050ac:	2278      	movs	r2, #120	; 0x78
 80050ae:	21d0      	movs	r1, #208	; 0xd0
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f001 fed9 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80050b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80050ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80050be:	2364      	movs	r3, #100	; 0x64
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	2301      	movs	r3, #1
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2301      	movs	r3, #1
 80050ce:	227a      	movs	r2, #122	; 0x7a
 80050d0:	21d0      	movs	r1, #208	; 0xd0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f001 fec8 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80050d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80050e0:	2364      	movs	r3, #100	; 0x64
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	2301      	movs	r3, #1
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2301      	movs	r3, #1
 80050f0:	227b      	movs	r2, #123	; 0x7b
 80050f2:	21d0      	movs	r1, #208	; 0xd0
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f001 feb7 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80050fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80050fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005102:	2364      	movs	r3, #100	; 0x64
 8005104:	9302      	str	r3, [sp, #8]
 8005106:	2301      	movs	r3, #1
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2301      	movs	r3, #1
 8005112:	227d      	movs	r2, #125	; 0x7d
 8005114:	21d0      	movs	r1, #208	; 0xd0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f001 fea6 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800511c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005124:	2364      	movs	r3, #100	; 0x64
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	2301      	movs	r3, #1
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2301      	movs	r3, #1
 8005134:	227e      	movs	r2, #126	; 0x7e
 8005136:	21d0      	movs	r1, #208	; 0xd0
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 fe95 	bl	8006e68 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005148:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005168:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	3304      	adds	r3, #4
 8005178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517c:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800518a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519e:	edc3 7a00 	vstr	s15, [r3]
		printf("Accel bias Z: %f\r\n", accelBias_MPU6050Z);

		printf("-------------------------\r\n");
	}
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2201      	movs	r2, #1
 80051a6:	761a      	strb	r2, [r3, #24]

}
 80051a8:	bf00      	nop
 80051aa:	3768      	adds	r7, #104	; 0x68
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	0800fdb8 	.word	0x0800fdb8
 80051b4:	00000000 	.word	0x00000000

080051b8 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	ed2d 8b02 	vpush	{d8}
 80051be:	b0a8      	sub	sp, #160	; 0xa0
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80051c6:	4aa2      	ldr	r2, [pc, #648]	; (8005450 <MPU6050SelfTest+0x298>)
 80051c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	3304      	adds	r3, #4
 80051d4:	8019      	strh	r1, [r3, #0]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80051d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8005212:	2364      	movs	r3, #100	; 0x64
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	2301      	movs	r3, #1
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2301      	movs	r3, #1
 8005222:	2219      	movs	r2, #25
 8005224:	21d0      	movs	r1, #208	; 0xd0
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 fe1e 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800522c:	2302      	movs	r3, #2
 800522e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005232:	2364      	movs	r3, #100	; 0x64
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	2301      	movs	r3, #1
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2301      	movs	r3, #1
 8005242:	221a      	movs	r2, #26
 8005244:	21d0      	movs	r1, #208	; 0xd0
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 fe0e 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800524c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8005258:	2364      	movs	r3, #100	; 0x64
 800525a:	9302      	str	r3, [sp, #8]
 800525c:	2301      	movs	r3, #1
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2301      	movs	r3, #1
 8005268:	221b      	movs	r2, #27
 800526a:	21d0      	movs	r1, #208	; 0xd0
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 fdfb 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005272:	2302      	movs	r3, #2
 8005274:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005278:	2364      	movs	r3, #100	; 0x64
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	2301      	movs	r3, #1
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	2301      	movs	r3, #1
 8005288:	221d      	movs	r2, #29
 800528a:	21d0      	movs	r1, #208	; 0xd0
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fdeb 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005292:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 800529e:	2364      	movs	r3, #100	; 0x64
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	2301      	movs	r3, #1
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	221c      	movs	r2, #28
 80052b0:	21d0      	movs	r1, #208	; 0xd0
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fdd8 	bl	8006e68 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052be:	e066      	b.n	800538e <MPU6050SelfTest+0x1d6>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80052c0:	2364      	movs	r3, #100	; 0x64
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	2306      	movs	r3, #6
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2301      	movs	r3, #1
 80052d0:	223b      	movs	r2, #59	; 0x3b
 80052d2:	21d0      	movs	r1, #208	; 0xd0
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 fedb 	bl	8007090 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80052da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052dc:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80052e0:	0212      	lsls	r2, r2, #8
 80052e2:	b211      	sxth	r1, r2
 80052e4:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80052e8:	b212      	sxth	r2, r2
 80052ea:	430a      	orrs	r2, r1
 80052ec:	b212      	sxth	r2, r2
 80052ee:	4413      	add	r3, r2
 80052f0:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80052f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80052f8:	0212      	lsls	r2, r2, #8
 80052fa:	b211      	sxth	r1, r2
 80052fc:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005300:	b212      	sxth	r2, r2
 8005302:	430a      	orrs	r2, r1
 8005304:	b212      	sxth	r2, r2
 8005306:	4413      	add	r3, r2
 8005308:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800530a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800530c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005310:	0212      	lsls	r2, r2, #8
 8005312:	b211      	sxth	r1, r2
 8005314:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005318:	b212      	sxth	r2, r2
 800531a:	430a      	orrs	r2, r1
 800531c:	b212      	sxth	r2, r2
 800531e:	4413      	add	r3, r2
 8005320:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8005322:	2364      	movs	r3, #100	; 0x64
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	2306      	movs	r3, #6
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2301      	movs	r3, #1
 8005332:	2243      	movs	r2, #67	; 0x43
 8005334:	21d0      	movs	r1, #208	; 0xd0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 feaa 	bl	8007090 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800533c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533e:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005342:	0212      	lsls	r2, r2, #8
 8005344:	b211      	sxth	r1, r2
 8005346:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800534a:	b212      	sxth	r2, r2
 800534c:	430a      	orrs	r2, r1
 800534e:	b212      	sxth	r2, r2
 8005350:	4413      	add	r3, r2
 8005352:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005356:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800535a:	0212      	lsls	r2, r2, #8
 800535c:	b211      	sxth	r1, r2
 800535e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005362:	b212      	sxth	r2, r2
 8005364:	430a      	orrs	r2, r1
 8005366:	b212      	sxth	r2, r2
 8005368:	4413      	add	r3, r2
 800536a:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005372:	0212      	lsls	r2, r2, #8
 8005374:	b211      	sxth	r1, r2
 8005376:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800537a:	b212      	sxth	r2, r2
 800537c:	430a      	orrs	r2, r1
 800537e:	b212      	sxth	r2, r2
 8005380:	4413      	add	r3, r2
 8005382:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8005384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005388:	3301      	adds	r3, #1
 800538a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005392:	2bc7      	cmp	r3, #199	; 0xc7
 8005394:	dd94      	ble.n	80052c0 <MPU6050SelfTest+0x108>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800539c:	e02c      	b.n	80053f8 <MPU6050SelfTest+0x240>
		aAvg[ii] /= 200;
 800539e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	3390      	adds	r3, #144	; 0x90
 80053a6:	443b      	add	r3, r7
 80053a8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80053ac:	4a29      	ldr	r2, [pc, #164]	; (8005454 <MPU6050SelfTest+0x29c>)
 80053ae:	fb82 1203 	smull	r1, r2, r2, r3
 80053b2:	1192      	asrs	r2, r2, #6
 80053b4:	17db      	asrs	r3, r3, #31
 80053b6:	1ad2      	subs	r2, r2, r3
 80053b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	3390      	adds	r3, #144	; 0x90
 80053c0:	443b      	add	r3, r7
 80053c2:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80053c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	3390      	adds	r3, #144	; 0x90
 80053ce:	443b      	add	r3, r7
 80053d0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80053d4:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <MPU6050SelfTest+0x29c>)
 80053d6:	fb82 1203 	smull	r1, r2, r2, r3
 80053da:	1192      	asrs	r2, r2, #6
 80053dc:	17db      	asrs	r3, r3, #31
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	3390      	adds	r3, #144	; 0x90
 80053e8:	443b      	add	r3, r7
 80053ea:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80053ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f2:	3301      	adds	r3, #1
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	ddce      	ble.n	800539e <MPU6050SelfTest+0x1e6>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8005400:	23e0      	movs	r3, #224	; 0xe0
 8005402:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8005406:	2364      	movs	r3, #100	; 0x64
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	2301      	movs	r3, #1
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2301      	movs	r3, #1
 8005416:	221c      	movs	r2, #28
 8005418:	21d0      	movs	r1, #208	; 0xd0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fd24 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8005420:	23e0      	movs	r3, #224	; 0xe0
 8005422:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005426:	2364      	movs	r3, #100	; 0x64
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	2301      	movs	r3, #1
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2301      	movs	r3, #1
 8005436:	221b      	movs	r2, #27
 8005438:	21d0      	movs	r1, #208	; 0xd0
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fd14 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005440:	2019      	movs	r0, #25
 8005442:	f001 f9a3 	bl	800678c <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800544c:	e06b      	b.n	8005526 <MPU6050SelfTest+0x36e>
 800544e:	bf00      	nop
 8005450:	0800fdbc 	.word	0x0800fdbc
 8005454:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005458:	2364      	movs	r3, #100	; 0x64
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	2306      	movs	r3, #6
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2301      	movs	r3, #1
 8005468:	223b      	movs	r2, #59	; 0x3b
 800546a:	21d0      	movs	r1, #208	; 0xd0
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fe0f 	bl	8007090 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005474:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005478:	0212      	lsls	r2, r2, #8
 800547a:	b211      	sxth	r1, r2
 800547c:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8005480:	b212      	sxth	r2, r2
 8005482:	430a      	orrs	r2, r1
 8005484:	b212      	sxth	r2, r2
 8005486:	4413      	add	r3, r2
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8005490:	0212      	lsls	r2, r2, #8
 8005492:	b211      	sxth	r1, r2
 8005494:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005498:	b212      	sxth	r2, r2
 800549a:	430a      	orrs	r2, r1
 800549c:	b212      	sxth	r2, r2
 800549e:	4413      	add	r3, r2
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80054a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80054a8:	0212      	lsls	r2, r2, #8
 80054aa:	b211      	sxth	r1, r2
 80054ac:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80054b0:	b212      	sxth	r2, r2
 80054b2:	430a      	orrs	r2, r1
 80054b4:	b212      	sxth	r2, r2
 80054b6:	4413      	add	r3, r2
 80054b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80054ba:	2364      	movs	r3, #100	; 0x64
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	2306      	movs	r3, #6
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2301      	movs	r3, #1
 80054ca:	2243      	movs	r2, #67	; 0x43
 80054cc:	21d0      	movs	r1, #208	; 0xd0
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 fdde 	bl	8007090 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	b211      	sxth	r1, r2
 80054de:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80054e2:	b212      	sxth	r2, r2
 80054e4:	430a      	orrs	r2, r1
 80054e6:	b212      	sxth	r2, r2
 80054e8:	4413      	add	r3, r2
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ee:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80054f2:	0212      	lsls	r2, r2, #8
 80054f4:	b211      	sxth	r1, r2
 80054f6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80054fa:	b212      	sxth	r2, r2
 80054fc:	430a      	orrs	r2, r1
 80054fe:	b212      	sxth	r2, r2
 8005500:	4413      	add	r3, r2
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800550a:	0212      	lsls	r2, r2, #8
 800550c:	b211      	sxth	r1, r2
 800550e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005512:	b212      	sxth	r2, r2
 8005514:	430a      	orrs	r2, r1
 8005516:	b212      	sxth	r2, r2
 8005518:	4413      	add	r3, r2
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 800551c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005520:	3301      	adds	r3, #1
 8005522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800552a:	2bc7      	cmp	r3, #199	; 0xc7
 800552c:	dd94      	ble.n	8005458 <MPU6050SelfTest+0x2a0>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005534:	e02c      	b.n	8005590 <MPU6050SelfTest+0x3d8>
		aSTAvg[ii] /= 200;
 8005536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3390      	adds	r3, #144	; 0x90
 800553e:	443b      	add	r3, r7
 8005540:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005544:	4ac6      	ldr	r2, [pc, #792]	; (8005860 <MPU6050SelfTest+0x6a8>)
 8005546:	fb82 1203 	smull	r1, r2, r2, r3
 800554a:	1192      	asrs	r2, r2, #6
 800554c:	17db      	asrs	r3, r3, #31
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	3390      	adds	r3, #144	; 0x90
 8005558:	443b      	add	r3, r7
 800555a:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 800555e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	3390      	adds	r3, #144	; 0x90
 8005566:	443b      	add	r3, r7
 8005568:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800556c:	4abc      	ldr	r2, [pc, #752]	; (8005860 <MPU6050SelfTest+0x6a8>)
 800556e:	fb82 1203 	smull	r1, r2, r2, r3
 8005572:	1192      	asrs	r2, r2, #6
 8005574:	17db      	asrs	r3, r3, #31
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	3390      	adds	r3, #144	; 0x90
 8005580:	443b      	add	r3, r7
 8005582:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8005586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800558a:	3301      	adds	r3, #1
 800558c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005594:	2b02      	cmp	r3, #2
 8005596:	ddce      	ble.n	8005536 <MPU6050SelfTest+0x37e>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800559e:	2364      	movs	r3, #100	; 0x64
 80055a0:	9302      	str	r3, [sp, #8]
 80055a2:	2301      	movs	r3, #1
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2301      	movs	r3, #1
 80055ae:	221c      	movs	r2, #28
 80055b0:	21d0      	movs	r1, #208	; 0xd0
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fc58 	bl	8006e68 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80055be:	2364      	movs	r3, #100	; 0x64
 80055c0:	9302      	str	r3, [sp, #8]
 80055c2:	2301      	movs	r3, #1
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	2301      	movs	r3, #1
 80055ce:	221b      	movs	r2, #27
 80055d0:	21d0      	movs	r1, #208	; 0xd0
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 fc48 	bl	8006e68 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80055d8:	2019      	movs	r0, #25
 80055da:	f001 f8d7 	bl	800678c <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 80055de:	2364      	movs	r3, #100	; 0x64
 80055e0:	9302      	str	r3, [sp, #8]
 80055e2:	2301      	movs	r3, #1
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2301      	movs	r3, #1
 80055ee:	220d      	movs	r2, #13
 80055f0:	21d0      	movs	r1, #208	; 0xd0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fd4c 	bl	8007090 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 80055f8:	2364      	movs	r3, #100	; 0x64
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	2301      	movs	r3, #1
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005604:	3301      	adds	r3, #1
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2301      	movs	r3, #1
 800560a:	220e      	movs	r2, #14
 800560c:	21d0      	movs	r1, #208	; 0xd0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 fd3e 	bl	8007090 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 8005614:	2364      	movs	r3, #100	; 0x64
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	2301      	movs	r3, #1
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005620:	3302      	adds	r3, #2
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	2301      	movs	r3, #1
 8005626:	220f      	movs	r2, #15
 8005628:	21d0      	movs	r1, #208	; 0xd0
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 fd30 	bl	8007090 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 8005630:	2364      	movs	r3, #100	; 0x64
 8005632:	9302      	str	r3, [sp, #8]
 8005634:	2301      	movs	r3, #1
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800563c:	3303      	adds	r3, #3
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2301      	movs	r3, #1
 8005642:	2200      	movs	r2, #0
 8005644:	21d0      	movs	r1, #208	; 0xd0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fd22 	bl	8007090 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 800564c:	2364      	movs	r3, #100	; 0x64
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	2301      	movs	r3, #1
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005658:	3304      	adds	r3, #4
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	2301      	movs	r3, #1
 800565e:	2201      	movs	r2, #1
 8005660:	21d0      	movs	r1, #208	; 0xd0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fd14 	bl	8007090 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8005668:	2364      	movs	r3, #100	; 0x64
 800566a:	9302      	str	r3, [sp, #8]
 800566c:	2301      	movs	r3, #1
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005674:	3305      	adds	r3, #5
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2301      	movs	r3, #1
 800567a:	2202      	movs	r2, #2
 800567c:	21d0      	movs	r1, #208	; 0xd0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 fd06 	bl	8007090 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005684:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005688:	f640 223c 	movw	r2, #2620	; 0xa3c
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005698:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800569c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b4:	eeb0 1b47 	vmov.f64	d1, d7
 80056b8:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8005858 <MPU6050SelfTest+0x6a0>
 80056bc:	f008 fc10 	bl	800dee0 <pow>
 80056c0:	eeb0 7b40 	vmov.f64	d7, d0
 80056c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80056c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80056cc:	edc7 7a08 	vstr	s15, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 80056d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80056d4:	f640 223c 	movw	r2, #2620	; 0xa3c
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80056e8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005700:	eeb0 1b47 	vmov.f64	d1, d7
 8005704:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8005858 <MPU6050SelfTest+0x6a0>
 8005708:	f008 fbea 	bl	800dee0 <pow>
 800570c:	eeb0 7b40 	vmov.f64	d7, d0
 8005710:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005714:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 800571c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005720:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005730:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005734:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005744:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005748:	ee37 7b46 	vsub.f64	d7, d7, d6
 800574c:	eeb0 1b47 	vmov.f64	d1, d7
 8005750:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8005858 <MPU6050SelfTest+0x6a0>
 8005754:	f008 fbc4 	bl	800dee0 <pow>
 8005758:	eeb0 7b40 	vmov.f64	d7, d0
 800575c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005760:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005764:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005768:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800576c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005780:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005790:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005794:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005798:	eeb0 1b47 	vmov.f64	d1, d7
 800579c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8005858 <MPU6050SelfTest+0x6a0>
 80057a0:	f008 fb9e 	bl	800dee0 <pow>
 80057a4:	eeb0 7b40 	vmov.f64	d7, d0
 80057a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80057ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 80057b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80057b8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80057cc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80057e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057e4:	eeb0 1b47 	vmov.f64	d1, d7
 80057e8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8005858 <MPU6050SelfTest+0x6a0>
 80057ec:	f008 fb78 	bl	800dee0 <pow>
 80057f0:	eeb0 7b40 	vmov.f64	d7, d0
 80057f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80057f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005800:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005804:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005814:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005818:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005828:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800582c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005830:	eeb0 1b47 	vmov.f64	d1, d7
 8005834:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8005858 <MPU6050SelfTest+0x6a0>
 8005838:	f008 fb52 	bl	800dee0 <pow>
 800583c:	eeb0 7b40 	vmov.f64	d7, d0
 8005840:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005848:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 800584c:	2300      	movs	r3, #0
 800584e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005850:	e06d      	b.n	800592e <MPU6050SelfTest+0x776>
 8005852:	bf00      	nop
 8005854:	f3af 8000 	nop.w
 8005858:	c28f5c29 	.word	0xc28f5c29
 800585c:	3ff028f5 	.word	0x3ff028f5
 8005860:	51eb851f 	.word	0x51eb851f
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3390      	adds	r3, #144	; 0x90
 800586a:	443b      	add	r3, r7
 800586c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	3390      	adds	r3, #144	; 0x90
 8005876:	443b      	add	r3, r7
 8005878:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800588a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8005a10 <MPU6050SelfTest+0x858>
 800588e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	3390      	adds	r3, #144	; 0x90
 8005898:	443b      	add	r3, r7
 800589a:	3b70      	subs	r3, #112	; 0x70
 800589c:	edd3 7a00 	vldr	s15, [r3]
 80058a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80058a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058a8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8005a10 <MPU6050SelfTest+0x858>
 80058ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80058b4:	ee17 2a90 	vmov	r2, s15
 80058b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3390      	adds	r3, #144	; 0x90
 80058be:	443b      	add	r3, r7
 80058c0:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80058c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	3390      	adds	r3, #144	; 0x90
 80058ca:	443b      	add	r3, r7
 80058cc:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80058d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3390      	adds	r3, #144	; 0x90
 80058d6:	443b      	add	r3, r7
 80058d8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058ea:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8005a10 <MPU6050SelfTest+0x858>
 80058ee:	ee27 5b06 	vmul.f64	d5, d7, d6
 80058f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058f4:	3303      	adds	r3, #3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	3390      	adds	r3, #144	; 0x90
 80058fa:	443b      	add	r3, r7
 80058fc:	3b70      	subs	r3, #112	; 0x70
 80058fe:	edd3 7a00 	vldr	s15, [r3]
 8005902:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005906:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800590a:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005a10 <MPU6050SelfTest+0x858>
 800590e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005914:	3303      	adds	r3, #3
 8005916:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800591a:	ee17 2a90 	vmov	r2, s15
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3390      	adds	r3, #144	; 0x90
 8005922:	443b      	add	r3, r7
 8005924:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8005928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800592a:	3301      	adds	r3, #1
 800592c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800592e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005930:	2b02      	cmp	r3, #2
 8005932:	dd97      	ble.n	8005864 <MPU6050SelfTest+0x6ac>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
	}

   for (int i = 0; i < 3; i++) {
 8005934:	2300      	movs	r3, #0
 8005936:	67bb      	str	r3, [r7, #120]	; 0x78
 8005938:	e060      	b.n	80059fc <MPU6050SelfTest+0x844>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800593a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	3390      	adds	r3, #144	; 0x90
 8005940:	443b      	add	r3, r7
 8005942:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	3390      	adds	r3, #144	; 0x90
 800594c:	443b      	add	r3, r7
 800594e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800595c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005960:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8005a10 <MPU6050SelfTest+0x858>
 8005964:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	3390      	adds	r3, #144	; 0x90
 800596e:	443b      	add	r3, r7
 8005970:	3b70      	subs	r3, #112	; 0x70
 8005972:	edd3 7a00 	vldr	s15, [r3]
 8005976:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800597a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800597e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005a10 <MPU6050SelfTest+0x858>
 8005982:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	4413      	add	r3, r2
 800598e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005992:	edc3 7a00 	vstr	s15, [r3]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3390      	adds	r3, #144	; 0x90
 800599c:	443b      	add	r3, r7
 800599e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80059a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3390      	adds	r3, #144	; 0x90
 80059a8:	443b      	add	r3, r7
 80059aa:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059bc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8005a10 <MPU6050SelfTest+0x858>
 80059c0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80059c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c6:	3303      	adds	r3, #3
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	3390      	adds	r3, #144	; 0x90
 80059cc:	443b      	add	r3, r7
 80059ce:	3b70      	subs	r3, #112	; 0x70
 80059d0:	edd3 7a00 	vldr	s15, [r3]
 80059d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059dc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005a10 <MPU6050SelfTest+0x858>
 80059e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059e6:	3303      	adds	r3, #3
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	4413      	add	r3, r2
 80059ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80059f2:	edc3 7a00 	vstr	s15, [r3]
   for (int i = 0; i < 3; i++) {
 80059f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f8:	3301      	adds	r3, #1
 80059fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	dd9b      	ble.n	800593a <MPU6050SelfTest+0x782>
   }
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	3790      	adds	r7, #144	; 0x90
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	ecbd 8b02 	vpop	{d8}
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	00000000 	.word	0x00000000
 8005a14:	40590000 	.word	0x40590000

08005a18 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <quaternionInit+0x98>)
 8005a28:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	edd3 7a00 	vldr	s15, [r3]
 8005a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a34:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005aa8 <quaternionInit+0x90>
 8005a38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	edc3 7a01 	vstr	s15, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <quaternionInit+0x9c>)
 8005a4a:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a56:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8005aa8 <quaternionInit+0x90>
 8005a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	edc3 7a03 	vstr	s15, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8005a68:	ed97 7a00 	vldr	s14, [r7]
 8005a6c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005ab8 <quaternionInit+0xa0>
 8005a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005a80:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->q[2] = 0.0f;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->q[3] = 0.0f;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	e8584caa 	.word	0xe8584caa
 8005aac:	3febb67a 	.word	0x3febb67a
 8005ab0:	3f32b8c2 	.word	0x3f32b8c2
 8005ab4:	3d0efa35 	.word	0x3d0efa35
 8005ab8:	49742400 	.word	0x49742400

08005abc <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b0a6      	sub	sp, #152	; 0x98
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	61f8      	str	r0, [r7, #28]
 8005ac4:	ed87 0a06 	vstr	s0, [r7, #24]
 8005ac8:	edc7 0a05 	vstr	s1, [r7, #20]
 8005acc:	ed87 1a04 	vstr	s2, [r7, #16]
 8005ad0:	edc7 1a03 	vstr	s3, [r7, #12]
 8005ad4:	ed87 2a02 	vstr	s4, [r7, #8]
 8005ad8:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8005afc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005b00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b08:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float _halfq2 = 0.5f * q2;
 8005b0c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005b10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b18:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float _halfq3 = 0.5f * q3;
 8005b1c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b28:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float _halfq4 = 0.5f * q4;
 8005b2c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005b30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b38:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float _2q1 = 2.0f * q1;
 8005b3c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005b40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b44:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float _2q2 = 2.0f * q2;
 8005b48:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b50:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float _2q3 = 2.0f * q3;
 8005b54:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b5c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float _2q4 = 2.0f * q4;
 8005b60:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005b64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b68:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 8005b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b90:	eeb0 0b47 	vmov.f64	d0, d7
 8005b94:	f008 fd14 	bl	800e5c0 <sqrt>
 8005b98:	eeb0 7b40 	vmov.f64	d7, d0
 8005b9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ba0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    if (norm == 0.0f) return; // handle NaN
 8005ba4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	f000 8212 	beq.w	8005fd8 <quaternionUpdate+0x51c>
    norm = 1.0f/norm;
 8005bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ax *= norm;
 8005bc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8005bc8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd0:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8005bd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bd8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be0:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8005be4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005be8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8005bf4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005bf8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c00:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8005c04:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 8005c1c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005c20:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c28:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005c2c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 8005c44:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005c48:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c58:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005c5c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c70:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    J_11or24 = _2q3;
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	657b      	str	r3, [r7, #84]	; 0x54
    J_12or23 = _2q4;
 8005c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c7a:	653b      	str	r3, [r7, #80]	; 0x50
    J_13or22 = _2q1;
 8005c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_14or21 = _2q2;
 8005c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
    J_32 = 2.0f * J_14or21;
 8005c84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c8c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_33 = 2.0f * J_11or24;
 8005c90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8005c9c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ca0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ca8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005cac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cb8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8005cbc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005cc0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005ccc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cd8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005cdc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8005cec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005cf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cf8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005cfc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d08:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005d0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d18:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 8005d1c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005d20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d28:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005d2c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d38:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 8005d3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d6c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d70:	f008 fc26 	bl	800e5c0 <sqrt>
 8005d74:	eeb0 7b40 	vmov.f64	d7, d0
 8005d78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005d7c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hatDot1 /= norm;
 8005d80:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005d84:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hatDot2 /= norm;
 8005d90:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8005d94:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    hatDot3 /= norm;
 8005da0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005da4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    hatDot4 /= norm;
 8005db0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005db4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dbc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8005dc0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005dc4:	eeb1 7a67 	vneg.f32	s14, s15
 8005dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dd0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8005dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005de0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 8005df4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8005df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e00:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8005e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e10:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 8005e24:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8005e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e30:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8005e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e40:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 8005e54:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8005e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e60:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8005e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e70:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8005e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e80:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eac:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8005eb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ee2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8005f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f04:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	ed97 7a08 	vldr	s14, [r7, #32]
 8005f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f28:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f30:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8005f34:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f48:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f54:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f64:	eeb0 0b47 	vmov.f64	d0, d7
 8005f68:	f008 fb2a 	bl	800e5c0 <sqrt>
 8005f6c:	eeb0 7b40 	vmov.f64	d7, d0
 8005f70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f74:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    norm = 1.0f/norm;
 8005f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f84:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    DataStruct->q[0] = q1 * norm;
 8005f88:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005f8c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 8005f9a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005f9e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    DataStruct->q[2] = q3 * norm;
 8005fac:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8005fb0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    DataStruct->q[3] = q4 * norm;
 8005fbe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005fc2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    quaternionEulerUpdate(DataStruct);
 8005fd0:	69f8      	ldr	r0, [r7, #28]
 8005fd2:	f000 f805 	bl	8005fe0 <quaternionEulerUpdate>
 8005fd6:	e000      	b.n	8005fda <quaternionUpdate+0x51e>
    if (norm == 0.0f) return; // handle NaN
 8005fd8:	bf00      	nop
}
 8005fda:	3798      	adds	r7, #152	; 0x98
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	edd3 6a08 	vldr	s13, [r3, #32]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	ed93 6a08 	vldr	s12, [r3, #32]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	edd3 6a08 	vldr	s13, [r3, #32]
 8006020:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8006030:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006034:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006044:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006048:	ee36 6a66 	vsub.f32	s12, s12, s13
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006058:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800605c:	ee76 6a66 	vsub.f32	s13, s12, s13
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006060:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8006064:	eeb0 1b46 	vmov.f64	d1, d6
 8006068:	eeb0 0b47 	vmov.f64	d0, d7
 800606c:	f008 faa4 	bl	800e5b8 <atan2>
 8006070:	eeb0 7b40 	vmov.f64	d7, d0
 8006074:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800608a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	edd3 6a08 	vldr	s13, [r3, #32]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800609a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800609e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060aa:	eeb0 0b47 	vmov.f64	d0, d7
 80060ae:	f008 fa57 	bl	800e560 <asin>
 80060b2:	eeb0 7b40 	vmov.f64	d7, d0
 80060b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80060ba:	eef1 7a67 	vneg.f32	s15, s15
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80060d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80060e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	ed93 6a08 	vldr	s12, [r3, #32]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80060fc:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800610c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006110:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006120:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006124:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006134:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8006138:	ee76 6a26 	vadd.f32	s13, s12, s13
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800613c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8006140:	eeb0 1b46 	vmov.f64	d1, d6
 8006144:	eeb0 0b47 	vmov.f64	d0, d7
 8006148:	f008 fa36 	bl	800e5b8 <atan2>
 800614c:	eeb0 7b40 	vmov.f64	d7, d0
 8006150:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006164:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80061b8 <quaternionEulerUpdate+0x1d8>
 8006168:	ee27 7b06 	vmul.f64	d7, d7, d6
 800616c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	edd3 7a06 	vldr	s15, [r3, #24]
 800617c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006180:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80061b8 <quaternionEulerUpdate+0x1d8>
 8006184:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	edd3 7a07 	vldr	s15, [r3, #28]
 8006198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800619c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80061b8 <quaternionEulerUpdate+0x1d8>
 80061a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	1a63c1f8 	.word	0x1a63c1f8
 80061bc:	404ca5dc 	.word	0x404ca5dc

080061c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_MspInit+0x30>)
 80061c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <HAL_MspInit+0x30>)
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_MspInit+0x30>)
 80061d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	58024400 	.word	0x58024400

080061f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061f8:	e7fe      	b.n	80061f8 <NMI_Handler+0x4>

080061fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061fa:	b480      	push	{r7}
 80061fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061fe:	e7fe      	b.n	80061fe <HardFault_Handler+0x4>

08006200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006204:	e7fe      	b.n	8006204 <MemManage_Handler+0x4>

08006206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800620a:	e7fe      	b.n	800620a <BusFault_Handler+0x4>

0800620c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006210:	e7fe      	b.n	8006210 <UsageFault_Handler+0x4>

08006212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800622e:	b480      	push	{r7}
 8006230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006240:	f000 fa84 	bl	800674c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006244:	bf00      	nop
 8006246:	bd80      	pop	{r7, pc}

08006248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
	return 1;
 800624c:	2301      	movs	r3, #1
}
 800624e:	4618      	mov	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_kill>:

int _kill(int pid, int sig)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006262:	f004 fff3 	bl	800b24c <__errno>
 8006266:	4603      	mov	r3, r0
 8006268:	2216      	movs	r2, #22
 800626a:	601a      	str	r2, [r3, #0]
	return -1;
 800626c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <_exit>:

void _exit (int status)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006280:	f04f 31ff 	mov.w	r1, #4294967295
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ffe7 	bl	8006258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800628a:	e7fe      	b.n	800628a <_exit+0x12>

0800628c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e00a      	b.n	80062b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800629e:	f3af 8000 	nop.w
 80062a2:	4601      	mov	r1, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	60ba      	str	r2, [r7, #8]
 80062aa:	b2ca      	uxtb	r2, r1
 80062ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	3301      	adds	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	dbf0      	blt.n	800629e <_read+0x12>
	}

return len;
 80062bc:	687b      	ldr	r3, [r7, #4]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
	return -1;
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062ee:	605a      	str	r2, [r3, #4]
	return 0;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <_isatty>:

int _isatty(int file)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
	return 1;
 8006306:	2301      	movs	r3, #1
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
	return 0;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <_sbrk+0x5c>)
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <_sbrk+0x60>)
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <_sbrk+0x64>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <_sbrk+0x64>)
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <_sbrk+0x68>)
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <_sbrk+0x64>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	429a      	cmp	r2, r3
 800635e:	d207      	bcs.n	8006370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006360:	f004 ff74 	bl	800b24c <__errno>
 8006364:	4603      	mov	r3, r0
 8006366:	220c      	movs	r2, #12
 8006368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	e009      	b.n	8006384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006370:	4b08      	ldr	r3, [pc, #32]	; (8006394 <_sbrk+0x64>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <_sbrk+0x64>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	4a05      	ldr	r2, [pc, #20]	; (8006394 <_sbrk+0x64>)
 8006380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	24080000 	.word	0x24080000
 8006390:	00000800 	.word	0x00000800
 8006394:	240004e8 	.word	0x240004e8
 8006398:	24000590 	.word	0x24000590

0800639c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80063a0:	4b37      	ldr	r3, [pc, #220]	; (8006480 <SystemInit+0xe4>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	4a36      	ldr	r2, [pc, #216]	; (8006480 <SystemInit+0xe4>)
 80063a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063b0:	4b34      	ldr	r3, [pc, #208]	; (8006484 <SystemInit+0xe8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d807      	bhi.n	80063cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063bc:	4b31      	ldr	r3, [pc, #196]	; (8006484 <SystemInit+0xe8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 030f 	bic.w	r3, r3, #15
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <SystemInit+0xe8>)
 80063c6:	f043 0307 	orr.w	r3, r3, #7
 80063ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80063cc:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <SystemInit+0xec>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <SystemInit+0xec>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <SystemInit+0xec>)
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <SystemInit+0xec>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4929      	ldr	r1, [pc, #164]	; (8006488 <SystemInit+0xec>)
 80063e4:	4b29      	ldr	r3, [pc, #164]	; (800648c <SystemInit+0xf0>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063ea:	4b26      	ldr	r3, [pc, #152]	; (8006484 <SystemInit+0xe8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <SystemInit+0xe8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 030f 	bic.w	r3, r3, #15
 80063fe:	4a21      	ldr	r2, [pc, #132]	; (8006484 <SystemInit+0xe8>)
 8006400:	f043 0307 	orr.w	r3, r3, #7
 8006404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <SystemInit+0xec>)
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <SystemInit+0xec>)
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <SystemInit+0xec>)
 8006414:	2200      	movs	r2, #0
 8006416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <SystemInit+0xec>)
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <SystemInit+0xf4>)
 800641c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800641e:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <SystemInit+0xec>)
 8006420:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <SystemInit+0xf8>)
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <SystemInit+0xec>)
 8006426:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <SystemInit+0xfc>)
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <SystemInit+0xec>)
 800642c:	2200      	movs	r2, #0
 800642e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <SystemInit+0xec>)
 8006432:	4a19      	ldr	r2, [pc, #100]	; (8006498 <SystemInit+0xfc>)
 8006434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <SystemInit+0xec>)
 8006438:	2200      	movs	r2, #0
 800643a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <SystemInit+0xec>)
 800643e:	4a16      	ldr	r2, [pc, #88]	; (8006498 <SystemInit+0xfc>)
 8006440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <SystemInit+0xec>)
 8006444:	2200      	movs	r2, #0
 8006446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <SystemInit+0xec>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <SystemInit+0xec>)
 800644e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <SystemInit+0xec>)
 8006456:	2200      	movs	r2, #0
 8006458:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800645a:	4b10      	ldr	r3, [pc, #64]	; (800649c <SystemInit+0x100>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <SystemInit+0x104>)
 8006460:	4013      	ands	r3, r2
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006466:	d202      	bcs.n	800646e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <SystemInit+0x108>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800646e:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <SystemInit+0x10c>)
 8006470:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006474:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	e000ed00 	.word	0xe000ed00
 8006484:	52002000 	.word	0x52002000
 8006488:	58024400 	.word	0x58024400
 800648c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006490:	02020200 	.word	0x02020200
 8006494:	01ff0000 	.word	0x01ff0000
 8006498:	01010280 	.word	0x01010280
 800649c:	5c001000 	.word	0x5c001000
 80064a0:	ffff0000 	.word	0xffff0000
 80064a4:	51008108 	.word	0x51008108
 80064a8:	52004000 	.word	0x52004000

080064ac <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80064b0:	4b22      	ldr	r3, [pc, #136]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064b2:	4a23      	ldr	r2, [pc, #140]	; (8006540 <MX_LPUART1_UART_Init+0x94>)
 80064b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <MX_LPUART1_UART_Init+0x98>)
 80064ba:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064bc:	4b1f      	ldr	r3, [pc, #124]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064d0:	220c      	movs	r2, #12
 80064d2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064dc:	2200      	movs	r2, #0
 80064de:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80064e0:	4b16      	ldr	r3, [pc, #88]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064e6:	4b15      	ldr	r3, [pc, #84]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80064f2:	4812      	ldr	r0, [pc, #72]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 80064f4:	f003 fda4 	bl	800a040 <HAL_UART_Init>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80064fe:	f7fd ff69 	bl	80043d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006502:	2100      	movs	r1, #0
 8006504:	480d      	ldr	r0, [pc, #52]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 8006506:	f004 fdd7 	bl	800b0b8 <HAL_UARTEx_SetTxFifoThreshold>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8006510:	f7fd ff60 	bl	80043d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006514:	2100      	movs	r1, #0
 8006516:	4809      	ldr	r0, [pc, #36]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 8006518:	f004 fe0c 	bl	800b134 <HAL_UARTEx_SetRxFifoThreshold>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8006522:	f7fd ff57 	bl	80043d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006526:	4805      	ldr	r0, [pc, #20]	; (800653c <MX_LPUART1_UART_Init+0x90>)
 8006528:	f004 fd8d 	bl	800b046 <HAL_UARTEx_DisableFifoMode>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8006532:	f7fd ff4f 	bl	80043d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	240004ec 	.word	0x240004ec
 8006540:	58000c00 	.word	0x58000c00
 8006544:	000f4240 	.word	0x000f4240

08006548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b0b8      	sub	sp, #224	; 0xe0
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006550:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	60da      	str	r2, [r3, #12]
 800655e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006560:	f107 0310 	add.w	r3, r7, #16
 8006564:	22bc      	movs	r2, #188	; 0xbc
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f004 fe99 	bl	800b2a0 <memset>
  if(uartHandle->Instance==LPUART1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a25      	ldr	r2, [pc, #148]	; (8006608 <HAL_UART_MspInit+0xc0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d142      	bne.n	80065fe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006578:	2304      	movs	r3, #4
 800657a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 800657c:	2300      	movs	r3, #0
 800657e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006582:	f107 0310 	add.w	r3, r7, #16
 8006586:	4618      	mov	r0, r3
 8006588:	f002 f9f2 	bl	8008970 <HAL_RCCEx_PeriphCLKConfig>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006592:	f7fd ff1f 	bl	80043d4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006596:	4b1d      	ldr	r3, [pc, #116]	; (800660c <HAL_UART_MspInit+0xc4>)
 8006598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800659c:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_UART_MspInit+0xc4>)
 800659e:	f043 0308 	orr.w	r3, r3, #8
 80065a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80065a6:	4b19      	ldr	r3, [pc, #100]	; (800660c <HAL_UART_MspInit+0xc4>)
 80065a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b4:	4b15      	ldr	r3, [pc, #84]	; (800660c <HAL_UART_MspInit+0xc4>)
 80065b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ba:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_UART_MspInit+0xc4>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_UART_MspInit+0xc4>)
 80065c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80065d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065da:	2302      	movs	r3, #2
 80065dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80065ec:	2303      	movs	r3, #3
 80065ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80065f6:	4619      	mov	r1, r3
 80065f8:	4805      	ldr	r0, [pc, #20]	; (8006610 <HAL_UART_MspInit+0xc8>)
 80065fa:	f000 f9db 	bl	80069b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80065fe:	bf00      	nop
 8006600:	37e0      	adds	r7, #224	; 0xe0
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	58000c00 	.word	0x58000c00
 800660c:	58024400 	.word	0x58024400
 8006610:	58020000 	.word	0x58020000

08006614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800664c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006618:	f7ff fec0 	bl	800639c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800661c:	480c      	ldr	r0, [pc, #48]	; (8006650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800661e:	490d      	ldr	r1, [pc, #52]	; (8006654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006620:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006624:	e002      	b.n	800662c <LoopCopyDataInit>

08006626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800662a:	3304      	adds	r3, #4

0800662c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800662c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800662e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006630:	d3f9      	bcc.n	8006626 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006634:	4c0a      	ldr	r4, [pc, #40]	; (8006660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006638:	e001      	b.n	800663e <LoopFillZerobss>

0800663a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800663a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800663c:	3204      	adds	r2, #4

0800663e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800663e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006640:	d3fb      	bcc.n	800663a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006642:	f004 fe09 	bl	800b258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006646:	f7fd fc1f 	bl	8003e88 <main>
  bx  lr
 800664a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800664c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006650:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006654:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8006658:	08012058 	.word	0x08012058
  ldr r2, =_sbss
 800665c:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8006660:	24000590 	.word	0x24000590

08006664 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006664:	e7fe      	b.n	8006664 <ADC3_IRQHandler>
	...

08006668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800666e:	2003      	movs	r0, #3
 8006670:	f000 f96e 	bl	8006950 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006674:	f001 ffa6 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <HAL_Init+0x68>)
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	4913      	ldr	r1, [pc, #76]	; (80066d4 <HAL_Init+0x6c>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <HAL_Init+0x68>)
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	4a0e      	ldr	r2, [pc, #56]	; (80066d4 <HAL_Init+0x6c>)
 800669c:	5cd3      	ldrb	r3, [r2, r3]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
 80066a8:	4a0b      	ldr	r2, [pc, #44]	; (80066d8 <HAL_Init+0x70>)
 80066aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ac:	4a0b      	ldr	r2, [pc, #44]	; (80066dc <HAL_Init+0x74>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80066b2:	200f      	movs	r0, #15
 80066b4:	f000 f814 	bl	80066e0 <HAL_InitTick>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e002      	b.n	80066c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80066c2:	f7ff fd7d 	bl	80061c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	58024400 	.word	0x58024400
 80066d4:	0800fdc4 	.word	0x0800fdc4
 80066d8:	24000028 	.word	0x24000028
 80066dc:	24000024 	.word	0x24000024

080066e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_InitTick+0x60>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e021      	b.n	8006738 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <HAL_InitTick+0x64>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <HAL_InitTick+0x60>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	4619      	mov	r1, r3
 80066fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006702:	fbb3 f3f1 	udiv	r3, r3, r1
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f945 	bl	800699a <HAL_SYSTICK_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e00e      	b.n	8006738 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b0f      	cmp	r3, #15
 800671e:	d80a      	bhi.n	8006736 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006720:	2200      	movs	r2, #0
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	f000 f91d 	bl	8006966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800672c:	4a06      	ldr	r2, [pc, #24]	; (8006748 <HAL_InitTick+0x68>)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e000      	b.n	8006738 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	24000030 	.word	0x24000030
 8006744:	24000024 	.word	0x24000024
 8006748:	2400002c 	.word	0x2400002c

0800674c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <HAL_IncTick+0x20>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <HAL_IncTick+0x24>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4413      	add	r3, r2
 800675c:	4a04      	ldr	r2, [pc, #16]	; (8006770 <HAL_IncTick+0x24>)
 800675e:	6013      	str	r3, [r2, #0]
}
 8006760:	bf00      	nop
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	24000030 	.word	0x24000030
 8006770:	2400057c 	.word	0x2400057c

08006774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  return uwTick;
 8006778:	4b03      	ldr	r3, [pc, #12]	; (8006788 <HAL_GetTick+0x14>)
 800677a:	681b      	ldr	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	2400057c 	.word	0x2400057c

0800678c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006794:	f7ff ffee 	bl	8006774 <HAL_GetTick>
 8006798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d005      	beq.n	80067b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_Delay+0x44>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067b2:	bf00      	nop
 80067b4:	f7ff ffde 	bl	8006774 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d8f7      	bhi.n	80067b4 <HAL_Delay+0x28>
  {
  }
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	24000030 	.word	0x24000030

080067d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <HAL_GetREVID+0x14>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0c1b      	lsrs	r3, r3, #16
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	5c001000 	.word	0x5c001000

080067ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <__NVIC_SetPriorityGrouping+0x40>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006808:	4013      	ands	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <__NVIC_SetPriorityGrouping+0x44>)
 8006816:	4313      	orrs	r3, r2
 8006818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800681a:	4a04      	ldr	r2, [pc, #16]	; (800682c <__NVIC_SetPriorityGrouping+0x40>)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	60d3      	str	r3, [r2, #12]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	e000ed00 	.word	0xe000ed00
 8006830:	05fa0000 	.word	0x05fa0000

08006834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <__NVIC_GetPriorityGrouping+0x18>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	0a1b      	lsrs	r3, r3, #8
 800683e:	f003 0307 	and.w	r3, r3, #7
}
 8006842:	4618      	mov	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	6039      	str	r1, [r7, #0]
 800685a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800685c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	db0a      	blt.n	800687a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	490c      	ldr	r1, [pc, #48]	; (800689c <__NVIC_SetPriority+0x4c>)
 800686a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686e:	0112      	lsls	r2, r2, #4
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	440b      	add	r3, r1
 8006874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006878:	e00a      	b.n	8006890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4908      	ldr	r1, [pc, #32]	; (80068a0 <__NVIC_SetPriority+0x50>)
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	3b04      	subs	r3, #4
 8006888:	0112      	lsls	r2, r2, #4
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	440b      	add	r3, r1
 800688e:	761a      	strb	r2, [r3, #24]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	e000e100 	.word	0xe000e100
 80068a0:	e000ed00 	.word	0xe000ed00

080068a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b089      	sub	sp, #36	; 0x24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f1c3 0307 	rsb	r3, r3, #7
 80068be:	2b04      	cmp	r3, #4
 80068c0:	bf28      	it	cs
 80068c2:	2304      	movcs	r3, #4
 80068c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3304      	adds	r3, #4
 80068ca:	2b06      	cmp	r3, #6
 80068cc:	d902      	bls.n	80068d4 <NVIC_EncodePriority+0x30>
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3b03      	subs	r3, #3
 80068d2:	e000      	b.n	80068d6 <NVIC_EncodePriority+0x32>
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43da      	mvns	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	401a      	ands	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068ec:	f04f 31ff 	mov.w	r1, #4294967295
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	43d9      	mvns	r1, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068fc:	4313      	orrs	r3, r2
         );
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3724      	adds	r7, #36	; 0x24
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3b01      	subs	r3, #1
 8006918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800691c:	d301      	bcc.n	8006922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800691e:	2301      	movs	r3, #1
 8006920:	e00f      	b.n	8006942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006922:	4a0a      	ldr	r2, [pc, #40]	; (800694c <SysTick_Config+0x40>)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3b01      	subs	r3, #1
 8006928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800692a:	210f      	movs	r1, #15
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	f7ff ff8e 	bl	8006850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <SysTick_Config+0x40>)
 8006936:	2200      	movs	r2, #0
 8006938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800693a:	4b04      	ldr	r3, [pc, #16]	; (800694c <SysTick_Config+0x40>)
 800693c:	2207      	movs	r2, #7
 800693e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	e000e010 	.word	0xe000e010

08006950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff47 	bl	80067ec <__NVIC_SetPriorityGrouping>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b086      	sub	sp, #24
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006974:	f7ff ff5e 	bl	8006834 <__NVIC_GetPriorityGrouping>
 8006978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff ff90 	bl	80068a4 <NVIC_EncodePriority>
 8006984:	4602      	mov	r2, r0
 8006986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800698a:	4611      	mov	r1, r2
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff ff5f 	bl	8006850 <__NVIC_SetPriority>
}
 8006992:	bf00      	nop
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff ffb2 	bl	800690c <SysTick_Config>
 80069a8:	4603      	mov	r3, r0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069c2:	4b89      	ldr	r3, [pc, #548]	; (8006be8 <HAL_GPIO_Init+0x234>)
 80069c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069c6:	e194      	b.n	8006cf2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2101      	movs	r1, #1
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	fa01 f303 	lsl.w	r3, r1, r3
 80069d4:	4013      	ands	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8186 	beq.w	8006cec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d005      	beq.n	80069f8 <HAL_GPIO_Init+0x44>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d130      	bne.n	8006a5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	2203      	movs	r2, #3
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a2e:	2201      	movs	r2, #1
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	091b      	lsrs	r3, r3, #4
 8006a44:	f003 0201 	and.w	r2, r3, #1
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d017      	beq.n	8006a96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	2203      	movs	r2, #3
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d123      	bne.n	8006aea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	08da      	lsrs	r2, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3208      	adds	r2, #8
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	220f      	movs	r2, #15
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	08da      	lsrs	r2, r3, #3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3208      	adds	r2, #8
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	2203      	movs	r2, #3
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f003 0203 	and.w	r2, r3, #3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80e0 	beq.w	8006cec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b2c:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <HAL_GPIO_Init+0x238>)
 8006b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b32:	4a2e      	ldr	r2, [pc, #184]	; (8006bec <HAL_GPIO_Init+0x238>)
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b3c:	4b2b      	ldr	r3, [pc, #172]	; (8006bec <HAL_GPIO_Init+0x238>)
 8006b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b4a:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <HAL_GPIO_Init+0x23c>)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	3302      	adds	r3, #2
 8006b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	220f      	movs	r2, #15
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <HAL_GPIO_Init+0x240>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d052      	beq.n	8006c1c <HAL_GPIO_Init+0x268>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <HAL_GPIO_Init+0x244>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d031      	beq.n	8006be2 <HAL_GPIO_Init+0x22e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <HAL_GPIO_Init+0x248>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02b      	beq.n	8006bde <HAL_GPIO_Init+0x22a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1d      	ldr	r2, [pc, #116]	; (8006c00 <HAL_GPIO_Init+0x24c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d025      	beq.n	8006bda <HAL_GPIO_Init+0x226>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1c      	ldr	r2, [pc, #112]	; (8006c04 <HAL_GPIO_Init+0x250>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01f      	beq.n	8006bd6 <HAL_GPIO_Init+0x222>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <HAL_GPIO_Init+0x254>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d019      	beq.n	8006bd2 <HAL_GPIO_Init+0x21e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <HAL_GPIO_Init+0x258>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_GPIO_Init+0x21a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_GPIO_Init+0x25c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00d      	beq.n	8006bca <HAL_GPIO_Init+0x216>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_GPIO_Init+0x260>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <HAL_GPIO_Init+0x212>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_GPIO_Init+0x264>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_GPIO_Init+0x20e>
 8006bbe:	2309      	movs	r3, #9
 8006bc0:	e02d      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bc2:	230a      	movs	r3, #10
 8006bc4:	e02b      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	e029      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bca:	2307      	movs	r3, #7
 8006bcc:	e027      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bce:	2306      	movs	r3, #6
 8006bd0:	e025      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bd2:	2305      	movs	r3, #5
 8006bd4:	e023      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	e021      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e01f      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e01d      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e01b      	b.n	8006c1e <HAL_GPIO_Init+0x26a>
 8006be6:	bf00      	nop
 8006be8:	58000080 	.word	0x58000080
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	58000400 	.word	0x58000400
 8006bf4:	58020000 	.word	0x58020000
 8006bf8:	58020400 	.word	0x58020400
 8006bfc:	58020800 	.word	0x58020800
 8006c00:	58020c00 	.word	0x58020c00
 8006c04:	58021000 	.word	0x58021000
 8006c08:	58021400 	.word	0x58021400
 8006c0c:	58021800 	.word	0x58021800
 8006c10:	58021c00 	.word	0x58021c00
 8006c14:	58022000 	.word	0x58022000
 8006c18:	58022400 	.word	0x58022400
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	f002 0203 	and.w	r2, r2, #3
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	4093      	lsls	r3, r2
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c2e:	4938      	ldr	r1, [pc, #224]	; (8006d10 <HAL_GPIO_Init+0x35c>)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	089b      	lsrs	r3, r3, #2
 8006c34:	3302      	adds	r3, #2
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	43db      	mvns	r3, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f ae63 	bne.w	80069c8 <HAL_GPIO_Init+0x14>
  }
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	3724      	adds	r7, #36	; 0x24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	58000400 	.word	0x58000400

08006d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	807b      	strh	r3, [r7, #2]
 8006d20:	4613      	mov	r3, r2
 8006d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d24:	787b      	ldrb	r3, [r7, #1]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d30:	e003      	b.n	8006d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	041a      	lsls	r2, r3, #16
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	619a      	str	r2, [r3, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e07f      	b.n	8006e5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fc ff90 	bl	8003c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d107      	bne.n	8006dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	e006      	b.n	8006dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d104      	bne.n	8006de2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_I2C_Init+0x11c>)
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69d9      	ldr	r1, [r3, #28]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	02008000 	.word	0x02008000

08006e68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	817b      	strh	r3, [r7, #10]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	813b      	strh	r3, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	f040 80f9 	bne.w	8007082 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_I2C_Mem_Write+0x34>
 8006e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0ed      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_I2C_Mem_Write+0x4e>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e0e6      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ebe:	f7ff fc59 	bl	8006774 <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2319      	movs	r3, #25
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fac3 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0d1      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2221      	movs	r2, #33	; 0x21
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2240      	movs	r2, #64	; 0x40
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f08:	88f8      	ldrh	r0, [r7, #6]
 8006f0a:	893a      	ldrh	r2, [r7, #8]
 8006f0c:	8979      	ldrh	r1, [r7, #10]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4603      	mov	r3, r0
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f9d3 	bl	80072c4 <I2C_RequestMemoryWrite>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0a9      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d90e      	bls.n	8006f58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	22ff      	movs	r2, #255	; 0xff
 8006f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	8979      	ldrh	r1, [r7, #10]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fc2b 	bl	80077ac <I2C_TransferConfig>
 8006f56:	e00f      	b.n	8006f78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	8979      	ldrh	r1, [r7, #10]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fc1a 	bl	80077ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 faad 	bl	80074dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e07b      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d034      	beq.n	8007030 <HAL_I2C_Mem_Write+0x1c8>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d130      	bne.n	8007030 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa3f 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e04d      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2bff      	cmp	r3, #255	; 0xff
 8006ff0:	d90e      	bls.n	8007010 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	8979      	ldrh	r1, [r7, #10]
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fbcf 	bl	80077ac <I2C_TransferConfig>
 800700e:	e00f      	b.n	8007030 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701e:	b2da      	uxtb	r2, r3
 8007020:	8979      	ldrh	r1, [r7, #10]
 8007022:	2300      	movs	r3, #0
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fbbe 	bl	80077ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d19e      	bne.n	8006f78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fa8c 	bl	800755c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e01a      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2220      	movs	r2, #32
 8007054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6859      	ldr	r1, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <HAL_I2C_Mem_Write+0x224>)
 8007062:	400b      	ands	r3, r1
 8007064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	fe00e800 	.word	0xfe00e800

08007090 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	461a      	mov	r2, r3
 800709e:	4603      	mov	r3, r0
 80070a0:	817b      	strh	r3, [r7, #10]
 80070a2:	460b      	mov	r3, r1
 80070a4:	813b      	strh	r3, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	f040 80fd 	bne.w	80072b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_I2C_Mem_Read+0x34>
 80070be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d105      	bne.n	80070d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0f1      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <HAL_I2C_Mem_Read+0x4e>
 80070da:	2302      	movs	r3, #2
 80070dc:	e0ea      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070e6:	f7ff fb45 	bl	8006774 <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2319      	movs	r3, #25
 80070f2:	2201      	movs	r2, #1
 80070f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 f9af 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0d5      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2222      	movs	r2, #34	; 0x22
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2240      	movs	r2, #64	; 0x40
 8007114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007130:	88f8      	ldrh	r0, [r7, #6]
 8007132:	893a      	ldrh	r2, [r7, #8]
 8007134:	8979      	ldrh	r1, [r7, #10]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	4603      	mov	r3, r0
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 f913 	bl	800736c <I2C_RequestMemoryRead>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0ad      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	2bff      	cmp	r3, #255	; 0xff
 8007160:	d90e      	bls.n	8007180 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	22ff      	movs	r2, #255	; 0xff
 8007166:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	b2da      	uxtb	r2, r3
 800716e:	8979      	ldrh	r1, [r7, #10]
 8007170:	4b52      	ldr	r3, [pc, #328]	; (80072bc <HAL_I2C_Mem_Read+0x22c>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fb17 	bl	80077ac <I2C_TransferConfig>
 800717e:	e00f      	b.n	80071a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718e:	b2da      	uxtb	r2, r3
 8007190:	8979      	ldrh	r1, [r7, #10]
 8007192:	4b4a      	ldr	r3, [pc, #296]	; (80072bc <HAL_I2C_Mem_Read+0x22c>)
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fb06 	bl	80077ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	2200      	movs	r2, #0
 80071a8:	2104      	movs	r1, #4
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f956 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e07c      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d034      	beq.n	8007260 <HAL_I2C_Mem_Read+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d130      	bne.n	8007260 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f927 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e04d      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	2bff      	cmp	r3, #255	; 0xff
 8007220:	d90e      	bls.n	8007240 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722c:	b2da      	uxtb	r2, r3
 800722e:	8979      	ldrh	r1, [r7, #10]
 8007230:	2300      	movs	r3, #0
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fab7 	bl	80077ac <I2C_TransferConfig>
 800723e:	e00f      	b.n	8007260 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724e:	b2da      	uxtb	r2, r3
 8007250:	8979      	ldrh	r1, [r7, #10]
 8007252:	2300      	movs	r3, #0
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 faa6 	bl	80077ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d19a      	bne.n	80071a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f974 	bl	800755c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e01a      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2220      	movs	r2, #32
 8007284:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6859      	ldr	r1, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <HAL_I2C_Mem_Read+0x230>)
 8007292:	400b      	ands	r3, r1
 8007294:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e000      	b.n	80072b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80072b2:	2302      	movs	r3, #2
  }
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	80002400 	.word	0x80002400
 80072c0:	fe00e800 	.word	0xfe00e800

080072c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	817b      	strh	r3, [r7, #10]
 80072d6:	460b      	mov	r3, r1
 80072d8:	813b      	strh	r3, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	8979      	ldrh	r1, [r7, #10]
 80072e4:	4b20      	ldr	r3, [pc, #128]	; (8007368 <I2C_RequestMemoryWrite+0xa4>)
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fa5d 	bl	80077ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f8f0 	bl	80074dc <I2C_WaitOnTXISFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e02c      	b.n	8007360 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d105      	bne.n	8007318 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800730c:	893b      	ldrh	r3, [r7, #8]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	629a      	str	r2, [r3, #40]	; 0x28
 8007316:	e015      	b.n	8007344 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007318:	893b      	ldrh	r3, [r7, #8]
 800731a:	0a1b      	lsrs	r3, r3, #8
 800731c:	b29b      	uxth	r3, r3
 800731e:	b2da      	uxtb	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f8d6 	bl	80074dc <I2C_WaitOnTXISFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e012      	b.n	8007360 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800733a:	893b      	ldrh	r3, [r7, #8]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2200      	movs	r2, #0
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f884 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	80002000 	.word	0x80002000

0800736c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af02      	add	r7, sp, #8
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4603      	mov	r3, r0
 800737c:	817b      	strh	r3, [r7, #10]
 800737e:	460b      	mov	r3, r1
 8007380:	813b      	strh	r3, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	b2da      	uxtb	r2, r3
 800738a:	8979      	ldrh	r1, [r7, #10]
 800738c:	4b20      	ldr	r3, [pc, #128]	; (8007410 <I2C_RequestMemoryRead+0xa4>)
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fa0a 	bl	80077ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	69b9      	ldr	r1, [r7, #24]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f89d 	bl	80074dc <I2C_WaitOnTXISFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e02c      	b.n	8007406 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d105      	bne.n	80073be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073b2:	893b      	ldrh	r3, [r7, #8]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
 80073bc:	e015      	b.n	80073ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073be:	893b      	ldrh	r3, [r7, #8]
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f883 	bl	80074dc <I2C_WaitOnTXISFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e012      	b.n	8007406 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073e0:	893b      	ldrh	r3, [r7, #8]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2200      	movs	r2, #0
 80073f2:	2140      	movs	r1, #64	; 0x40
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f831 	bl	800745c <I2C_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	80002000 	.word	0x80002000

08007414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b02      	cmp	r3, #2
 8007428:	d103      	bne.n	8007432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b01      	cmp	r3, #1
 800743e:	d007      	beq.n	8007450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	619a      	str	r2, [r3, #24]
  }
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800746c:	e022      	b.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d01e      	beq.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007476:	f7ff f97d 	bl	8006774 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d302      	bcc.n	800748c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d113      	bne.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e00f      	b.n	80074d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	4013      	ands	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d0cd      	beq.n	800746e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074e8:	e02c      	b.n	8007544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f870 	bl	80075d4 <I2C_IsErrorOccurred>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e02a      	b.n	8007554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d01e      	beq.n	8007544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7ff f935 	bl	8006774 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d113      	bne.n	8007544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	f043 0220 	orr.w	r2, r3, #32
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e007      	b.n	8007554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d1cb      	bne.n	80074ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007568:	e028      	b.n	80075bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f830 	bl	80075d4 <I2C_IsErrorOccurred>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e026      	b.n	80075cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7ff f8f9 	bl	8006774 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d113      	bne.n	80075bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e007      	b.n	80075cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d1cf      	bne.n	800756a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d075      	beq.n	80076ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2210      	movs	r2, #16
 8007606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007608:	e056      	b.n	80076b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d052      	beq.n	80076b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007612:	f7ff f8af 	bl	8006774 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <I2C_IsErrorOccurred+0x54>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d147      	bne.n	80076b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800763a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764a:	d12e      	bne.n	80076aa <I2C_IsErrorOccurred+0xd6>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007652:	d02a      	beq.n	80076aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007654:	7cfb      	ldrb	r3, [r7, #19]
 8007656:	2b20      	cmp	r3, #32
 8007658:	d027      	beq.n	80076aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007668:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800766a:	f7ff f883 	bl	8006774 <HAL_GetTick>
 800766e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007670:	e01b      	b.n	80076aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007672:	f7ff f87f 	bl	8006774 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b19      	cmp	r3, #25
 800767e:	d914      	bls.n	80076aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d1dc      	bne.n	8007672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d003      	beq.n	80076ce <I2C_IsErrorOccurred+0xfa>
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d09d      	beq.n	800760a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80076ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2220      	movs	r2, #32
 80076dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f043 0304 	orr.w	r3, r3, #4
 80076e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	f043 0301 	orr.w	r3, r3, #1
 8007704:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800770e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	f043 0308 	orr.w	r3, r3, #8
 8007726:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800775a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01c      	beq.n	800779c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fe56 	bl	8007414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <I2C_IsErrorOccurred+0x1d4>)
 8007774:	400b      	ands	r3, r1
 8007776:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	431a      	orrs	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800779c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3728      	adds	r7, #40	; 0x28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	fe00e800 	.word	0xfe00e800

080077ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	817b      	strh	r3, [r7, #10]
 80077ba:	4613      	mov	r3, r2
 80077bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077be:	897b      	ldrh	r3, [r7, #10]
 80077c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077c4:	7a7b      	ldrb	r3, [r7, #9]
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	0d5b      	lsrs	r3, r3, #21
 80077e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80077ea:	4b08      	ldr	r3, [pc, #32]	; (800780c <I2C_TransferConfig+0x60>)
 80077ec:	430b      	orrs	r3, r1
 80077ee:	43db      	mvns	r3, r3
 80077f0:	ea02 0103 	and.w	r1, r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	03ff63ff 	.word	0x03ff63ff

08007810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b20      	cmp	r3, #32
 8007824:	d138      	bne.n	8007898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007830:	2302      	movs	r3, #2
 8007832:	e032      	b.n	800789a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2224      	movs	r2, #36	; 0x24
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6819      	ldr	r1, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	e000      	b.n	800789a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d139      	bne.n	8007930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e033      	b.n	8007932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2224      	movs	r2, #36	; 0x24
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	e000      	b.n	8007932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007930:	2302      	movs	r3, #2
  }
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007948:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800794a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800794e:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007950:	f043 0302 	orr.w	r3, r3, #2
 8007954:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800795a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007966:	4b07      	ldr	r3, [pc, #28]	; (8007984 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	4906      	ldr	r1, [pc, #24]	; (8007984 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	58024400 	.word	0x58024400
 8007984:	58000400 	.word	0x58000400

08007988 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007990:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <HAL_PWREx_ConfigSupply+0x70>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b04      	cmp	r3, #4
 800799a:	d00a      	beq.n	80079b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800799c:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <HAL_PWREx_ConfigSupply+0x70>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d001      	beq.n	80079ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e01f      	b.n	80079ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e01d      	b.n	80079ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079b2:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <HAL_PWREx_ConfigSupply+0x70>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f023 0207 	bic.w	r2, r3, #7
 80079ba:	490f      	ldr	r1, [pc, #60]	; (80079f8 <HAL_PWREx_ConfigSupply+0x70>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079c2:	f7fe fed7 	bl	8006774 <HAL_GetTick>
 80079c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079c8:	e009      	b.n	80079de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079ca:	f7fe fed3 	bl	8006774 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079d8:	d901      	bls.n	80079de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e007      	b.n	80079ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <HAL_PWREx_ConfigSupply+0x70>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ea:	d1ee      	bne.n	80079ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	58024800 	.word	0x58024800

080079fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	; 0x30
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f000 bc1d 	b.w	800824a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8087 	beq.w	8007b2c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a1e:	4b99      	ldr	r3, [pc, #612]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a28:	4b96      	ldr	r3, [pc, #600]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d007      	beq.n	8007a44 <HAL_RCC_OscConfig+0x48>
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	d110      	bne.n	8007a5c <HAL_RCC_OscConfig+0x60>
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d10b      	bne.n	8007a5c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a44:	4b8f      	ldr	r3, [pc, #572]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d06c      	beq.n	8007b2a <HAL_RCC_OscConfig+0x12e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d168      	bne.n	8007b2a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e3f6      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d106      	bne.n	8007a74 <HAL_RCC_OscConfig+0x78>
 8007a66:	4b87      	ldr	r3, [pc, #540]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a86      	ldr	r2, [pc, #536]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e02e      	b.n	8007ad2 <HAL_RCC_OscConfig+0xd6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <HAL_RCC_OscConfig+0x9a>
 8007a7c:	4b81      	ldr	r3, [pc, #516]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a80      	ldr	r2, [pc, #512]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4b7e      	ldr	r3, [pc, #504]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a7d      	ldr	r2, [pc, #500]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	e01d      	b.n	8007ad2 <HAL_RCC_OscConfig+0xd6>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCC_OscConfig+0xbe>
 8007aa0:	4b78      	ldr	r3, [pc, #480]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a77      	ldr	r2, [pc, #476]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	4b75      	ldr	r3, [pc, #468]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a74      	ldr	r2, [pc, #464]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e00b      	b.n	8007ad2 <HAL_RCC_OscConfig+0xd6>
 8007aba:	4b72      	ldr	r3, [pc, #456]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a71      	ldr	r2, [pc, #452]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	4b6f      	ldr	r3, [pc, #444]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6e      	ldr	r2, [pc, #440]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d013      	beq.n	8007b02 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fe fe4b 	bl	8006774 <HAL_GetTick>
 8007ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ae0:	e008      	b.n	8007af4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ae2:	f7fe fe47 	bl	8006774 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b64      	cmp	r3, #100	; 0x64
 8007aee:	d901      	bls.n	8007af4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e3aa      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007af4:	4b63      	ldr	r3, [pc, #396]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0f0      	beq.n	8007ae2 <HAL_RCC_OscConfig+0xe6>
 8007b00:	e014      	b.n	8007b2c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b02:	f7fe fe37 	bl	8006774 <HAL_GetTick>
 8007b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b0a:	f7fe fe33 	bl	8006774 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b64      	cmp	r3, #100	; 0x64
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e396      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b1c:	4b59      	ldr	r3, [pc, #356]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f0      	bne.n	8007b0a <HAL_RCC_OscConfig+0x10e>
 8007b28:	e000      	b.n	8007b2c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80cb 	beq.w	8007cd0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b3a:	4b52      	ldr	r3, [pc, #328]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b44:	4b4f      	ldr	r3, [pc, #316]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d007      	beq.n	8007b60 <HAL_RCC_OscConfig+0x164>
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	2b18      	cmp	r3, #24
 8007b54:	d156      	bne.n	8007c04 <HAL_RCC_OscConfig+0x208>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d151      	bne.n	8007c04 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b60:	4b48      	ldr	r3, [pc, #288]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_OscConfig+0x17c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e368      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b78:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 0219 	bic.w	r2, r3, #25
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	493f      	ldr	r1, [pc, #252]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b8a:	f7fe fdf3 	bl	8006774 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fe fdef 	bl	8006774 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e352      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba4:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	f7fe fe10 	bl	80067d4 <HAL_GetREVID>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d817      	bhi.n	8007bee <HAL_RCC_OscConfig+0x1f2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d108      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x1dc>
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bce:	4a2d      	ldr	r2, [pc, #180]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bd6:	e07b      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd8:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	031b      	lsls	r3, r3, #12
 8007be6:	4927      	ldr	r1, [pc, #156]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bec:	e070      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	061b      	lsls	r3, r3, #24
 8007bfc:	4921      	ldr	r1, [pc, #132]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c02:	e065      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d048      	beq.n	8007c9e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f023 0219 	bic.w	r2, r3, #25
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	491a      	ldr	r1, [pc, #104]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fe fda9 	bl	8006774 <HAL_GetTick>
 8007c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c26:	f7fe fda5 	bl	8006774 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e308      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c38:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0f0      	beq.n	8007c26 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c44:	f7fe fdc6 	bl	80067d4 <HAL_GetREVID>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d81a      	bhi.n	8007c88 <HAL_RCC_OscConfig+0x28c>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d108      	bne.n	8007c6c <HAL_RCC_OscConfig+0x270>
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c62:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c68:	6053      	str	r3, [r2, #4]
 8007c6a:	e031      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	4902      	ldr	r1, [pc, #8]	; (8007c84 <HAL_RCC_OscConfig+0x288>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	604b      	str	r3, [r1, #4]
 8007c80:	e026      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	4b9a      	ldr	r3, [pc, #616]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	061b      	lsls	r3, r3, #24
 8007c96:	4997      	ldr	r1, [pc, #604]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	604b      	str	r3, [r1, #4]
 8007c9c:	e018      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c9e:	4b95      	ldr	r3, [pc, #596]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a94      	ldr	r2, [pc, #592]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007caa:	f7fe fd63 	bl	8006774 <HAL_GetTick>
 8007cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cb0:	e008      	b.n	8007cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb2:	f7fe fd5f 	bl	8006774 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e2c2      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f0      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80a9 	beq.w	8007e30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cde:	4b85      	ldr	r3, [pc, #532]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ce6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ce8:	4b82      	ldr	r3, [pc, #520]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d007      	beq.n	8007d04 <HAL_RCC_OscConfig+0x308>
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b18      	cmp	r3, #24
 8007cf8:	d13a      	bne.n	8007d70 <HAL_RCC_OscConfig+0x374>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d135      	bne.n	8007d70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d04:	4b7b      	ldr	r3, [pc, #492]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_RCC_OscConfig+0x320>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e296      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d1c:	f7fe fd5a 	bl	80067d4 <HAL_GetREVID>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d817      	bhi.n	8007d5a <HAL_RCC_OscConfig+0x35e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d108      	bne.n	8007d44 <HAL_RCC_OscConfig+0x348>
 8007d32:	4b70      	ldr	r3, [pc, #448]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d3a:	4a6e      	ldr	r2, [pc, #440]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d42:	e075      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d44:	4b6b      	ldr	r3, [pc, #428]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	069b      	lsls	r3, r3, #26
 8007d52:	4968      	ldr	r1, [pc, #416]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d58:	e06a      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d5a:	4b66      	ldr	r3, [pc, #408]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	061b      	lsls	r3, r3, #24
 8007d68:	4962      	ldr	r1, [pc, #392]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d6e:	e05f      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d042      	beq.n	8007dfe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d78:	4b5e      	ldr	r3, [pc, #376]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a5d      	ldr	r2, [pc, #372]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d84:	f7fe fcf6 	bl	8006774 <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d8c:	f7fe fcf2 	bl	8006774 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e255      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d9e:	4b55      	ldr	r3, [pc, #340]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007daa:	f7fe fd13 	bl	80067d4 <HAL_GetREVID>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d817      	bhi.n	8007de8 <HAL_RCC_OscConfig+0x3ec>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d108      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x3d6>
 8007dc0:	4b4c      	ldr	r3, [pc, #304]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dc8:	4a4a      	ldr	r2, [pc, #296]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dce:	6053      	str	r3, [r2, #4]
 8007dd0:	e02e      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
 8007dd2:	4b48      	ldr	r3, [pc, #288]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	069b      	lsls	r3, r3, #26
 8007de0:	4944      	ldr	r1, [pc, #272]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	604b      	str	r3, [r1, #4]
 8007de6:	e023      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
 8007de8:	4b42      	ldr	r3, [pc, #264]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	061b      	lsls	r3, r3, #24
 8007df6:	493f      	ldr	r1, [pc, #252]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60cb      	str	r3, [r1, #12]
 8007dfc:	e018      	b.n	8007e30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007dfe:	4b3d      	ldr	r3, [pc, #244]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a3c      	ldr	r2, [pc, #240]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0a:	f7fe fcb3 	bl	8006774 <HAL_GetTick>
 8007e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e12:	f7fe fcaf 	bl	8006774 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e212      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e24:	4b33      	ldr	r3, [pc, #204]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f0      	bne.n	8007e12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d036      	beq.n	8007eaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d019      	beq.n	8007e78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e44:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e48:	4a2a      	ldr	r2, [pc, #168]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e50:	f7fe fc90 	bl	8006774 <HAL_GetTick>
 8007e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e58:	f7fe fc8c 	bl	8006774 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e1ef      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e6a:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f0      	beq.n	8007e58 <HAL_RCC_OscConfig+0x45c>
 8007e76:	e018      	b.n	8007eaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007e7e:	f023 0301 	bic.w	r3, r3, #1
 8007e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e84:	f7fe fc76 	bl	8006774 <HAL_GetTick>
 8007e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e8c:	f7fe fc72 	bl	8006774 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e1d5      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e9e:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d039      	beq.n	8007f2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01c      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007eca:	f7fe fc53 	bl	8006774 <HAL_GetTick>
 8007ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ed2:	f7fe fc4f 	bl	8006774 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e1b2      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <HAL_RCC_OscConfig+0x4f8>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0f0      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x4d6>
 8007ef0:	e01b      	b.n	8007f2a <HAL_RCC_OscConfig+0x52e>
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ef8:	4b9b      	ldr	r3, [pc, #620]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a9a      	ldr	r2, [pc, #616]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f04:	f7fe fc36 	bl	8006774 <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f0c:	f7fe fc32 	bl	8006774 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e195      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f1e:	4b92      	ldr	r3, [pc, #584]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8081 	beq.w	800803a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f38:	4b8c      	ldr	r3, [pc, #560]	; (800816c <HAL_RCC_OscConfig+0x770>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a8b      	ldr	r2, [pc, #556]	; (800816c <HAL_RCC_OscConfig+0x770>)
 8007f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f44:	f7fe fc16 	bl	8006774 <HAL_GetTick>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f4c:	f7fe fc12 	bl	8006774 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b64      	cmp	r3, #100	; 0x64
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e175      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f5e:	4b83      	ldr	r3, [pc, #524]	; (800816c <HAL_RCC_OscConfig+0x770>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f0      	beq.n	8007f4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d106      	bne.n	8007f80 <HAL_RCC_OscConfig+0x584>
 8007f72:	4b7d      	ldr	r3, [pc, #500]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	4a7c      	ldr	r2, [pc, #496]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f7e:	e02d      	b.n	8007fdc <HAL_RCC_OscConfig+0x5e0>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x5a6>
 8007f88:	4b77      	ldr	r3, [pc, #476]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	4a76      	ldr	r2, [pc, #472]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	6713      	str	r3, [r2, #112]	; 0x70
 8007f94:	4b74      	ldr	r3, [pc, #464]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	4a73      	ldr	r2, [pc, #460]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007f9a:	f023 0304 	bic.w	r3, r3, #4
 8007f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa0:	e01c      	b.n	8007fdc <HAL_RCC_OscConfig+0x5e0>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c8>
 8007faa:	4b6f      	ldr	r3, [pc, #444]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	4a6e      	ldr	r2, [pc, #440]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fb0:	f043 0304 	orr.w	r3, r3, #4
 8007fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb6:	4b6c      	ldr	r3, [pc, #432]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4a6b      	ldr	r2, [pc, #428]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc2:	e00b      	b.n	8007fdc <HAL_RCC_OscConfig+0x5e0>
 8007fc4:	4b68      	ldr	r3, [pc, #416]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc8:	4a67      	ldr	r2, [pc, #412]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd0:	4b65      	ldr	r3, [pc, #404]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	4a64      	ldr	r2, [pc, #400]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	f023 0304 	bic.w	r3, r3, #4
 8007fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d015      	beq.n	8008010 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe4:	f7fe fbc6 	bl	8006774 <HAL_GetTick>
 8007fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fea:	e00a      	b.n	8008002 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fec:	f7fe fbc2 	bl	8006774 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e123      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008002:	4b59      	ldr	r3, [pc, #356]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ee      	beq.n	8007fec <HAL_RCC_OscConfig+0x5f0>
 800800e:	e014      	b.n	800803a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008010:	f7fe fbb0 	bl	8006774 <HAL_GetTick>
 8008014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008016:	e00a      	b.n	800802e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008018:	f7fe fbac 	bl	8006774 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f241 3288 	movw	r2, #5000	; 0x1388
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e10d      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800802e:	4b4e      	ldr	r3, [pc, #312]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1ee      	bne.n	8008018 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8102 	beq.w	8008248 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008044:	4b48      	ldr	r3, [pc, #288]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800804c:	2b18      	cmp	r3, #24
 800804e:	f000 80bd 	beq.w	80081cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b02      	cmp	r3, #2
 8008058:	f040 809e 	bne.w	8008198 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800805c:	4b42      	ldr	r3, [pc, #264]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a41      	ldr	r2, [pc, #260]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fe fb84 	bl	8006774 <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008070:	f7fe fb80 	bl	8006774 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e0e3      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008082:	4b39      	ldr	r3, [pc, #228]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800808e:	4b36      	ldr	r3, [pc, #216]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <HAL_RCC_OscConfig+0x774>)
 8008094:	4013      	ands	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800809e:	0112      	lsls	r2, r2, #4
 80080a0:	430a      	orrs	r2, r1
 80080a2:	4931      	ldr	r1, [pc, #196]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	628b      	str	r3, [r1, #40]	; 0x28
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	3b01      	subs	r3, #1
 80080ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	3b01      	subs	r3, #1
 80080b8:	025b      	lsls	r3, r3, #9
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	3b01      	subs	r3, #1
 80080c4:	041b      	lsls	r3, r3, #16
 80080c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	3b01      	subs	r3, #1
 80080d2:	061b      	lsls	r3, r3, #24
 80080d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080d8:	4923      	ldr	r1, [pc, #140]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80080de:	4b22      	ldr	r3, [pc, #136]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	4a21      	ldr	r2, [pc, #132]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080ea:	4b1f      	ldr	r3, [pc, #124]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ee:	4b21      	ldr	r3, [pc, #132]	; (8008174 <HAL_RCC_OscConfig+0x778>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080f6:	00d2      	lsls	r2, r2, #3
 80080f8:	491b      	ldr	r1, [pc, #108]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80080fe:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	f023 020c 	bic.w	r2, r3, #12
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	4917      	ldr	r1, [pc, #92]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008110:	4b15      	ldr	r3, [pc, #84]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	f023 0202 	bic.w	r2, r3, #2
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811c:	4912      	ldr	r1, [pc, #72]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008122:	4b11      	ldr	r3, [pc, #68]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4a10      	ldr	r2, [pc, #64]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800812c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	4a0a      	ldr	r2, [pc, #40]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a07      	ldr	r2, [pc, #28]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 800814c:	f043 0301 	orr.w	r3, r3, #1
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <HAL_RCC_OscConfig+0x76c>)
 8008158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800815c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815e:	f7fe fb09 	bl	8006774 <HAL_GetTick>
 8008162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008164:	e011      	b.n	800818a <HAL_RCC_OscConfig+0x78e>
 8008166:	bf00      	nop
 8008168:	58024400 	.word	0x58024400
 800816c:	58024800 	.word	0x58024800
 8008170:	fffffc0c 	.word	0xfffffc0c
 8008174:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008178:	f7fe fafc 	bl	8006774 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e05f      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800818a:	4b32      	ldr	r3, [pc, #200]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f0      	beq.n	8008178 <HAL_RCC_OscConfig+0x77c>
 8008196:	e057      	b.n	8008248 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008198:	4b2e      	ldr	r3, [pc, #184]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 800819e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a4:	f7fe fae6 	bl	8006774 <HAL_GetTick>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ac:	f7fe fae2 	bl	8006774 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e045      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081be:	4b25      	ldr	r3, [pc, #148]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f0      	bne.n	80081ac <HAL_RCC_OscConfig+0x7b0>
 80081ca:	e03d      	b.n	8008248 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081cc:	4b21      	ldr	r3, [pc, #132]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081d2:	4b20      	ldr	r3, [pc, #128]	; (8008254 <HAL_RCC_OscConfig+0x858>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d031      	beq.n	8008244 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f003 0203 	and.w	r2, r3, #3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d12a      	bne.n	8008244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	091b      	lsrs	r3, r3, #4
 80081f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d122      	bne.n	8008244 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800820a:	429a      	cmp	r2, r3
 800820c:	d11a      	bne.n	8008244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	0a5b      	lsrs	r3, r3, #9
 8008212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800821c:	429a      	cmp	r2, r3
 800821e:	d111      	bne.n	8008244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d108      	bne.n	8008244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	0e1b      	lsrs	r3, r3, #24
 8008236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008240:	429a      	cmp	r2, r3
 8008242:	d001      	beq.n	8008248 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3730      	adds	r7, #48	; 0x30
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400

08008258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e19c      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800826c:	4b8a      	ldr	r3, [pc, #552]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d910      	bls.n	800829c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800827a:	4b87      	ldr	r3, [pc, #540]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f023 020f 	bic.w	r2, r3, #15
 8008282:	4985      	ldr	r1, [pc, #532]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	4313      	orrs	r3, r2
 8008288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800828a:	4b83      	ldr	r3, [pc, #524]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d001      	beq.n	800829c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e184      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	4b7b      	ldr	r3, [pc, #492]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d908      	bls.n	80082ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082b8:	4b78      	ldr	r3, [pc, #480]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	4975      	ldr	r1, [pc, #468]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	4b70      	ldr	r3, [pc, #448]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d908      	bls.n	80082f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082e6:	4b6d      	ldr	r3, [pc, #436]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	496a      	ldr	r1, [pc, #424]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	4b64      	ldr	r3, [pc, #400]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008310:	429a      	cmp	r2, r3
 8008312:	d908      	bls.n	8008326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008314:	4b61      	ldr	r3, [pc, #388]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	495e      	ldr	r1, [pc, #376]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008322:	4313      	orrs	r3, r2
 8008324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d010      	beq.n	8008354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	4b59      	ldr	r3, [pc, #356]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800833e:	429a      	cmp	r2, r3
 8008340:	d908      	bls.n	8008354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008342:	4b56      	ldr	r3, [pc, #344]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	4953      	ldr	r1, [pc, #332]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008350:	4313      	orrs	r3, r2
 8008352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	4b4d      	ldr	r3, [pc, #308]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	429a      	cmp	r2, r3
 800836e:	d908      	bls.n	8008382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008370:	4b4a      	ldr	r3, [pc, #296]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f023 020f 	bic.w	r2, r3, #15
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4947      	ldr	r1, [pc, #284]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 800837e:	4313      	orrs	r3, r2
 8008380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d055      	beq.n	800843a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800838e:	4b43      	ldr	r3, [pc, #268]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4940      	ldr	r1, [pc, #256]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 800839c:	4313      	orrs	r3, r2
 800839e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d107      	bne.n	80083b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083a8:	4b3c      	ldr	r3, [pc, #240]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d121      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e0f6      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c0:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d115      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0ea      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d107      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d109      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e0de      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083e8:	4b2c      	ldr	r3, [pc, #176]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e0d6      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083f8:	4b28      	ldr	r3, [pc, #160]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f023 0207 	bic.w	r2, r3, #7
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4925      	ldr	r1, [pc, #148]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008406:	4313      	orrs	r3, r2
 8008408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840a:	f7fe f9b3 	bl	8006774 <HAL_GetTick>
 800840e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008410:	e00a      	b.n	8008428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008412:	f7fe f9af 	bl	8006774 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	4293      	cmp	r3, r2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e0be      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	429a      	cmp	r2, r3
 8008438:	d1eb      	bne.n	8008412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	4b14      	ldr	r3, [pc, #80]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	429a      	cmp	r2, r3
 8008454:	d208      	bcs.n	8008468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008456:	4b11      	ldr	r3, [pc, #68]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f023 020f 	bic.w	r2, r3, #15
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	490e      	ldr	r1, [pc, #56]	; (800849c <HAL_RCC_ClockConfig+0x244>)
 8008464:	4313      	orrs	r3, r2
 8008466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008468:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d214      	bcs.n	80084a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008476:	4b08      	ldr	r3, [pc, #32]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f023 020f 	bic.w	r2, r3, #15
 800847e:	4906      	ldr	r1, [pc, #24]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <HAL_RCC_ClockConfig+0x240>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d005      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e086      	b.n	80085a6 <HAL_RCC_ClockConfig+0x34e>
 8008498:	52002000 	.word	0x52002000
 800849c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d010      	beq.n	80084ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	4b3f      	ldr	r3, [pc, #252]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d208      	bcs.n	80084ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084bc:	4b3c      	ldr	r3, [pc, #240]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4939      	ldr	r1, [pc, #228]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d010      	beq.n	80084fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d208      	bcs.n	80084fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084ea:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	492e      	ldr	r1, [pc, #184]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d010      	beq.n	800852a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699a      	ldr	r2, [r3, #24]
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008514:	429a      	cmp	r2, r3
 8008516:	d208      	bcs.n	800852a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008518:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	4922      	ldr	r1, [pc, #136]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 8008526:	4313      	orrs	r3, r2
 8008528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d010      	beq.n	8008558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69da      	ldr	r2, [r3, #28]
 800853a:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008542:	429a      	cmp	r2, r3
 8008544:	d208      	bcs.n	8008558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008546:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	4917      	ldr	r1, [pc, #92]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 8008554:	4313      	orrs	r3, r2
 8008556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008558:	f000 f834 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 800855c:	4602      	mov	r2, r0
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	f003 030f 	and.w	r3, r3, #15
 8008568:	4912      	ldr	r1, [pc, #72]	; (80085b4 <HAL_RCC_ClockConfig+0x35c>)
 800856a:	5ccb      	ldrb	r3, [r1, r3]
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <HAL_RCC_ClockConfig+0x358>)
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f003 030f 	and.w	r3, r3, #15
 800857e:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <HAL_RCC_ClockConfig+0x35c>)
 8008580:	5cd3      	ldrb	r3, [r2, r3]
 8008582:	f003 031f 	and.w	r3, r3, #31
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <HAL_RCC_ClockConfig+0x360>)
 800858e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <HAL_RCC_ClockConfig+0x364>)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_RCC_ClockConfig+0x368>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe f8a0 	bl	80066e0 <HAL_InitTick>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	58024400 	.word	0x58024400
 80085b4:	0800fdc4 	.word	0x0800fdc4
 80085b8:	24000028 	.word	0x24000028
 80085bc:	24000024 	.word	0x24000024
 80085c0:	2400002c 	.word	0x2400002c

080085c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b089      	sub	sp, #36	; 0x24
 80085c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085ca:	4bb3      	ldr	r3, [pc, #716]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d2:	2b18      	cmp	r3, #24
 80085d4:	f200 8155 	bhi.w	8008882 <HAL_RCC_GetSysClockFreq+0x2be>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008645 	.word	0x08008645
 80085e4:	08008883 	.word	0x08008883
 80085e8:	08008883 	.word	0x08008883
 80085ec:	08008883 	.word	0x08008883
 80085f0:	08008883 	.word	0x08008883
 80085f4:	08008883 	.word	0x08008883
 80085f8:	08008883 	.word	0x08008883
 80085fc:	08008883 	.word	0x08008883
 8008600:	0800866b 	.word	0x0800866b
 8008604:	08008883 	.word	0x08008883
 8008608:	08008883 	.word	0x08008883
 800860c:	08008883 	.word	0x08008883
 8008610:	08008883 	.word	0x08008883
 8008614:	08008883 	.word	0x08008883
 8008618:	08008883 	.word	0x08008883
 800861c:	08008883 	.word	0x08008883
 8008620:	08008671 	.word	0x08008671
 8008624:	08008883 	.word	0x08008883
 8008628:	08008883 	.word	0x08008883
 800862c:	08008883 	.word	0x08008883
 8008630:	08008883 	.word	0x08008883
 8008634:	08008883 	.word	0x08008883
 8008638:	08008883 	.word	0x08008883
 800863c:	08008883 	.word	0x08008883
 8008640:	08008677 	.word	0x08008677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008644:	4b94      	ldr	r3, [pc, #592]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008650:	4b91      	ldr	r3, [pc, #580]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a90      	ldr	r2, [pc, #576]	; (800889c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008662:	e111      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008664:	4b8d      	ldr	r3, [pc, #564]	; (800889c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008666:	61bb      	str	r3, [r7, #24]
    break;
 8008668:	e10e      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800866a:	4b8d      	ldr	r3, [pc, #564]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800866c:	61bb      	str	r3, [r7, #24]
    break;
 800866e:	e10b      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008670:	4b8c      	ldr	r3, [pc, #560]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008672:	61bb      	str	r3, [r7, #24]
    break;
 8008674:	e108      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008676:	4b88      	ldr	r3, [pc, #544]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008680:	4b85      	ldr	r3, [pc, #532]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	091b      	lsrs	r3, r3, #4
 8008686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800868a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800868c:	4b82      	ldr	r3, [pc, #520]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008696:	4b80      	ldr	r3, [pc, #512]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80e1 	beq.w	800887c <HAL_RCC_GetSysClockFreq+0x2b8>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	f000 8083 	beq.w	80087c8 <HAL_RCC_GetSysClockFreq+0x204>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	f200 80a1 	bhi.w	800880c <HAL_RCC_GetSysClockFreq+0x248>
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_RCC_GetSysClockFreq+0x114>
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d056      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086d6:	e099      	b.n	800880c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d8:	4b6f      	ldr	r3, [pc, #444]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d02d      	beq.n	8008740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086e4:	4b6c      	ldr	r3, [pc, #432]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a6b      	ldr	r2, [pc, #428]	; (800889c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870e:	4b62      	ldr	r3, [pc, #392]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800873e:	e087      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800874e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008752:	4b51      	ldr	r3, [pc, #324]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008762:	ed97 6a02 	vldr	s12, [r7, #8]
 8008766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800876a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008782:	e065      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008796:	4b40      	ldr	r3, [pc, #256]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c6:	e043      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087da:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800880a:	e021      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800881a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881e:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	0a5b      	lsrs	r3, r3, #9
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	3301      	adds	r3, #1
 800885c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008868:	edd7 6a07 	vldr	s13, [r7, #28]
 800886c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008874:	ee17 3a90 	vmov	r3, s15
 8008878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800887a:	e005      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	61bb      	str	r3, [r7, #24]
    break;
 8008880:	e002      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008884:	61bb      	str	r3, [r7, #24]
    break;
 8008886:	bf00      	nop
  }

  return sysclockfreq;
 8008888:	69bb      	ldr	r3, [r7, #24]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3724      	adds	r7, #36	; 0x24
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	017d7840 	.word	0x017d7840
 80088a8:	46000000 	.word	0x46000000
 80088ac:	4c742400 	.word	0x4c742400
 80088b0:	4a742400 	.word	0x4a742400
 80088b4:	4bbebc20 	.word	0x4bbebc20

080088b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088be:	f7ff fe81 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b10      	ldr	r3, [pc, #64]	; (8008908 <HAL_RCC_GetHCLKFreq+0x50>)
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	0a1b      	lsrs	r3, r3, #8
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	490f      	ldr	r1, [pc, #60]	; (800890c <HAL_RCC_GetHCLKFreq+0x54>)
 80088d0:	5ccb      	ldrb	r3, [r1, r3]
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	fa22 f303 	lsr.w	r3, r2, r3
 80088da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <HAL_RCC_GetHCLKFreq+0x50>)
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	4a09      	ldr	r2, [pc, #36]	; (800890c <HAL_RCC_GetHCLKFreq+0x54>)
 80088e6:	5cd3      	ldrb	r3, [r2, r3]
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	fa22 f303 	lsr.w	r3, r2, r3
 80088f2:	4a07      	ldr	r2, [pc, #28]	; (8008910 <HAL_RCC_GetHCLKFreq+0x58>)
 80088f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088f6:	4a07      	ldr	r2, [pc, #28]	; (8008914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <HAL_RCC_GetHCLKFreq+0x58>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	58024400 	.word	0x58024400
 800890c:	0800fdc4 	.word	0x0800fdc4
 8008910:	24000028 	.word	0x24000028
 8008914:	24000024 	.word	0x24000024

08008918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800891c:	f7ff ffcc 	bl	80088b8 <HAL_RCC_GetHCLKFreq>
 8008920:	4602      	mov	r2, r0
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	091b      	lsrs	r3, r3, #4
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	4904      	ldr	r1, [pc, #16]	; (8008940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800892e:	5ccb      	ldrb	r3, [r1, r3]
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	58024400 	.word	0x58024400
 8008940:	0800fdc4 	.word	0x0800fdc4

08008944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008948:	f7ff ffb6 	bl	80088b8 <HAL_RCC_GetHCLKFreq>
 800894c:	4602      	mov	r2, r0
 800894e:	4b06      	ldr	r3, [pc, #24]	; (8008968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	4904      	ldr	r1, [pc, #16]	; (800896c <HAL_RCC_GetPCLK2Freq+0x28>)
 800895a:	5ccb      	ldrb	r3, [r1, r3]
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008964:	4618      	mov	r0, r3
 8008966:	bd80      	pop	{r7, pc}
 8008968:	58024400 	.word	0x58024400
 800896c:	0800fdc4 	.word	0x0800fdc4

08008970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008978:	2300      	movs	r3, #0
 800897a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800897c:	2300      	movs	r3, #0
 800897e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d03f      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008994:	d02a      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800899a:	d824      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800899c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089a0:	d018      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089a6:	d81e      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80089ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b0:	d007      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80089b2:	e018      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4ba3      	ldr	r3, [pc, #652]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	4aa2      	ldr	r2, [pc, #648]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089c0:	e015      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2102      	movs	r1, #2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f9d5 	bl	8009d78 <RCCEx_PLL2_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089d2:	e00c      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 fa7e 	bl	8009edc <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089e4:	e003      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ea:	e000      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80089ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d109      	bne.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089f4:	4b93      	ldr	r3, [pc, #588]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a00:	4990      	ldr	r1, [pc, #576]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	650b      	str	r3, [r1, #80]	; 0x50
 8008a06:	e001      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d03d      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d826      	bhi.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a20:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008a3d 	.word	0x08008a3d
 8008a2c:	08008a4b 	.word	0x08008a4b
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a75 	.word	0x08008a75
 8008a38:	08008a75 	.word	0x08008a75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3c:	4b81      	ldr	r3, [pc, #516]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a80      	ldr	r2, [pc, #512]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a48:	e015      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 f991 	bl	8009d78 <RCCEx_PLL2_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a5a:	e00c      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3324      	adds	r3, #36	; 0x24
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 fa3a 	bl	8009edc <RCCEx_PLL3_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a6c:	e003      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	75fb      	strb	r3, [r7, #23]
      break;
 8008a72:	e000      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a7c:	4b71      	ldr	r3, [pc, #452]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a80:	f023 0207 	bic.w	r2, r3, #7
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	496e      	ldr	r1, [pc, #440]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008a8e:	e001      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d042      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa8:	d02b      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aae:	d825      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ab2:	d028      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8008ab6:	d821      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d016      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d81d      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	d007      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008ac8:	e018      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aca:	4b5e      	ldr	r3, [pc, #376]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	4a5d      	ldr	r2, [pc, #372]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ad6:	e017      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 f94a 	bl	8009d78 <RCCEx_PLL2_Config>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ae8:	e00e      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3324      	adds	r3, #36	; 0x24
 8008aee:	2100      	movs	r1, #0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 f9f3 	bl	8009edc <RCCEx_PLL3_Config>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008afa:	e005      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	75fb      	strb	r3, [r7, #23]
      break;
 8008b00:	e002      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b02:	bf00      	nop
 8008b04:	e000      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d109      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b0e:	4b4d      	ldr	r3, [pc, #308]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1a:	494a      	ldr	r1, [pc, #296]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8008b20:	e001      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d049      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b3c:	d030      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b42:	d82a      	bhi.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b48:	d02c      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b4e:	d824      	bhi.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b54:	d018      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b5a:	d81e      	bhi.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b64:	d007      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008b66:	e018      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b68:	4b36      	ldr	r3, [pc, #216]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a35      	ldr	r2, [pc, #212]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b74:	e017      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 f8fb 	bl	8009d78 <RCCEx_PLL2_Config>
 8008b82:	4603      	mov	r3, r0
 8008b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b86:	e00e      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3324      	adds	r3, #36	; 0x24
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 f9a4 	bl	8009edc <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b98:	e005      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9e:	e002      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bac:	4b25      	ldr	r3, [pc, #148]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bba:	4922      	ldr	r1, [pc, #136]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8008bc0:	e001      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04b      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bdc:	d030      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008be2:	d82a      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008be8:	d02e      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bee:	d824      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bf4:	d018      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bfa:	d81e      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c04:	d007      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c06:	e018      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c14:	e019      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f8ab 	bl	8009d78 <RCCEx_PLL2_Config>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c26:	e010      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3324      	adds	r3, #36	; 0x24
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f954 	bl	8009edc <RCCEx_PLL3_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c38:	e007      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008c44:	58024400 	.word	0x58024400
      break;
 8008c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c50:	4b99      	ldr	r3, [pc, #612]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c5e:	4996      	ldr	r1, [pc, #600]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	658b      	str	r3, [r1, #88]	; 0x58
 8008c64:	e001      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d032      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c7a:	2b30      	cmp	r3, #48	; 0x30
 8008c7c:	d01c      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008c7e:	2b30      	cmp	r3, #48	; 0x30
 8008c80:	d817      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d00c      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d813      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d016      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d10f      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c92:	4b89      	ldr	r3, [pc, #548]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	4a88      	ldr	r2, [pc, #544]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008c9e:	e00e      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	2102      	movs	r1, #2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 f866 	bl	8009d78 <RCCEx_PLL2_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008cb0:	e005      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb6:	e002      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008cb8:	bf00      	nop
 8008cba:	e000      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008cc4:	4b7c      	ldr	r3, [pc, #496]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd0:	4979      	ldr	r1, [pc, #484]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008cd6:	e001      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d047      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cf0:	d030      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cf6:	d82a      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cfc:	d02c      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d02:	d824      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d08:	d018      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0e:	d81e      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d18:	d007      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008d1a:	e018      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d1c:	4b66      	ldr	r3, [pc, #408]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a65      	ldr	r2, [pc, #404]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d28:	e017      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 f821 	bl	8009d78 <RCCEx_PLL2_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d3a:	e00e      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f8ca 	bl	8009edc <RCCEx_PLL3_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d4c:	e005      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
      break;
 8008d52:	e002      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d60:	4b55      	ldr	r3, [pc, #340]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d6c:	4952      	ldr	r1, [pc, #328]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	650b      	str	r3, [r1, #80]	; 0x50
 8008d72:	e001      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d049      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d8c:	d02e      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d92:	d828      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d98:	d02a      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d9e:	d822      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008da4:	d026      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008daa:	d81c      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db0:	d010      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db6:	d816      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01d      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc0:	d111      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 ffd5 	bl	8009d78 <RCCEx_PLL2_Config>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008dd2:	e012      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	2101      	movs	r1, #1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f87e 	bl	8009edc <RCCEx_PLL3_Config>
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008de4:	e009      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dea:	e006      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008dec:	bf00      	nop
 8008dee:	e004      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e00:	4b2d      	ldr	r3, [pc, #180]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0c:	492a      	ldr	r1, [pc, #168]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	650b      	str	r3, [r1, #80]	; 0x50
 8008e12:	e001      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d04d      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e2e:	d02e      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e34:	d828      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3a:	d02a      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e40:	d822      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e46:	d026      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e4c:	d81c      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e52:	d010      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e58:	d816      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01d      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e62:	d111      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 ff84 	bl	8009d78 <RCCEx_PLL2_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e74:	e012      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3324      	adds	r3, #36	; 0x24
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 f82d 	bl	8009edc <RCCEx_PLL3_Config>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e86:	e009      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8c:	e006      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e8e:	bf00      	nop
 8008e90:	e004      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e92:	bf00      	nop
 8008e94:	e002      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e96:	bf00      	nop
 8008e98:	e000      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10c      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008eb0:	4901      	ldr	r1, [pc, #4]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8008eb6:	e003      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d02f      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eda:	d814      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d015      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee4:	d10f      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee6:	4baf      	ldr	r3, [pc, #700]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	4aae      	ldr	r2, [pc, #696]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ef2:	e00c      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 ff3c 	bl	8009d78 <RCCEx_PLL2_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f04:	e003      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0a:	e000      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f14:	4ba3      	ldr	r3, [pc, #652]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f20:	49a0      	ldr	r1, [pc, #640]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	650b      	str	r3, [r1, #80]	; 0x50
 8008f26:	e001      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d032      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d81b      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f7f 	.word	0x08008f7f
 8008f4c:	08008f59 	.word	0x08008f59
 8008f50:	08008f67 	.word	0x08008f67
 8008f54:	08008f7f 	.word	0x08008f7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f58:	4b92      	ldr	r3, [pc, #584]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a91      	ldr	r2, [pc, #580]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f64:	e00c      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 ff03 	bl	8009d78 <RCCEx_PLL2_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7c:	e000      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f86:	4b87      	ldr	r3, [pc, #540]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8a:	f023 0203 	bic.w	r2, r3, #3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f92:	4984      	ldr	r1, [pc, #528]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f98:	e001      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8086 	beq.w	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fac:	4b7e      	ldr	r3, [pc, #504]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a7d      	ldr	r2, [pc, #500]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fb8:	f7fd fbdc 	bl	8006774 <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fbe:	e009      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fc0:	f7fd fbd8 	bl	8006774 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b64      	cmp	r3, #100	; 0x64
 8008fcc:	d902      	bls.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8008fd2:	e005      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fd4:	4b74      	ldr	r3, [pc, #464]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0ef      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d166      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008fe6:	4b6f      	ldr	r3, [pc, #444]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ff0:	4053      	eors	r3, r2
 8008ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d013      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ffa:	4b6a      	ldr	r3, [pc, #424]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009004:	4b67      	ldr	r3, [pc, #412]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	4a66      	ldr	r2, [pc, #408]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800900a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800900e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009010:	4b64      	ldr	r3, [pc, #400]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009014:	4a63      	ldr	r2, [pc, #396]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800901a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800901c:	4a61      	ldr	r2, [pc, #388]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902c:	d115      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902e:	f7fd fba1 	bl	8006774 <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009034:	e00b      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009036:	f7fd fb9d 	bl	8006774 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f241 3288 	movw	r2, #5000	; 0x1388
 8009044:	4293      	cmp	r3, r2
 8009046:	d902      	bls.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	75fb      	strb	r3, [r7, #23]
            break;
 800904c:	e005      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800904e:	4b55      	ldr	r3, [pc, #340]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0ed      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d126      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800906e:	d10d      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009070:	4b4c      	ldr	r3, [pc, #304]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800907e:	0919      	lsrs	r1, r3, #4
 8009080:	4b4a      	ldr	r3, [pc, #296]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009082:	400b      	ands	r3, r1
 8009084:	4947      	ldr	r1, [pc, #284]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009086:	4313      	orrs	r3, r2
 8009088:	610b      	str	r3, [r1, #16]
 800908a:	e005      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800908c:	4b45      	ldr	r3, [pc, #276]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	4a44      	ldr	r2, [pc, #272]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009096:	6113      	str	r3, [r2, #16]
 8009098:	4b42      	ldr	r3, [pc, #264]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800909a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a6:	493f      	ldr	r1, [pc, #252]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	670b      	str	r3, [r1, #112]	; 0x70
 80090ac:	e004      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	75bb      	strb	r3, [r7, #22]
 80090b2:	e001      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 8085 	beq.w	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ca:	2b28      	cmp	r3, #40	; 0x28
 80090cc:	d866      	bhi.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	080091b1 	.word	0x080091b1
 80090d8:	0800919d 	.word	0x0800919d
 80090dc:	0800919d 	.word	0x0800919d
 80090e0:	0800919d 	.word	0x0800919d
 80090e4:	0800919d 	.word	0x0800919d
 80090e8:	0800919d 	.word	0x0800919d
 80090ec:	0800919d 	.word	0x0800919d
 80090f0:	0800919d 	.word	0x0800919d
 80090f4:	08009179 	.word	0x08009179
 80090f8:	0800919d 	.word	0x0800919d
 80090fc:	0800919d 	.word	0x0800919d
 8009100:	0800919d 	.word	0x0800919d
 8009104:	0800919d 	.word	0x0800919d
 8009108:	0800919d 	.word	0x0800919d
 800910c:	0800919d 	.word	0x0800919d
 8009110:	0800919d 	.word	0x0800919d
 8009114:	0800918b 	.word	0x0800918b
 8009118:	0800919d 	.word	0x0800919d
 800911c:	0800919d 	.word	0x0800919d
 8009120:	0800919d 	.word	0x0800919d
 8009124:	0800919d 	.word	0x0800919d
 8009128:	0800919d 	.word	0x0800919d
 800912c:	0800919d 	.word	0x0800919d
 8009130:	0800919d 	.word	0x0800919d
 8009134:	080091b1 	.word	0x080091b1
 8009138:	0800919d 	.word	0x0800919d
 800913c:	0800919d 	.word	0x0800919d
 8009140:	0800919d 	.word	0x0800919d
 8009144:	0800919d 	.word	0x0800919d
 8009148:	0800919d 	.word	0x0800919d
 800914c:	0800919d 	.word	0x0800919d
 8009150:	0800919d 	.word	0x0800919d
 8009154:	080091b1 	.word	0x080091b1
 8009158:	0800919d 	.word	0x0800919d
 800915c:	0800919d 	.word	0x0800919d
 8009160:	0800919d 	.word	0x0800919d
 8009164:	0800919d 	.word	0x0800919d
 8009168:	0800919d 	.word	0x0800919d
 800916c:	0800919d 	.word	0x0800919d
 8009170:	0800919d 	.word	0x0800919d
 8009174:	080091b1 	.word	0x080091b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	2101      	movs	r1, #1
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fdfa 	bl	8009d78 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009188:	e013      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3324      	adds	r3, #36	; 0x24
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fea3 	bl	8009edc <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800919a:	e00a      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
      break;
 80091a0:	e007      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	58024800 	.word	0x58024800
 80091ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80091b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d109      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091b8:	4b96      	ldr	r3, [pc, #600]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091c4:	4993      	ldr	r1, [pc, #588]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	654b      	str	r3, [r1, #84]	; 0x54
 80091ca:	e001      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d038      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e0:	2b05      	cmp	r3, #5
 80091e2:	d821      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80091e4:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	0800922f 	.word	0x0800922f
 80091f0:	08009205 	.word	0x08009205
 80091f4:	08009217 	.word	0x08009217
 80091f8:	0800922f 	.word	0x0800922f
 80091fc:	0800922f 	.word	0x0800922f
 8009200:	0800922f 	.word	0x0800922f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fdb4 	bl	8009d78 <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009214:	e00c      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2101      	movs	r1, #1
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fe5d 	bl	8009edc <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009226:	e003      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e000      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800922e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009236:	4b77      	ldr	r3, [pc, #476]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	f023 0207 	bic.w	r2, r3, #7
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009242:	4974      	ldr	r1, [pc, #464]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009244:	4313      	orrs	r3, r2
 8009246:	654b      	str	r3, [r1, #84]	; 0x54
 8009248:	e001      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d03a      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	2b05      	cmp	r3, #5
 8009262:	d821      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009264:	a201      	add	r2, pc, #4	; (adr r2, 800926c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	080092af 	.word	0x080092af
 8009270:	08009285 	.word	0x08009285
 8009274:	08009297 	.word	0x08009297
 8009278:	080092af 	.word	0x080092af
 800927c:	080092af 	.word	0x080092af
 8009280:	080092af 	.word	0x080092af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3304      	adds	r3, #4
 8009288:	2101      	movs	r1, #1
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fd74 	bl	8009d78 <RCCEx_PLL2_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009294:	e00c      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3324      	adds	r3, #36	; 0x24
 800929a:	2101      	movs	r1, #1
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fe1d 	bl	8009edc <RCCEx_PLL3_Config>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80092a6:	e003      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
      break;
 80092ac:	e000      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80092ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092b6:	4b57      	ldr	r3, [pc, #348]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	f023 0207 	bic.w	r2, r3, #7
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c4:	4953      	ldr	r1, [pc, #332]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	658b      	str	r3, [r1, #88]	; 0x58
 80092ca:	e001      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d04b      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e6:	d02e      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80092e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ec:	d828      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f2:	d02a      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80092f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f8:	d822      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092fe:	d026      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009304:	d81c      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930a:	d010      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800930c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009310:	d816      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01d      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931a:	d111      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fd28 	bl	8009d78 <RCCEx_PLL2_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800932c:	e012      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3324      	adds	r3, #36	; 0x24
 8009332:	2102      	movs	r1, #2
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fdd1 	bl	8009edc <RCCEx_PLL3_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800933e:	e009      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]
      break;
 8009344:	e006      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009346:	bf00      	nop
 8009348:	e004      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800934a:	bf00      	nop
 800934c:	e002      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800935a:	4b2e      	ldr	r3, [pc, #184]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800935c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009368:	492a      	ldr	r1, [pc, #168]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	654b      	str	r3, [r1, #84]	; 0x54
 800936e:	e001      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d04d      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009386:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800938a:	d02e      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800938c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009390:	d828      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009396:	d02a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939c:	d822      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800939e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093a2:	d026      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80093a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093a8:	d81c      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ae:	d010      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80093b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093b4:	d816      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d01d      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80093ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093be:	d111      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3304      	adds	r3, #4
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fcd6 	bl	8009d78 <RCCEx_PLL2_Config>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093d0:	e012      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3324      	adds	r3, #36	; 0x24
 80093d6:	2102      	movs	r1, #2
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fd7f 	bl	8009edc <RCCEx_PLL3_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093e2:	e009      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
      break;
 80093e8:	e006      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093ea:	bf00      	nop
 80093ec:	e004      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10c      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009402:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800940c:	4901      	ldr	r1, [pc, #4]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800940e:	4313      	orrs	r3, r2
 8009410:	658b      	str	r3, [r1, #88]	; 0x58
 8009412:	e003      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009424:	2b00      	cmp	r3, #0
 8009426:	d04b      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800942e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009432:	d02e      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009434:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009438:	d828      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943e:	d02a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009444:	d822      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009446:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800944a:	d026      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800944c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009450:	d81c      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009456:	d010      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800945c:	d816      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01d      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009466:	d111      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3304      	adds	r3, #4
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fc82 	bl	8009d78 <RCCEx_PLL2_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009478:	e012      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3324      	adds	r3, #36	; 0x24
 800947e:	2102      	movs	r1, #2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fd2b 	bl	8009edc <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800948a:	e009      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	e006      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009492:	bf00      	nop
 8009494:	e004      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009496:	bf00      	nop
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094a6:	4b9d      	ldr	r3, [pc, #628]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094b4:	4999      	ldr	r1, [pc, #612]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	658b      	str	r3, [r1, #88]	; 0x58
 80094ba:	e001      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01a      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d6:	d10a      	bne.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3324      	adds	r3, #36	; 0x24
 80094dc:	2102      	movs	r1, #2
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fcfc 	bl	8009edc <RCCEx_PLL3_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094ee:	4b8b      	ldr	r3, [pc, #556]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094fc:	4987      	ldr	r1, [pc, #540]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0310 	and.w	r3, r3, #16
 800950a:	2b00      	cmp	r3, #0
 800950c:	d01a      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009518:	d10a      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2102      	movs	r1, #2
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fcdb 	bl	8009edc <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009530:	4b7a      	ldr	r3, [pc, #488]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800953e:	4977      	ldr	r1, [pc, #476]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009540:	4313      	orrs	r3, r2
 8009542:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d034      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800955a:	d01d      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800955c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009560:	d817      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956a:	d009      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800956c:	e011      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3304      	adds	r3, #4
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fbff 	bl	8009d78 <RCCEx_PLL2_Config>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800957e:	e00c      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3324      	adds	r3, #36	; 0x24
 8009584:	2102      	movs	r1, #2
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fca8 	bl	8009edc <RCCEx_PLL3_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009590:	e003      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
      break;
 8009596:	e000      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095a0:	4b5e      	ldr	r3, [pc, #376]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095ae:	495b      	ldr	r1, [pc, #364]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	658b      	str	r3, [r1, #88]	; 0x58
 80095b4:	e001      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d033      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d0:	d01c      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80095d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d6:	d816      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80095d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095dc:	d003      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80095de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095e2:	d007      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80095e4:	e00f      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e6:	4b4d      	ldr	r3, [pc, #308]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	4a4c      	ldr	r2, [pc, #304]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80095f2:	e00c      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	2101      	movs	r1, #1
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fc6e 	bl	8009edc <RCCEx_PLL3_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009604:	e003      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
      break;
 800960a:	e000      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800960c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009614:	4b41      	ldr	r3, [pc, #260]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009622:	493e      	ldr	r1, [pc, #248]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009624:	4313      	orrs	r3, r2
 8009626:	654b      	str	r3, [r1, #84]	; 0x54
 8009628:	e001      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d029      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009646:	d007      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009648:	e00f      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800964a:	4b34      	ldr	r3, [pc, #208]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	4a33      	ldr	r2, [pc, #204]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009656:	e00b      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3304      	adds	r3, #4
 800965c:	2102      	movs	r1, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fb8a 	bl	8009d78 <RCCEx_PLL2_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009668:	e002      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	75fb      	strb	r3, [r7, #23]
      break;
 800966e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d109      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009676:	4b29      	ldr	r3, [pc, #164]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009682:	4926      	ldr	r1, [pc, #152]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009684:	4313      	orrs	r3, r2
 8009686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009688:	e001      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3324      	adds	r3, #36	; 0x24
 800969e:	2102      	movs	r1, #2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fc1b 	bl	8009edc <RCCEx_PLL3_Config>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d033      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c4:	d017      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ca:	d811      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d0:	d013      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80096d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d6:	d80b      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80096dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e0:	d106      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e2:	4b0e      	ldr	r3, [pc, #56]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	4a0d      	ldr	r2, [pc, #52]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80096ee:	e007      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
      break;
 80096f4:	e004      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096f6:	bf00      	nop
 80096f8:	e002      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80096fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10c      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009712:	4902      	ldr	r1, [pc, #8]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009714:	4313      	orrs	r3, r2
 8009716:	654b      	str	r3, [r1, #84]	; 0x54
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009730:	4b31      	ldr	r3, [pc, #196]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	492e      	ldr	r1, [pc, #184]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800973e:	4313      	orrs	r3, r2
 8009740:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800975c:	4926      	ldr	r1, [pc, #152]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800975e:	4313      	orrs	r3, r2
 8009760:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800976e:	4b22      	ldr	r3, [pc, #136]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800977a:	491f      	ldr	r1, [pc, #124]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800977c:	4313      	orrs	r3, r2
 800977e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00d      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800978c:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4a19      	ldr	r2, [pc, #100]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009792:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009796:	6113      	str	r3, [r2, #16]
 8009798:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800979a:	691a      	ldr	r2, [r3, #16]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80097a2:	4915      	ldr	r1, [pc, #84]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da08      	bge.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80097b0:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097bc:	490e      	ldr	r1, [pc, #56]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d009      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097ce:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097dc:	4906      	ldr	r1, [pc, #24]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80097e2:	7dbb      	ldrb	r3, [r7, #22]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e000      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	58024400 	.word	0x58024400

080097fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009800:	f7ff f85a 	bl	80088b8 <HAL_RCC_GetHCLKFreq>
 8009804:	4602      	mov	r2, r0
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	091b      	lsrs	r3, r3, #4
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009812:	5ccb      	ldrb	r3, [r1, r3]
 8009814:	f003 031f 	and.w	r3, r3, #31
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800981c:	4618      	mov	r0, r3
 800981e:	bd80      	pop	{r7, pc}
 8009820:	58024400 	.word	0x58024400
 8009824:	0800fdc4 	.word	0x0800fdc4

08009828 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009828:	b480      	push	{r7}
 800982a:	b089      	sub	sp, #36	; 0x24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009830:	4ba1      	ldr	r3, [pc, #644]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800983a:	4b9f      	ldr	r3, [pc, #636]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	0b1b      	lsrs	r3, r3, #12
 8009840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009844:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009846:	4b9c      	ldr	r3, [pc, #624]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	091b      	lsrs	r3, r3, #4
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009852:	4b99      	ldr	r3, [pc, #612]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009856:	08db      	lsrs	r3, r3, #3
 8009858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 8111 	beq.w	8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b02      	cmp	r3, #2
 800987a:	f000 8083 	beq.w	8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b02      	cmp	r3, #2
 8009882:	f200 80a1 	bhi.w	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d056      	beq.n	8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009892:	e099      	b.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009894:	4b88      	ldr	r3, [pc, #544]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0320 	and.w	r3, r3, #32
 800989c:	2b00      	cmp	r3, #0
 800989e:	d02d      	beq.n	80098fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098a0:	4b85      	ldr	r3, [pc, #532]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	08db      	lsrs	r3, r3, #3
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	4a84      	ldr	r2, [pc, #528]	; (8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
 80098b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	ee07 3a90 	vmov	s15, r3
 80098b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a03 	vldr	s12, [r7, #12]
 80098de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098fa:	e087      	b.n	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b6a      	ldr	r3, [pc, #424]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009922:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800993e:	e065      	b.n	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b59      	ldr	r3, [pc, #356]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009982:	e043      	b.n	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009996:	4b48      	ldr	r3, [pc, #288]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c6:	e021      	b.n	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	4b37      	ldr	r3, [pc, #220]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	0a5b      	lsrs	r3, r3, #9
 8009a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a32:	ee17 2a90 	vmov	r2, s15
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	0c1b      	lsrs	r3, r3, #16
 8009a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a60:	ee17 2a90 	vmov	r2, s15
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a68:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	0e1b      	lsrs	r3, r3, #24
 8009a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a8e:	ee17 2a90 	vmov	r2, s15
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a96:	e008      	b.n	8009aaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	609a      	str	r2, [r3, #8]
}
 8009aaa:	bf00      	nop
 8009aac:	3724      	adds	r7, #36	; 0x24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	03d09000 	.word	0x03d09000
 8009ac0:	46000000 	.word	0x46000000
 8009ac4:	4c742400 	.word	0x4c742400
 8009ac8:	4a742400 	.word	0x4a742400
 8009acc:	4bbebc20 	.word	0x4bbebc20

08009ad0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b089      	sub	sp, #36	; 0x24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ad8:	4ba1      	ldr	r3, [pc, #644]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ae2:	4b9f      	ldr	r3, [pc, #636]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	0d1b      	lsrs	r3, r3, #20
 8009ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aee:	4b9c      	ldr	r3, [pc, #624]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	0a1b      	lsrs	r3, r3, #8
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009afa:	4b99      	ldr	r3, [pc, #612]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afe:	08db      	lsrs	r3, r3, #3
 8009b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 8111 	beq.w	8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	f000 8083 	beq.w	8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	f200 80a1 	bhi.w	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d056      	beq.n	8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b3a:	e099      	b.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b3c:	4b88      	ldr	r3, [pc, #544]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d02d      	beq.n	8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b48:	4b85      	ldr	r3, [pc, #532]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	08db      	lsrs	r3, r3, #3
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	4a84      	ldr	r2, [pc, #528]	; (8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b54:	fa22 f303 	lsr.w	r3, r2, r3
 8009b58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	ee07 3a90 	vmov	s15, r3
 8009b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ba2:	e087      	b.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb6:	4b6a      	ldr	r3, [pc, #424]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be6:	e065      	b.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfa:	4b59      	ldr	r3, [pc, #356]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c2a:	e043      	b.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3e:	4b48      	ldr	r3, [pc, #288]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6e:	e021      	b.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c82:	4b37      	ldr	r3, [pc, #220]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009cb4:	4b2a      	ldr	r3, [pc, #168]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	0a5b      	lsrs	r3, r3, #9
 8009cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cda:	ee17 2a90 	vmov	r2, s15
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ce2:	4b1f      	ldr	r3, [pc, #124]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	0c1b      	lsrs	r3, r3, #16
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d08:	ee17 2a90 	vmov	r2, s15
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	0e1b      	lsrs	r3, r3, #24
 8009d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d36:	ee17 2a90 	vmov	r2, s15
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d3e:	e008      	b.n	8009d52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	609a      	str	r2, [r3, #8]
}
 8009d52:	bf00      	nop
 8009d54:	3724      	adds	r7, #36	; 0x24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	58024400 	.word	0x58024400
 8009d64:	03d09000 	.word	0x03d09000
 8009d68:	46000000 	.word	0x46000000
 8009d6c:	4c742400 	.word	0x4c742400
 8009d70:	4a742400 	.word	0x4a742400
 8009d74:	4bbebc20 	.word	0x4bbebc20

08009d78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d86:	4b53      	ldr	r3, [pc, #332]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d101      	bne.n	8009d96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e099      	b.n	8009eca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d96:	4b4f      	ldr	r3, [pc, #316]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a4e      	ldr	r2, [pc, #312]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009d9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009da2:	f7fc fce7 	bl	8006774 <HAL_GetTick>
 8009da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009da8:	e008      	b.n	8009dbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009daa:	f7fc fce3 	bl	8006774 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d901      	bls.n	8009dbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e086      	b.n	8009eca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dbc:	4b45      	ldr	r3, [pc, #276]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1f0      	bne.n	8009daa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009dc8:	4b42      	ldr	r3, [pc, #264]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	031b      	lsls	r3, r3, #12
 8009dd6:	493f      	ldr	r1, [pc, #252]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	628b      	str	r3, [r1, #40]	; 0x28
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	025b      	lsls	r3, r3, #9
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	431a      	orrs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	061b      	lsls	r3, r3, #24
 8009e08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e0c:	4931      	ldr	r1, [pc, #196]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e12:	4b30      	ldr	r3, [pc, #192]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	492d      	ldr	r1, [pc, #180]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e24:	4b2b      	ldr	r3, [pc, #172]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e28:	f023 0220 	bic.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	4928      	ldr	r1, [pc, #160]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e36:	4b27      	ldr	r3, [pc, #156]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4a26      	ldr	r2, [pc, #152]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	f023 0310 	bic.w	r3, r3, #16
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e42:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e46:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <RCCEx_PLL2_Config+0x160>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	69d2      	ldr	r2, [r2, #28]
 8009e4e:	00d2      	lsls	r2, r2, #3
 8009e50:	4920      	ldr	r1, [pc, #128]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e56:	4b1f      	ldr	r3, [pc, #124]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e5c:	f043 0310 	orr.w	r3, r3, #16
 8009e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e68:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	4a19      	ldr	r2, [pc, #100]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e74:	e00f      	b.n	8009e96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d106      	bne.n	8009e8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e7c:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e88:	e005      	b.n	8009e96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e96:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a0e      	ldr	r2, [pc, #56]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ea2:	f7fc fc67 	bl	8006774 <HAL_GetTick>
 8009ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ea8:	e008      	b.n	8009ebc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009eaa:	f7fc fc63 	bl	8006774 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d901      	bls.n	8009ebc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e006      	b.n	8009eca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <RCCEx_PLL2_Config+0x15c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0f0      	beq.n	8009eaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	ffff0007 	.word	0xffff0007

08009edc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eea:	4b53      	ldr	r3, [pc, #332]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d101      	bne.n	8009efa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e099      	b.n	800a02e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009efa:	4b4f      	ldr	r3, [pc, #316]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a4e      	ldr	r2, [pc, #312]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f06:	f7fc fc35 	bl	8006774 <HAL_GetTick>
 8009f0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f0c:	e008      	b.n	8009f20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f0e:	f7fc fc31 	bl	8006774 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e086      	b.n	800a02e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f20:	4b45      	ldr	r3, [pc, #276]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f0      	bne.n	8009f0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f2c:	4b42      	ldr	r3, [pc, #264]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	051b      	lsls	r3, r3, #20
 8009f3a:	493f      	ldr	r1, [pc, #252]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	628b      	str	r3, [r1, #40]	; 0x28
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	025b      	lsls	r3, r3, #9
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	061b      	lsls	r3, r3, #24
 8009f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f70:	4931      	ldr	r1, [pc, #196]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f76:	4b30      	ldr	r3, [pc, #192]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	492d      	ldr	r1, [pc, #180]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f88:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	4928      	ldr	r1, [pc, #160]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	4a26      	ldr	r2, [pc, #152]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fa6:	4b24      	ldr	r3, [pc, #144]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009faa:	4b24      	ldr	r3, [pc, #144]	; (800a03c <RCCEx_PLL3_Config+0x160>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	69d2      	ldr	r2, [r2, #28]
 8009fb2:	00d2      	lsls	r2, r2, #3
 8009fb4:	4920      	ldr	r1, [pc, #128]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fba:	4b1f      	ldr	r3, [pc, #124]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d106      	bne.n	8009fda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fcc:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	4a19      	ldr	r2, [pc, #100]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fd8:	e00f      	b.n	8009ffa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d106      	bne.n	8009fee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fe0:	4b15      	ldr	r3, [pc, #84]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	4a14      	ldr	r2, [pc, #80]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fec:	e005      	b.n	8009ffa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	4a11      	ldr	r2, [pc, #68]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ffa:	4b0f      	ldr	r3, [pc, #60]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a0e      	ldr	r2, [pc, #56]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 800a000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a006:	f7fc fbb5 	bl	8006774 <HAL_GetTick>
 800a00a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a00c:	e008      	b.n	800a020 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a00e:	f7fc fbb1 	bl	8006774 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e006      	b.n	800a02e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a020:	4b05      	ldr	r3, [pc, #20]	; (800a038 <RCCEx_PLL3_Config+0x15c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0f0      	beq.n	800a00e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	58024400 	.word	0x58024400
 800a03c:	ffff0007 	.word	0xffff0007

0800a040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e042      	b.n	800a0d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d106      	bne.n	800a06a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7fc fa6f 	bl	8006548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2224      	movs	r2, #36	; 0x24
 800a06e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0201 	bic.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f8c2 	bl	800a20c <UART_SetConfig>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e022      	b.n	800a0d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fe1e 	bl	800acdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0201 	orr.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fea5 	bl	800ae20 <UART_CheckIdleState>
 800a0d6:	4603      	mov	r3, r0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08a      	sub	sp, #40	; 0x28
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	f040 8083 	bne.w	800a202 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <HAL_UART_Transmit+0x28>
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e07b      	b.n	800a204 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a112:	2b01      	cmp	r3, #1
 800a114:	d101      	bne.n	800a11a <HAL_UART_Transmit+0x3a>
 800a116:	2302      	movs	r3, #2
 800a118:	e074      	b.n	800a204 <HAL_UART_Transmit+0x124>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2221      	movs	r2, #33	; 0x21
 800a12e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a132:	f7fc fb1f 	bl	8006774 <HAL_GetTick>
 800a136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	88fa      	ldrh	r2, [r7, #6]
 800a144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a150:	d108      	bne.n	800a164 <HAL_UART_Transmit+0x84>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e003      	b.n	800a16c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a174:	e02c      	b.n	800a1d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2180      	movs	r1, #128	; 0x80
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 fe98 	bl	800aeb6 <UART_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e039      	b.n	800a204 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10b      	bne.n	800a1ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	61bb      	str	r3, [r7, #24]
 800a1ac:	e007      	b.n	800a1be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	781a      	ldrb	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1cc      	bne.n	800a176 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2140      	movs	r1, #64	; 0x40
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fe65 	bl	800aeb6 <UART_WaitOnFlagUntilTimeout>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e006      	b.n	800a204 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e000      	b.n	800a204 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a202:	2302      	movs	r3, #2
  }
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a20c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a210:	b092      	sub	sp, #72	; 0x48
 800a212:	af00      	add	r7, sp, #0
 800a214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	431a      	orrs	r2, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	4313      	orrs	r3, r2
 800a232:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4bbe      	ldr	r3, [pc, #760]	; (800a534 <UART_SetConfig+0x328>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a244:	430b      	orrs	r3, r1
 800a246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4ab3      	ldr	r2, [pc, #716]	; (800a538 <UART_SetConfig+0x32c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a274:	4313      	orrs	r3, r2
 800a276:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689a      	ldr	r2, [r3, #8]
 800a27e:	4baf      	ldr	r3, [pc, #700]	; (800a53c <UART_SetConfig+0x330>)
 800a280:	4013      	ands	r3, r2
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	6812      	ldr	r2, [r2, #0]
 800a286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a288:	430b      	orrs	r3, r1
 800a28a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	f023 010f 	bic.w	r1, r3, #15
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4aa6      	ldr	r2, [pc, #664]	; (800a540 <UART_SetConfig+0x334>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d177      	bne.n	800a39c <UART_SetConfig+0x190>
 800a2ac:	4ba5      	ldr	r3, [pc, #660]	; (800a544 <UART_SetConfig+0x338>)
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2b4:	2b28      	cmp	r3, #40	; 0x28
 800a2b6:	d86d      	bhi.n	800a394 <UART_SetConfig+0x188>
 800a2b8:	a201      	add	r2, pc, #4	; (adr r2, 800a2c0 <UART_SetConfig+0xb4>)
 800a2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2be:	bf00      	nop
 800a2c0:	0800a365 	.word	0x0800a365
 800a2c4:	0800a395 	.word	0x0800a395
 800a2c8:	0800a395 	.word	0x0800a395
 800a2cc:	0800a395 	.word	0x0800a395
 800a2d0:	0800a395 	.word	0x0800a395
 800a2d4:	0800a395 	.word	0x0800a395
 800a2d8:	0800a395 	.word	0x0800a395
 800a2dc:	0800a395 	.word	0x0800a395
 800a2e0:	0800a36d 	.word	0x0800a36d
 800a2e4:	0800a395 	.word	0x0800a395
 800a2e8:	0800a395 	.word	0x0800a395
 800a2ec:	0800a395 	.word	0x0800a395
 800a2f0:	0800a395 	.word	0x0800a395
 800a2f4:	0800a395 	.word	0x0800a395
 800a2f8:	0800a395 	.word	0x0800a395
 800a2fc:	0800a395 	.word	0x0800a395
 800a300:	0800a375 	.word	0x0800a375
 800a304:	0800a395 	.word	0x0800a395
 800a308:	0800a395 	.word	0x0800a395
 800a30c:	0800a395 	.word	0x0800a395
 800a310:	0800a395 	.word	0x0800a395
 800a314:	0800a395 	.word	0x0800a395
 800a318:	0800a395 	.word	0x0800a395
 800a31c:	0800a395 	.word	0x0800a395
 800a320:	0800a37d 	.word	0x0800a37d
 800a324:	0800a395 	.word	0x0800a395
 800a328:	0800a395 	.word	0x0800a395
 800a32c:	0800a395 	.word	0x0800a395
 800a330:	0800a395 	.word	0x0800a395
 800a334:	0800a395 	.word	0x0800a395
 800a338:	0800a395 	.word	0x0800a395
 800a33c:	0800a395 	.word	0x0800a395
 800a340:	0800a385 	.word	0x0800a385
 800a344:	0800a395 	.word	0x0800a395
 800a348:	0800a395 	.word	0x0800a395
 800a34c:	0800a395 	.word	0x0800a395
 800a350:	0800a395 	.word	0x0800a395
 800a354:	0800a395 	.word	0x0800a395
 800a358:	0800a395 	.word	0x0800a395
 800a35c:	0800a395 	.word	0x0800a395
 800a360:	0800a38d 	.word	0x0800a38d
 800a364:	2301      	movs	r3, #1
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e222      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a36c:	2304      	movs	r3, #4
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e21e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a374:	2308      	movs	r3, #8
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e21a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a37c:	2310      	movs	r3, #16
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e216      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a384:	2320      	movs	r3, #32
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e212      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a38c:	2340      	movs	r3, #64	; 0x40
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e20e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39a:	e20a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a69      	ldr	r2, [pc, #420]	; (800a548 <UART_SetConfig+0x33c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d130      	bne.n	800a408 <UART_SetConfig+0x1fc>
 800a3a6:	4b67      	ldr	r3, [pc, #412]	; (800a544 <UART_SetConfig+0x338>)
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	2b05      	cmp	r3, #5
 800a3b0:	d826      	bhi.n	800a400 <UART_SetConfig+0x1f4>
 800a3b2:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <UART_SetConfig+0x1ac>)
 800a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b8:	0800a3d1 	.word	0x0800a3d1
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	0800a3e1 	.word	0x0800a3e1
 800a3c4:	0800a3e9 	.word	0x0800a3e9
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f9 	.word	0x0800a3f9
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e1ec      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e1e8      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e1e4      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e1e0      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a3f0:	2320      	movs	r3, #32
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e1dc      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a3f8:	2340      	movs	r3, #64	; 0x40
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e1d8      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e1d4      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a4f      	ldr	r2, [pc, #316]	; (800a54c <UART_SetConfig+0x340>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d130      	bne.n	800a474 <UART_SetConfig+0x268>
 800a412:	4b4c      	ldr	r3, [pc, #304]	; (800a544 <UART_SetConfig+0x338>)
 800a414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d826      	bhi.n	800a46c <UART_SetConfig+0x260>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x218>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a43d 	.word	0x0800a43d
 800a428:	0800a445 	.word	0x0800a445
 800a42c:	0800a44d 	.word	0x0800a44d
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a45d 	.word	0x0800a45d
 800a438:	0800a465 	.word	0x0800a465
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e1b6      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a444:	2304      	movs	r3, #4
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e1b2      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e1ae      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a454:	2310      	movs	r3, #16
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e1aa      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a45c:	2320      	movs	r3, #32
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e1a6      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a464:	2340      	movs	r3, #64	; 0x40
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e1a2      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e19e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a35      	ldr	r2, [pc, #212]	; (800a550 <UART_SetConfig+0x344>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d130      	bne.n	800a4e0 <UART_SetConfig+0x2d4>
 800a47e:	4b31      	ldr	r3, [pc, #196]	; (800a544 <UART_SetConfig+0x338>)
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b05      	cmp	r3, #5
 800a488:	d826      	bhi.n	800a4d8 <UART_SetConfig+0x2cc>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x284>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a9 	.word	0x0800a4a9
 800a494:	0800a4b1 	.word	0x0800a4b1
 800a498:	0800a4b9 	.word	0x0800a4b9
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ae:	e180      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e17c      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4b8:	2308      	movs	r3, #8
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4be:	e178      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e174      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e170      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4d0:	2340      	movs	r3, #64	; 0x40
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e16c      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e168      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a1b      	ldr	r2, [pc, #108]	; (800a554 <UART_SetConfig+0x348>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d142      	bne.n	800a570 <UART_SetConfig+0x364>
 800a4ea:	4b16      	ldr	r3, [pc, #88]	; (800a544 <UART_SetConfig+0x338>)
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d838      	bhi.n	800a568 <UART_SetConfig+0x35c>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <UART_SetConfig+0x2f0>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a51d 	.word	0x0800a51d
 800a504:	0800a525 	.word	0x0800a525
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a559 	.word	0x0800a559
 800a510:	0800a561 	.word	0x0800a561
 800a514:	2300      	movs	r3, #0
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e14a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a51c:	2304      	movs	r3, #4
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a522:	e146      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a524:	2308      	movs	r3, #8
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52a:	e142      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a52c:	2310      	movs	r3, #16
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	e13e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a534:	cfff69f3 	.word	0xcfff69f3
 800a538:	58000c00 	.word	0x58000c00
 800a53c:	11fff4ff 	.word	0x11fff4ff
 800a540:	40011000 	.word	0x40011000
 800a544:	58024400 	.word	0x58024400
 800a548:	40004400 	.word	0x40004400
 800a54c:	40004800 	.word	0x40004800
 800a550:	40004c00 	.word	0x40004c00
 800a554:	40005000 	.word	0x40005000
 800a558:	2320      	movs	r3, #32
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e128      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a560:	2340      	movs	r3, #64	; 0x40
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e124      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a568:	2380      	movs	r3, #128	; 0x80
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e120      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4acb      	ldr	r2, [pc, #812]	; (800a8a4 <UART_SetConfig+0x698>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d176      	bne.n	800a668 <UART_SetConfig+0x45c>
 800a57a:	4bcb      	ldr	r3, [pc, #812]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a582:	2b28      	cmp	r3, #40	; 0x28
 800a584:	d86c      	bhi.n	800a660 <UART_SetConfig+0x454>
 800a586:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <UART_SetConfig+0x380>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a631 	.word	0x0800a631
 800a590:	0800a661 	.word	0x0800a661
 800a594:	0800a661 	.word	0x0800a661
 800a598:	0800a661 	.word	0x0800a661
 800a59c:	0800a661 	.word	0x0800a661
 800a5a0:	0800a661 	.word	0x0800a661
 800a5a4:	0800a661 	.word	0x0800a661
 800a5a8:	0800a661 	.word	0x0800a661
 800a5ac:	0800a639 	.word	0x0800a639
 800a5b0:	0800a661 	.word	0x0800a661
 800a5b4:	0800a661 	.word	0x0800a661
 800a5b8:	0800a661 	.word	0x0800a661
 800a5bc:	0800a661 	.word	0x0800a661
 800a5c0:	0800a661 	.word	0x0800a661
 800a5c4:	0800a661 	.word	0x0800a661
 800a5c8:	0800a661 	.word	0x0800a661
 800a5cc:	0800a641 	.word	0x0800a641
 800a5d0:	0800a661 	.word	0x0800a661
 800a5d4:	0800a661 	.word	0x0800a661
 800a5d8:	0800a661 	.word	0x0800a661
 800a5dc:	0800a661 	.word	0x0800a661
 800a5e0:	0800a661 	.word	0x0800a661
 800a5e4:	0800a661 	.word	0x0800a661
 800a5e8:	0800a661 	.word	0x0800a661
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a661 	.word	0x0800a661
 800a5f4:	0800a661 	.word	0x0800a661
 800a5f8:	0800a661 	.word	0x0800a661
 800a5fc:	0800a661 	.word	0x0800a661
 800a600:	0800a661 	.word	0x0800a661
 800a604:	0800a661 	.word	0x0800a661
 800a608:	0800a661 	.word	0x0800a661
 800a60c:	0800a651 	.word	0x0800a651
 800a610:	0800a661 	.word	0x0800a661
 800a614:	0800a661 	.word	0x0800a661
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a661 	.word	0x0800a661
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a661 	.word	0x0800a661
 800a628:	0800a661 	.word	0x0800a661
 800a62c:	0800a659 	.word	0x0800a659
 800a630:	2301      	movs	r3, #1
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e0bc      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a638:	2304      	movs	r3, #4
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e0b8      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a640:	2308      	movs	r3, #8
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e0b4      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a648:	2310      	movs	r3, #16
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e0b0      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a650:	2320      	movs	r3, #32
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e0ac      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e0a8      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a666:	e0a4      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a8f      	ldr	r2, [pc, #572]	; (800a8ac <UART_SetConfig+0x6a0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d130      	bne.n	800a6d4 <UART_SetConfig+0x4c8>
 800a672:	4b8d      	ldr	r3, [pc, #564]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b05      	cmp	r3, #5
 800a67c:	d826      	bhi.n	800a6cc <UART_SetConfig+0x4c0>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0x478>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a69d 	.word	0x0800a69d
 800a688:	0800a6a5 	.word	0x0800a6a5
 800a68c:	0800a6ad 	.word	0x0800a6ad
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6bd 	.word	0x0800a6bd
 800a698:	0800a6c5 	.word	0x0800a6c5
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e086      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e082      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b2:	e07e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6b4:	2310      	movs	r3, #16
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ba:	e07a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6bc:	2320      	movs	r3, #32
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e076      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6c4:	2340      	movs	r3, #64	; 0x40
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e072      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e06e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a75      	ldr	r2, [pc, #468]	; (800a8b0 <UART_SetConfig+0x6a4>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d130      	bne.n	800a740 <UART_SetConfig+0x534>
 800a6de:	4b72      	ldr	r3, [pc, #456]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e2:	f003 0307 	and.w	r3, r3, #7
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d826      	bhi.n	800a738 <UART_SetConfig+0x52c>
 800a6ea:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <UART_SetConfig+0x4e4>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a709 	.word	0x0800a709
 800a6f4:	0800a711 	.word	0x0800a711
 800a6f8:	0800a719 	.word	0x0800a719
 800a6fc:	0800a721 	.word	0x0800a721
 800a700:	0800a729 	.word	0x0800a729
 800a704:	0800a731 	.word	0x0800a731
 800a708:	2300      	movs	r3, #0
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70e:	e050      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a710:	2304      	movs	r3, #4
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a716:	e04c      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e048      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a720:	2310      	movs	r3, #16
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e044      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a728:	2320      	movs	r3, #32
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e040      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a730:	2340      	movs	r3, #64	; 0x40
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a736:	e03c      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a738:	2380      	movs	r3, #128	; 0x80
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73e:	e038      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a5b      	ldr	r2, [pc, #364]	; (800a8b4 <UART_SetConfig+0x6a8>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d130      	bne.n	800a7ac <UART_SetConfig+0x5a0>
 800a74a:	4b57      	ldr	r3, [pc, #348]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b05      	cmp	r3, #5
 800a754:	d826      	bhi.n	800a7a4 <UART_SetConfig+0x598>
 800a756:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <UART_SetConfig+0x550>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a775 	.word	0x0800a775
 800a760:	0800a77d 	.word	0x0800a77d
 800a764:	0800a785 	.word	0x0800a785
 800a768:	0800a78d 	.word	0x0800a78d
 800a76c:	0800a795 	.word	0x0800a795
 800a770:	0800a79d 	.word	0x0800a79d
 800a774:	2302      	movs	r3, #2
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77a:	e01a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a77c:	2304      	movs	r3, #4
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a782:	e016      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a784:	2308      	movs	r3, #8
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78a:	e012      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a78c:	2310      	movs	r3, #16
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a792:	e00e      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a794:	2320      	movs	r3, #32
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79a:	e00a      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a79c:	2340      	movs	r3, #64	; 0x40
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a2:	e006      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7aa:	e002      	b.n	800a7b2 <UART_SetConfig+0x5a6>
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a3f      	ldr	r2, [pc, #252]	; (800a8b4 <UART_SetConfig+0x6a8>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	f040 80f8 	bne.w	800a9ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	dc46      	bgt.n	800a854 <UART_SetConfig+0x648>
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	f2c0 8082 	blt.w	800a8d0 <UART_SetConfig+0x6c4>
 800a7cc:	3b02      	subs	r3, #2
 800a7ce:	2b1e      	cmp	r3, #30
 800a7d0:	d87e      	bhi.n	800a8d0 <UART_SetConfig+0x6c4>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <UART_SetConfig+0x5cc>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a85b 	.word	0x0800a85b
 800a7dc:	0800a8d1 	.word	0x0800a8d1
 800a7e0:	0800a863 	.word	0x0800a863
 800a7e4:	0800a8d1 	.word	0x0800a8d1
 800a7e8:	0800a8d1 	.word	0x0800a8d1
 800a7ec:	0800a8d1 	.word	0x0800a8d1
 800a7f0:	0800a873 	.word	0x0800a873
 800a7f4:	0800a8d1 	.word	0x0800a8d1
 800a7f8:	0800a8d1 	.word	0x0800a8d1
 800a7fc:	0800a8d1 	.word	0x0800a8d1
 800a800:	0800a8d1 	.word	0x0800a8d1
 800a804:	0800a8d1 	.word	0x0800a8d1
 800a808:	0800a8d1 	.word	0x0800a8d1
 800a80c:	0800a8d1 	.word	0x0800a8d1
 800a810:	0800a883 	.word	0x0800a883
 800a814:	0800a8d1 	.word	0x0800a8d1
 800a818:	0800a8d1 	.word	0x0800a8d1
 800a81c:	0800a8d1 	.word	0x0800a8d1
 800a820:	0800a8d1 	.word	0x0800a8d1
 800a824:	0800a8d1 	.word	0x0800a8d1
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a8d1 	.word	0x0800a8d1
 800a830:	0800a8d1 	.word	0x0800a8d1
 800a834:	0800a8d1 	.word	0x0800a8d1
 800a838:	0800a8d1 	.word	0x0800a8d1
 800a83c:	0800a8d1 	.word	0x0800a8d1
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8d1 	.word	0x0800a8d1
 800a848:	0800a8d1 	.word	0x0800a8d1
 800a84c:	0800a8d1 	.word	0x0800a8d1
 800a850:	0800a8c3 	.word	0x0800a8c3
 800a854:	2b40      	cmp	r3, #64	; 0x40
 800a856:	d037      	beq.n	800a8c8 <UART_SetConfig+0x6bc>
 800a858:	e03a      	b.n	800a8d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a85a:	f7fe ffcf 	bl	80097fc <HAL_RCCEx_GetD3PCLK1Freq>
 800a85e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a860:	e03c      	b.n	800a8dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe ffde 	bl	8009828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a870:	e034      	b.n	800a8dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a872:	f107 0318 	add.w	r3, r7, #24
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff f92a 	bl	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a880:	e02c      	b.n	800a8dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0320 	and.w	r3, r3, #32
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d016      	beq.n	800a8bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a88e:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <UART_SetConfig+0x69c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	08db      	lsrs	r3, r3, #3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	4a07      	ldr	r2, [pc, #28]	; (800a8b8 <UART_SetConfig+0x6ac>)
 800a89a:	fa22 f303 	lsr.w	r3, r2, r3
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8a0:	e01c      	b.n	800a8dc <UART_SetConfig+0x6d0>
 800a8a2:	bf00      	nop
 800a8a4:	40011400 	.word	0x40011400
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	40007800 	.word	0x40007800
 800a8b0:	40007c00 	.word	0x40007c00
 800a8b4:	58000c00 	.word	0x58000c00
 800a8b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a8bc:	4b9d      	ldr	r3, [pc, #628]	; (800ab34 <UART_SetConfig+0x928>)
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c0:	e00c      	b.n	800a8dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c2:	4b9d      	ldr	r3, [pc, #628]	; (800ab38 <UART_SetConfig+0x92c>)
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c6:	e009      	b.n	800a8dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ce:	e005      	b.n	800a8dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 81de 	beq.w	800aca0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	4a94      	ldr	r2, [pc, #592]	; (800ab3c <UART_SetConfig+0x930>)
 800a8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	4413      	add	r3, r2
 800a902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a904:	429a      	cmp	r2, r3
 800a906:	d305      	bcc.n	800a914 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a910:	429a      	cmp	r2, r3
 800a912:	d903      	bls.n	800a91c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a91a:	e1c1      	b.n	800aca0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91e:	2200      	movs	r2, #0
 800a920:	60bb      	str	r3, [r7, #8]
 800a922:	60fa      	str	r2, [r7, #12]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	4a84      	ldr	r2, [pc, #528]	; (800ab3c <UART_SetConfig+0x930>)
 800a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	2200      	movs	r2, #0
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a93a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a93e:	f7f5 fff1 	bl	8000924 <__aeabi_uldivmod>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4610      	mov	r0, r2
 800a948:	4619      	mov	r1, r3
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	020b      	lsls	r3, r1, #8
 800a954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a958:	0202      	lsls	r2, r0, #8
 800a95a:	6979      	ldr	r1, [r7, #20]
 800a95c:	6849      	ldr	r1, [r1, #4]
 800a95e:	0849      	lsrs	r1, r1, #1
 800a960:	2000      	movs	r0, #0
 800a962:	460c      	mov	r4, r1
 800a964:	4605      	mov	r5, r0
 800a966:	eb12 0804 	adds.w	r8, r2, r4
 800a96a:	eb43 0905 	adc.w	r9, r3, r5
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	469a      	mov	sl, r3
 800a976:	4693      	mov	fp, r2
 800a978:	4652      	mov	r2, sl
 800a97a:	465b      	mov	r3, fp
 800a97c:	4640      	mov	r0, r8
 800a97e:	4649      	mov	r1, r9
 800a980:	f7f5 ffd0 	bl	8000924 <__aeabi_uldivmod>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4613      	mov	r3, r2
 800a98a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a992:	d308      	bcc.n	800a9a6 <UART_SetConfig+0x79a>
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99a:	d204      	bcs.n	800a9a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9a2:	60da      	str	r2, [r3, #12]
 800a9a4:	e17c      	b.n	800aca0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9ac:	e178      	b.n	800aca0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9b6:	f040 80c5 	bne.w	800ab44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a9ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	dc48      	bgt.n	800aa54 <UART_SetConfig+0x848>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	db7b      	blt.n	800aabe <UART_SetConfig+0x8b2>
 800a9c6:	2b20      	cmp	r3, #32
 800a9c8:	d879      	bhi.n	800aabe <UART_SetConfig+0x8b2>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <UART_SetConfig+0x7c4>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa5b 	.word	0x0800aa5b
 800a9d4:	0800aa63 	.word	0x0800aa63
 800a9d8:	0800aabf 	.word	0x0800aabf
 800a9dc:	0800aabf 	.word	0x0800aabf
 800a9e0:	0800aa6b 	.word	0x0800aa6b
 800a9e4:	0800aabf 	.word	0x0800aabf
 800a9e8:	0800aabf 	.word	0x0800aabf
 800a9ec:	0800aabf 	.word	0x0800aabf
 800a9f0:	0800aa7b 	.word	0x0800aa7b
 800a9f4:	0800aabf 	.word	0x0800aabf
 800a9f8:	0800aabf 	.word	0x0800aabf
 800a9fc:	0800aabf 	.word	0x0800aabf
 800aa00:	0800aabf 	.word	0x0800aabf
 800aa04:	0800aabf 	.word	0x0800aabf
 800aa08:	0800aabf 	.word	0x0800aabf
 800aa0c:	0800aabf 	.word	0x0800aabf
 800aa10:	0800aa8b 	.word	0x0800aa8b
 800aa14:	0800aabf 	.word	0x0800aabf
 800aa18:	0800aabf 	.word	0x0800aabf
 800aa1c:	0800aabf 	.word	0x0800aabf
 800aa20:	0800aabf 	.word	0x0800aabf
 800aa24:	0800aabf 	.word	0x0800aabf
 800aa28:	0800aabf 	.word	0x0800aabf
 800aa2c:	0800aabf 	.word	0x0800aabf
 800aa30:	0800aabf 	.word	0x0800aabf
 800aa34:	0800aabf 	.word	0x0800aabf
 800aa38:	0800aabf 	.word	0x0800aabf
 800aa3c:	0800aabf 	.word	0x0800aabf
 800aa40:	0800aabf 	.word	0x0800aabf
 800aa44:	0800aabf 	.word	0x0800aabf
 800aa48:	0800aabf 	.word	0x0800aabf
 800aa4c:	0800aabf 	.word	0x0800aabf
 800aa50:	0800aab1 	.word	0x0800aab1
 800aa54:	2b40      	cmp	r3, #64	; 0x40
 800aa56:	d02e      	beq.n	800aab6 <UART_SetConfig+0x8aa>
 800aa58:	e031      	b.n	800aabe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa5a:	f7fd ff5d 	bl	8008918 <HAL_RCC_GetPCLK1Freq>
 800aa5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa60:	e033      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa62:	f7fd ff6f 	bl	8008944 <HAL_RCC_GetPCLK2Freq>
 800aa66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa68:	e02f      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe feda 	bl	8009828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa78:	e027      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa7a:	f107 0318 	add.w	r3, r7, #24
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff f826 	bl	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa88:	e01f      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa8a:	4b2d      	ldr	r3, [pc, #180]	; (800ab40 <UART_SetConfig+0x934>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0320 	and.w	r3, r3, #32
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d009      	beq.n	800aaaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa96:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <UART_SetConfig+0x934>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	08db      	lsrs	r3, r3, #3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	4a24      	ldr	r2, [pc, #144]	; (800ab34 <UART_SetConfig+0x928>)
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaa8:	e00f      	b.n	800aaca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aaaa:	4b22      	ldr	r3, [pc, #136]	; (800ab34 <UART_SetConfig+0x928>)
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaae:	e00c      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aab0:	4b21      	ldr	r3, [pc, #132]	; (800ab38 <UART_SetConfig+0x92c>)
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab4:	e009      	b.n	800aaca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aabc:	e005      	b.n	800aaca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80e7 	beq.w	800aca0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <UART_SetConfig+0x930>)
 800aad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aadc:	461a      	mov	r2, r3
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae4:	005a      	lsls	r2, r3, #1
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	441a      	add	r2, r3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d916      	bls.n	800ab2c <UART_SetConfig+0x920>
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab04:	d212      	bcs.n	800ab2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f023 030f 	bic.w	r3, r3, #15
 800ab0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	085b      	lsrs	r3, r3, #1
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab28:	60da      	str	r2, [r3, #12]
 800ab2a:	e0b9      	b.n	800aca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab32:	e0b5      	b.n	800aca0 <UART_SetConfig+0xa94>
 800ab34:	03d09000 	.word	0x03d09000
 800ab38:	003d0900 	.word	0x003d0900
 800ab3c:	0800fdd4 	.word	0x0800fdd4
 800ab40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab48:	2b20      	cmp	r3, #32
 800ab4a:	dc49      	bgt.n	800abe0 <UART_SetConfig+0x9d4>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	db7c      	blt.n	800ac4a <UART_SetConfig+0xa3e>
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d87a      	bhi.n	800ac4a <UART_SetConfig+0xa3e>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <UART_SetConfig+0x950>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800abe7 	.word	0x0800abe7
 800ab60:	0800abef 	.word	0x0800abef
 800ab64:	0800ac4b 	.word	0x0800ac4b
 800ab68:	0800ac4b 	.word	0x0800ac4b
 800ab6c:	0800abf7 	.word	0x0800abf7
 800ab70:	0800ac4b 	.word	0x0800ac4b
 800ab74:	0800ac4b 	.word	0x0800ac4b
 800ab78:	0800ac4b 	.word	0x0800ac4b
 800ab7c:	0800ac07 	.word	0x0800ac07
 800ab80:	0800ac4b 	.word	0x0800ac4b
 800ab84:	0800ac4b 	.word	0x0800ac4b
 800ab88:	0800ac4b 	.word	0x0800ac4b
 800ab8c:	0800ac4b 	.word	0x0800ac4b
 800ab90:	0800ac4b 	.word	0x0800ac4b
 800ab94:	0800ac4b 	.word	0x0800ac4b
 800ab98:	0800ac4b 	.word	0x0800ac4b
 800ab9c:	0800ac17 	.word	0x0800ac17
 800aba0:	0800ac4b 	.word	0x0800ac4b
 800aba4:	0800ac4b 	.word	0x0800ac4b
 800aba8:	0800ac4b 	.word	0x0800ac4b
 800abac:	0800ac4b 	.word	0x0800ac4b
 800abb0:	0800ac4b 	.word	0x0800ac4b
 800abb4:	0800ac4b 	.word	0x0800ac4b
 800abb8:	0800ac4b 	.word	0x0800ac4b
 800abbc:	0800ac4b 	.word	0x0800ac4b
 800abc0:	0800ac4b 	.word	0x0800ac4b
 800abc4:	0800ac4b 	.word	0x0800ac4b
 800abc8:	0800ac4b 	.word	0x0800ac4b
 800abcc:	0800ac4b 	.word	0x0800ac4b
 800abd0:	0800ac4b 	.word	0x0800ac4b
 800abd4:	0800ac4b 	.word	0x0800ac4b
 800abd8:	0800ac4b 	.word	0x0800ac4b
 800abdc:	0800ac3d 	.word	0x0800ac3d
 800abe0:	2b40      	cmp	r3, #64	; 0x40
 800abe2:	d02e      	beq.n	800ac42 <UART_SetConfig+0xa36>
 800abe4:	e031      	b.n	800ac4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe6:	f7fd fe97 	bl	8008918 <HAL_RCC_GetPCLK1Freq>
 800abea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abec:	e033      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abee:	f7fd fea9 	bl	8008944 <HAL_RCC_GetPCLK2Freq>
 800abf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abf4:	e02f      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe fe14 	bl	8009828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac04:	e027      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe ff60 	bl	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac14:	e01f      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac16:	4b2d      	ldr	r3, [pc, #180]	; (800accc <UART_SetConfig+0xac0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac22:	4b2a      	ldr	r3, [pc, #168]	; (800accc <UART_SetConfig+0xac0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	08db      	lsrs	r3, r3, #3
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	4a28      	ldr	r2, [pc, #160]	; (800acd0 <UART_SetConfig+0xac4>)
 800ac2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac34:	e00f      	b.n	800ac56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac36:	4b26      	ldr	r3, [pc, #152]	; (800acd0 <UART_SetConfig+0xac4>)
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3a:	e00c      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac3c:	4b25      	ldr	r3, [pc, #148]	; (800acd4 <UART_SetConfig+0xac8>)
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac40:	e009      	b.n	800ac56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac48:	e005      	b.n	800ac56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac54:	bf00      	nop
    }

    if (pclk != 0U)
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d021      	beq.n	800aca0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	4a1d      	ldr	r2, [pc, #116]	; (800acd8 <UART_SetConfig+0xacc>)
 800ac62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac66:	461a      	mov	r2, r3
 800ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	441a      	add	r2, r3
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	2b0f      	cmp	r3, #15
 800ac84:	d909      	bls.n	800ac9a <UART_SetConfig+0xa8e>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8c:	d205      	bcs.n	800ac9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	e002      	b.n	800aca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2201      	movs	r2, #1
 800acac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2200      	movs	r2, #0
 800acb4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2200      	movs	r2, #0
 800acba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800acbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3748      	adds	r7, #72	; 0x48
 800acc4:	46bd      	mov	sp, r7
 800acc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acca:	bf00      	nop
 800accc:	58024400 	.word	0x58024400
 800acd0:	03d09000 	.word	0x03d09000
 800acd4:	003d0900 	.word	0x003d0900
 800acd8:	0800fdd4 	.word	0x0800fdd4

0800acdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00a      	beq.n	800ad06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0a:	f003 0302 	and.w	r3, r3, #2
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	430a      	orrs	r2, r1
 800ad26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4e:	f003 0308 	and.w	r3, r3, #8
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	f003 0310 	and.w	r3, r3, #16
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01a      	beq.n	800adf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adda:	d10a      	bne.n	800adf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	605a      	str	r2, [r3, #4]
  }
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae30:	f7fb fca0 	bl	8006774 <HAL_GetTick>
 800ae34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b08      	cmp	r3, #8
 800ae42:	d10e      	bne.n	800ae62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f82f 	bl	800aeb6 <UART_WaitOnFlagUntilTimeout>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e025      	b.n	800aeae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d10e      	bne.n	800ae8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f819 	bl	800aeb6 <UART_WaitOnFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e00f      	b.n	800aeae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2220      	movs	r2, #32
 800ae92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b09c      	sub	sp, #112	; 0x70
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	603b      	str	r3, [r7, #0]
 800aec2:	4613      	mov	r3, r2
 800aec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec6:	e0a9      	b.n	800b01c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aece:	f000 80a5 	beq.w	800b01c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aed2:	f7fb fc4f 	bl	8006774 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aede:	429a      	cmp	r2, r3
 800aee0:	d302      	bcc.n	800aee8 <UART_WaitOnFlagUntilTimeout+0x32>
 800aee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d140      	bne.n	800af6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aefc:	667b      	str	r3, [r7, #100]	; 0x64
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	f023 0301 	bic.w	r3, r3, #1
 800af30:	663b      	str	r3, [r7, #96]	; 0x60
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3308      	adds	r3, #8
 800af38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af3a:	64ba      	str	r2, [r7, #72]	; 0x48
 800af3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e5      	bne.n	800af1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2220      	movs	r2, #32
 800af5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e069      	b.n	800b03e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b00      	cmp	r3, #0
 800af76:	d051      	beq.n	800b01c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af86:	d149      	bne.n	800b01c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	461a      	mov	r2, r3
 800afae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb0:	637b      	str	r3, [r7, #52]	; 0x34
 800afb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afb8:	e841 2300 	strex	r3, r2, [r1]
 800afbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e6      	bne.n	800af92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3308      	adds	r3, #8
 800afca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	e853 3f00 	ldrex	r3, [r3]
 800afd2:	613b      	str	r3, [r7, #16]
   return(result);
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f023 0301 	bic.w	r3, r3, #1
 800afda:	66bb      	str	r3, [r7, #104]	; 0x68
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3308      	adds	r3, #8
 800afe2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afe4:	623a      	str	r2, [r7, #32]
 800afe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe8:	69f9      	ldr	r1, [r7, #28]
 800afea:	6a3a      	ldr	r2, [r7, #32]
 800afec:	e841 2300 	strex	r3, r2, [r1]
 800aff0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e5      	bne.n	800afc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2220      	movs	r2, #32
 800affc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e010      	b.n	800b03e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	69da      	ldr	r2, [r3, #28]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	4013      	ands	r3, r2
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	429a      	cmp	r2, r3
 800b02a:	bf0c      	ite	eq
 800b02c:	2301      	moveq	r3, #1
 800b02e:	2300      	movne	r3, #0
 800b030:	b2db      	uxtb	r3, r3
 800b032:	461a      	mov	r2, r3
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	429a      	cmp	r2, r3
 800b038:	f43f af46 	beq.w	800aec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3770      	adds	r7, #112	; 0x70
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b054:	2b01      	cmp	r3, #1
 800b056:	d101      	bne.n	800b05c <HAL_UARTEx_DisableFifoMode+0x16>
 800b058:	2302      	movs	r3, #2
 800b05a:	e027      	b.n	800b0ac <HAL_UARTEx_DisableFifoMode+0x66>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2224      	movs	r2, #36	; 0x24
 800b068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f022 0201 	bic.w	r2, r2, #1
 800b082:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b08a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2220      	movs	r2, #32
 800b09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d101      	bne.n	800b0d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e02d      	b.n	800b12c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2224      	movs	r2, #36	; 0x24
 800b0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0201 	bic.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f84f 	bl	800b1b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b144:	2b01      	cmp	r3, #1
 800b146:	d101      	bne.n	800b14c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b148:	2302      	movs	r3, #2
 800b14a:	e02d      	b.n	800b1a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2224      	movs	r2, #36	; 0x24
 800b158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0201 	bic.w	r2, r2, #1
 800b172:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f811 	bl	800b1b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2220      	movs	r2, #32
 800b19a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d108      	bne.n	800b1d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1d0:	e031      	b.n	800b236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1d2:	2310      	movs	r3, #16
 800b1d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1d6:	2310      	movs	r3, #16
 800b1d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	0e5b      	lsrs	r3, r3, #25
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	0f5b      	lsrs	r3, r3, #29
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 0307 	and.w	r3, r3, #7
 800b1f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	7b3a      	ldrb	r2, [r7, #12]
 800b1fe:	4911      	ldr	r1, [pc, #68]	; (800b244 <UARTEx_SetNbDataToProcess+0x94>)
 800b200:	5c8a      	ldrb	r2, [r1, r2]
 800b202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b206:	7b3a      	ldrb	r2, [r7, #12]
 800b208:	490f      	ldr	r1, [pc, #60]	; (800b248 <UARTEx_SetNbDataToProcess+0x98>)
 800b20a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b20c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b210:	b29a      	uxth	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	7b7a      	ldrb	r2, [r7, #13]
 800b21c:	4909      	ldr	r1, [pc, #36]	; (800b244 <UARTEx_SetNbDataToProcess+0x94>)
 800b21e:	5c8a      	ldrb	r2, [r1, r2]
 800b220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b224:	7b7a      	ldrb	r2, [r7, #13]
 800b226:	4908      	ldr	r1, [pc, #32]	; (800b248 <UARTEx_SetNbDataToProcess+0x98>)
 800b228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b22a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b236:	bf00      	nop
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	0800fdec 	.word	0x0800fdec
 800b248:	0800fdf4 	.word	0x0800fdf4

0800b24c <__errno>:
 800b24c:	4b01      	ldr	r3, [pc, #4]	; (800b254 <__errno+0x8>)
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	24000034 	.word	0x24000034

0800b258 <__libc_init_array>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	4d0d      	ldr	r5, [pc, #52]	; (800b290 <__libc_init_array+0x38>)
 800b25c:	4c0d      	ldr	r4, [pc, #52]	; (800b294 <__libc_init_array+0x3c>)
 800b25e:	1b64      	subs	r4, r4, r5
 800b260:	10a4      	asrs	r4, r4, #2
 800b262:	2600      	movs	r6, #0
 800b264:	42a6      	cmp	r6, r4
 800b266:	d109      	bne.n	800b27c <__libc_init_array+0x24>
 800b268:	4d0b      	ldr	r5, [pc, #44]	; (800b298 <__libc_init_array+0x40>)
 800b26a:	4c0c      	ldr	r4, [pc, #48]	; (800b29c <__libc_init_array+0x44>)
 800b26c:	f004 fd14 	bl	800fc98 <_init>
 800b270:	1b64      	subs	r4, r4, r5
 800b272:	10a4      	asrs	r4, r4, #2
 800b274:	2600      	movs	r6, #0
 800b276:	42a6      	cmp	r6, r4
 800b278:	d105      	bne.n	800b286 <__libc_init_array+0x2e>
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b280:	4798      	blx	r3
 800b282:	3601      	adds	r6, #1
 800b284:	e7ee      	b.n	800b264 <__libc_init_array+0xc>
 800b286:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28a:	4798      	blx	r3
 800b28c:	3601      	adds	r6, #1
 800b28e:	e7f2      	b.n	800b276 <__libc_init_array+0x1e>
 800b290:	08012050 	.word	0x08012050
 800b294:	08012050 	.word	0x08012050
 800b298:	08012050 	.word	0x08012050
 800b29c:	08012054 	.word	0x08012054

0800b2a0 <memset>:
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d100      	bne.n	800b2aa <memset+0xa>
 800b2a8:	4770      	bx	lr
 800b2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ae:	e7f9      	b.n	800b2a4 <memset+0x4>

0800b2b0 <__cvt>:
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	ed2d 8b02 	vpush	{d8}
 800b2b6:	eeb0 8b40 	vmov.f64	d8, d0
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	4617      	mov	r7, r2
 800b2be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b2c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b2c2:	ee18 2a90 	vmov	r2, s17
 800b2c6:	f025 0520 	bic.w	r5, r5, #32
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	bfb6      	itet	lt
 800b2ce:	222d      	movlt	r2, #45	; 0x2d
 800b2d0:	2200      	movge	r2, #0
 800b2d2:	eeb1 8b40 	vneglt.f64	d8, d0
 800b2d6:	2d46      	cmp	r5, #70	; 0x46
 800b2d8:	460c      	mov	r4, r1
 800b2da:	701a      	strb	r2, [r3, #0]
 800b2dc:	d004      	beq.n	800b2e8 <__cvt+0x38>
 800b2de:	2d45      	cmp	r5, #69	; 0x45
 800b2e0:	d100      	bne.n	800b2e4 <__cvt+0x34>
 800b2e2:	3401      	adds	r4, #1
 800b2e4:	2102      	movs	r1, #2
 800b2e6:	e000      	b.n	800b2ea <__cvt+0x3a>
 800b2e8:	2103      	movs	r1, #3
 800b2ea:	ab03      	add	r3, sp, #12
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	ab02      	add	r3, sp, #8
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	4633      	mov	r3, r6
 800b2f6:	eeb0 0b48 	vmov.f64	d0, d8
 800b2fa:	f000 fdf5 	bl	800bee8 <_dtoa_r>
 800b2fe:	2d47      	cmp	r5, #71	; 0x47
 800b300:	d101      	bne.n	800b306 <__cvt+0x56>
 800b302:	07fb      	lsls	r3, r7, #31
 800b304:	d51a      	bpl.n	800b33c <__cvt+0x8c>
 800b306:	2d46      	cmp	r5, #70	; 0x46
 800b308:	eb00 0204 	add.w	r2, r0, r4
 800b30c:	d10c      	bne.n	800b328 <__cvt+0x78>
 800b30e:	7803      	ldrb	r3, [r0, #0]
 800b310:	2b30      	cmp	r3, #48	; 0x30
 800b312:	d107      	bne.n	800b324 <__cvt+0x74>
 800b314:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31c:	bf1c      	itt	ne
 800b31e:	f1c4 0401 	rsbne	r4, r4, #1
 800b322:	6034      	strne	r4, [r6, #0]
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	441a      	add	r2, r3
 800b328:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b330:	bf08      	it	eq
 800b332:	9203      	streq	r2, [sp, #12]
 800b334:	2130      	movs	r1, #48	; 0x30
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	4293      	cmp	r3, r2
 800b33a:	d307      	bcc.n	800b34c <__cvt+0x9c>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b340:	1a1b      	subs	r3, r3, r0
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	b005      	add	sp, #20
 800b346:	ecbd 8b02 	vpop	{d8}
 800b34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34c:	1c5c      	adds	r4, r3, #1
 800b34e:	9403      	str	r4, [sp, #12]
 800b350:	7019      	strb	r1, [r3, #0]
 800b352:	e7f0      	b.n	800b336 <__cvt+0x86>

0800b354 <__exponent>:
 800b354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b356:	4603      	mov	r3, r0
 800b358:	2900      	cmp	r1, #0
 800b35a:	bfb8      	it	lt
 800b35c:	4249      	neglt	r1, r1
 800b35e:	f803 2b02 	strb.w	r2, [r3], #2
 800b362:	bfb4      	ite	lt
 800b364:	222d      	movlt	r2, #45	; 0x2d
 800b366:	222b      	movge	r2, #43	; 0x2b
 800b368:	2909      	cmp	r1, #9
 800b36a:	7042      	strb	r2, [r0, #1]
 800b36c:	dd2a      	ble.n	800b3c4 <__exponent+0x70>
 800b36e:	f10d 0407 	add.w	r4, sp, #7
 800b372:	46a4      	mov	ip, r4
 800b374:	270a      	movs	r7, #10
 800b376:	46a6      	mov	lr, r4
 800b378:	460a      	mov	r2, r1
 800b37a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b37e:	fb07 1516 	mls	r5, r7, r6, r1
 800b382:	3530      	adds	r5, #48	; 0x30
 800b384:	2a63      	cmp	r2, #99	; 0x63
 800b386:	f104 34ff 	add.w	r4, r4, #4294967295
 800b38a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b38e:	4631      	mov	r1, r6
 800b390:	dcf1      	bgt.n	800b376 <__exponent+0x22>
 800b392:	3130      	adds	r1, #48	; 0x30
 800b394:	f1ae 0502 	sub.w	r5, lr, #2
 800b398:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b39c:	1c44      	adds	r4, r0, #1
 800b39e:	4629      	mov	r1, r5
 800b3a0:	4561      	cmp	r1, ip
 800b3a2:	d30a      	bcc.n	800b3ba <__exponent+0x66>
 800b3a4:	f10d 0209 	add.w	r2, sp, #9
 800b3a8:	eba2 020e 	sub.w	r2, r2, lr
 800b3ac:	4565      	cmp	r5, ip
 800b3ae:	bf88      	it	hi
 800b3b0:	2200      	movhi	r2, #0
 800b3b2:	4413      	add	r3, r2
 800b3b4:	1a18      	subs	r0, r3, r0
 800b3b6:	b003      	add	sp, #12
 800b3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b3c2:	e7ed      	b.n	800b3a0 <__exponent+0x4c>
 800b3c4:	2330      	movs	r3, #48	; 0x30
 800b3c6:	3130      	adds	r1, #48	; 0x30
 800b3c8:	7083      	strb	r3, [r0, #2]
 800b3ca:	70c1      	strb	r1, [r0, #3]
 800b3cc:	1d03      	adds	r3, r0, #4
 800b3ce:	e7f1      	b.n	800b3b4 <__exponent+0x60>

0800b3d0 <_printf_float>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	b08b      	sub	sp, #44	; 0x2c
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b3dc:	4616      	mov	r6, r2
 800b3de:	461f      	mov	r7, r3
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	f001 fca7 	bl	800cd34 <_localeconv_r>
 800b3e6:	f8d0 b000 	ldr.w	fp, [r0]
 800b3ea:	4658      	mov	r0, fp
 800b3ec:	f7f4 ff78 	bl	80002e0 <strlen>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	3307      	adds	r3, #7
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	f103 0108 	add.w	r1, r3, #8
 800b408:	f8c8 1000 	str.w	r1, [r8]
 800b40c:	4682      	mov	sl, r0
 800b40e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b412:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b416:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b678 <_printf_float+0x2a8>
 800b41a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b41e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b422:	eeb4 6b47 	vcmp.f64	d6, d7
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	dd24      	ble.n	800b476 <_printf_float+0xa6>
 800b42c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b434:	d502      	bpl.n	800b43c <_printf_float+0x6c>
 800b436:	232d      	movs	r3, #45	; 0x2d
 800b438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b43c:	4b90      	ldr	r3, [pc, #576]	; (800b680 <_printf_float+0x2b0>)
 800b43e:	4891      	ldr	r0, [pc, #580]	; (800b684 <_printf_float+0x2b4>)
 800b440:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b444:	bf94      	ite	ls
 800b446:	4698      	movls	r8, r3
 800b448:	4680      	movhi	r8, r0
 800b44a:	2303      	movs	r3, #3
 800b44c:	6123      	str	r3, [r4, #16]
 800b44e:	f022 0204 	bic.w	r2, r2, #4
 800b452:	2300      	movs	r3, #0
 800b454:	6022      	str	r2, [r4, #0]
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	9700      	str	r7, [sp, #0]
 800b45a:	4633      	mov	r3, r6
 800b45c:	aa09      	add	r2, sp, #36	; 0x24
 800b45e:	4621      	mov	r1, r4
 800b460:	4628      	mov	r0, r5
 800b462:	f000 f9d3 	bl	800b80c <_printf_common>
 800b466:	3001      	adds	r0, #1
 800b468:	f040 808a 	bne.w	800b580 <_printf_float+0x1b0>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b00b      	add	sp, #44	; 0x2c
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	eeb4 0b40 	vcmp.f64	d0, d0
 800b47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47e:	d709      	bvc.n	800b494 <_printf_float+0xc4>
 800b480:	ee10 3a90 	vmov	r3, s1
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfbc      	itt	lt
 800b488:	232d      	movlt	r3, #45	; 0x2d
 800b48a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b48e:	487e      	ldr	r0, [pc, #504]	; (800b688 <_printf_float+0x2b8>)
 800b490:	4b7e      	ldr	r3, [pc, #504]	; (800b68c <_printf_float+0x2bc>)
 800b492:	e7d5      	b.n	800b440 <_printf_float+0x70>
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b49a:	9104      	str	r1, [sp, #16]
 800b49c:	1c59      	adds	r1, r3, #1
 800b49e:	d13c      	bne.n	800b51a <_printf_float+0x14a>
 800b4a0:	2306      	movs	r3, #6
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	ab08      	add	r3, sp, #32
 800b4aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b4ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4b2:	ab07      	add	r3, sp, #28
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	6022      	str	r2, [r4, #0]
 800b4ba:	f10d 031b 	add.w	r3, sp, #27
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fef6 	bl	800b2b0 <__cvt>
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	9907      	ldr	r1, [sp, #28]
 800b4c8:	2b47      	cmp	r3, #71	; 0x47
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	d108      	bne.n	800b4e0 <_printf_float+0x110>
 800b4ce:	1cc8      	adds	r0, r1, #3
 800b4d0:	db02      	blt.n	800b4d8 <_printf_float+0x108>
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	dd41      	ble.n	800b55c <_printf_float+0x18c>
 800b4d8:	f1a9 0902 	sub.w	r9, r9, #2
 800b4dc:	fa5f f989 	uxtb.w	r9, r9
 800b4e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b4e4:	d820      	bhi.n	800b528 <_printf_float+0x158>
 800b4e6:	3901      	subs	r1, #1
 800b4e8:	464a      	mov	r2, r9
 800b4ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4ee:	9107      	str	r1, [sp, #28]
 800b4f0:	f7ff ff30 	bl	800b354 <__exponent>
 800b4f4:	9a08      	ldr	r2, [sp, #32]
 800b4f6:	9004      	str	r0, [sp, #16]
 800b4f8:	1813      	adds	r3, r2, r0
 800b4fa:	2a01      	cmp	r2, #1
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	dc02      	bgt.n	800b506 <_printf_float+0x136>
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	07d2      	lsls	r2, r2, #31
 800b504:	d501      	bpl.n	800b50a <_printf_float+0x13a>
 800b506:	3301      	adds	r3, #1
 800b508:	6123      	str	r3, [r4, #16]
 800b50a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0a2      	beq.n	800b458 <_printf_float+0x88>
 800b512:	232d      	movs	r3, #45	; 0x2d
 800b514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b518:	e79e      	b.n	800b458 <_printf_float+0x88>
 800b51a:	9904      	ldr	r1, [sp, #16]
 800b51c:	2947      	cmp	r1, #71	; 0x47
 800b51e:	d1c1      	bne.n	800b4a4 <_printf_float+0xd4>
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1bf      	bne.n	800b4a4 <_printf_float+0xd4>
 800b524:	2301      	movs	r3, #1
 800b526:	e7bc      	b.n	800b4a2 <_printf_float+0xd2>
 800b528:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b52c:	d118      	bne.n	800b560 <_printf_float+0x190>
 800b52e:	2900      	cmp	r1, #0
 800b530:	6863      	ldr	r3, [r4, #4]
 800b532:	dd0b      	ble.n	800b54c <_printf_float+0x17c>
 800b534:	6121      	str	r1, [r4, #16]
 800b536:	b913      	cbnz	r3, 800b53e <_printf_float+0x16e>
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	07d0      	lsls	r0, r2, #31
 800b53c:	d502      	bpl.n	800b544 <_printf_float+0x174>
 800b53e:	3301      	adds	r3, #1
 800b540:	440b      	add	r3, r1
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2300      	movs	r3, #0
 800b546:	65a1      	str	r1, [r4, #88]	; 0x58
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	e7de      	b.n	800b50a <_printf_float+0x13a>
 800b54c:	b913      	cbnz	r3, 800b554 <_printf_float+0x184>
 800b54e:	6822      	ldr	r2, [r4, #0]
 800b550:	07d2      	lsls	r2, r2, #31
 800b552:	d501      	bpl.n	800b558 <_printf_float+0x188>
 800b554:	3302      	adds	r3, #2
 800b556:	e7f4      	b.n	800b542 <_printf_float+0x172>
 800b558:	2301      	movs	r3, #1
 800b55a:	e7f2      	b.n	800b542 <_printf_float+0x172>
 800b55c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	4299      	cmp	r1, r3
 800b564:	db05      	blt.n	800b572 <_printf_float+0x1a2>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	6121      	str	r1, [r4, #16]
 800b56a:	07d8      	lsls	r0, r3, #31
 800b56c:	d5ea      	bpl.n	800b544 <_printf_float+0x174>
 800b56e:	1c4b      	adds	r3, r1, #1
 800b570:	e7e7      	b.n	800b542 <_printf_float+0x172>
 800b572:	2900      	cmp	r1, #0
 800b574:	bfd4      	ite	le
 800b576:	f1c1 0202 	rsble	r2, r1, #2
 800b57a:	2201      	movgt	r2, #1
 800b57c:	4413      	add	r3, r2
 800b57e:	e7e0      	b.n	800b542 <_printf_float+0x172>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	055a      	lsls	r2, r3, #21
 800b584:	d407      	bmi.n	800b596 <_printf_float+0x1c6>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	4642      	mov	r2, r8
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	d12a      	bne.n	800b5ea <_printf_float+0x21a>
 800b594:	e76a      	b.n	800b46c <_printf_float+0x9c>
 800b596:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b59a:	f240 80e2 	bls.w	800b762 <_printf_float+0x392>
 800b59e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b5a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5aa:	d133      	bne.n	800b614 <_printf_float+0x244>
 800b5ac:	4a38      	ldr	r2, [pc, #224]	; (800b690 <_printf_float+0x2c0>)
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f43f af58 	beq.w	800b46c <_printf_float+0x9c>
 800b5bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	db02      	blt.n	800b5ca <_printf_float+0x1fa>
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	07d8      	lsls	r0, r3, #31
 800b5c8:	d50f      	bpl.n	800b5ea <_printf_float+0x21a>
 800b5ca:	4653      	mov	r3, sl
 800b5cc:	465a      	mov	r2, fp
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	f43f af49 	beq.w	800b46c <_printf_float+0x9c>
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	f104 091a 	add.w	r9, r4, #26
 800b5e2:	9b08      	ldr	r3, [sp, #32]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	4543      	cmp	r3, r8
 800b5e8:	dc09      	bgt.n	800b5fe <_printf_float+0x22e>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	079b      	lsls	r3, r3, #30
 800b5ee:	f100 8108 	bmi.w	800b802 <_printf_float+0x432>
 800b5f2:	68e0      	ldr	r0, [r4, #12]
 800b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f6:	4298      	cmp	r0, r3
 800b5f8:	bfb8      	it	lt
 800b5fa:	4618      	movlt	r0, r3
 800b5fc:	e738      	b.n	800b470 <_printf_float+0xa0>
 800b5fe:	2301      	movs	r3, #1
 800b600:	464a      	mov	r2, r9
 800b602:	4631      	mov	r1, r6
 800b604:	4628      	mov	r0, r5
 800b606:	47b8      	blx	r7
 800b608:	3001      	adds	r0, #1
 800b60a:	f43f af2f 	beq.w	800b46c <_printf_float+0x9c>
 800b60e:	f108 0801 	add.w	r8, r8, #1
 800b612:	e7e6      	b.n	800b5e2 <_printf_float+0x212>
 800b614:	9b07      	ldr	r3, [sp, #28]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dc3c      	bgt.n	800b694 <_printf_float+0x2c4>
 800b61a:	4a1d      	ldr	r2, [pc, #116]	; (800b690 <_printf_float+0x2c0>)
 800b61c:	2301      	movs	r3, #1
 800b61e:	4631      	mov	r1, r6
 800b620:	4628      	mov	r0, r5
 800b622:	47b8      	blx	r7
 800b624:	3001      	adds	r0, #1
 800b626:	f43f af21 	beq.w	800b46c <_printf_float+0x9c>
 800b62a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b62e:	4313      	orrs	r3, r2
 800b630:	d102      	bne.n	800b638 <_printf_float+0x268>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	07d9      	lsls	r1, r3, #31
 800b636:	d5d8      	bpl.n	800b5ea <_printf_float+0x21a>
 800b638:	4653      	mov	r3, sl
 800b63a:	465a      	mov	r2, fp
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f af12 	beq.w	800b46c <_printf_float+0x9c>
 800b648:	f04f 0900 	mov.w	r9, #0
 800b64c:	f104 0a1a 	add.w	sl, r4, #26
 800b650:	9b07      	ldr	r3, [sp, #28]
 800b652:	425b      	negs	r3, r3
 800b654:	454b      	cmp	r3, r9
 800b656:	dc01      	bgt.n	800b65c <_printf_float+0x28c>
 800b658:	9b08      	ldr	r3, [sp, #32]
 800b65a:	e795      	b.n	800b588 <_printf_float+0x1b8>
 800b65c:	2301      	movs	r3, #1
 800b65e:	4652      	mov	r2, sl
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	f43f af00 	beq.w	800b46c <_printf_float+0x9c>
 800b66c:	f109 0901 	add.w	r9, r9, #1
 800b670:	e7ee      	b.n	800b650 <_printf_float+0x280>
 800b672:	bf00      	nop
 800b674:	f3af 8000 	nop.w
 800b678:	ffffffff 	.word	0xffffffff
 800b67c:	7fefffff 	.word	0x7fefffff
 800b680:	0800fe00 	.word	0x0800fe00
 800b684:	0800fe04 	.word	0x0800fe04
 800b688:	0800fe0c 	.word	0x0800fe0c
 800b68c:	0800fe08 	.word	0x0800fe08
 800b690:	0800fe10 	.word	0x0800fe10
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b698:	429a      	cmp	r2, r3
 800b69a:	bfa8      	it	ge
 800b69c:	461a      	movge	r2, r3
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	4691      	mov	r9, r2
 800b6a2:	dc38      	bgt.n	800b716 <_printf_float+0x346>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6ac:	f104 021a 	add.w	r2, r4, #26
 800b6b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6b2:	9905      	ldr	r1, [sp, #20]
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	eba3 0309 	sub.w	r3, r3, r9
 800b6ba:	428b      	cmp	r3, r1
 800b6bc:	dc33      	bgt.n	800b726 <_printf_float+0x356>
 800b6be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	db3c      	blt.n	800b740 <_printf_float+0x370>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	07da      	lsls	r2, r3, #31
 800b6ca:	d439      	bmi.n	800b740 <_printf_float+0x370>
 800b6cc:	9b08      	ldr	r3, [sp, #32]
 800b6ce:	9a04      	ldr	r2, [sp, #16]
 800b6d0:	9907      	ldr	r1, [sp, #28]
 800b6d2:	1a9a      	subs	r2, r3, r2
 800b6d4:	eba3 0901 	sub.w	r9, r3, r1
 800b6d8:	4591      	cmp	r9, r2
 800b6da:	bfa8      	it	ge
 800b6dc:	4691      	movge	r9, r2
 800b6de:	f1b9 0f00 	cmp.w	r9, #0
 800b6e2:	dc35      	bgt.n	800b750 <_printf_float+0x380>
 800b6e4:	f04f 0800 	mov.w	r8, #0
 800b6e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6ec:	f104 0a1a 	add.w	sl, r4, #26
 800b6f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	eba3 0309 	sub.w	r3, r3, r9
 800b6fa:	4543      	cmp	r3, r8
 800b6fc:	f77f af75 	ble.w	800b5ea <_printf_float+0x21a>
 800b700:	2301      	movs	r3, #1
 800b702:	4652      	mov	r2, sl
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f aeae 	beq.w	800b46c <_printf_float+0x9c>
 800b710:	f108 0801 	add.w	r8, r8, #1
 800b714:	e7ec      	b.n	800b6f0 <_printf_float+0x320>
 800b716:	4613      	mov	r3, r2
 800b718:	4631      	mov	r1, r6
 800b71a:	4642      	mov	r2, r8
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b8      	blx	r7
 800b720:	3001      	adds	r0, #1
 800b722:	d1bf      	bne.n	800b6a4 <_printf_float+0x2d4>
 800b724:	e6a2      	b.n	800b46c <_printf_float+0x9c>
 800b726:	2301      	movs	r3, #1
 800b728:	4631      	mov	r1, r6
 800b72a:	4628      	mov	r0, r5
 800b72c:	9204      	str	r2, [sp, #16]
 800b72e:	47b8      	blx	r7
 800b730:	3001      	adds	r0, #1
 800b732:	f43f ae9b 	beq.w	800b46c <_printf_float+0x9c>
 800b736:	9b05      	ldr	r3, [sp, #20]
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	3301      	adds	r3, #1
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	e7b7      	b.n	800b6b0 <_printf_float+0x2e0>
 800b740:	4653      	mov	r3, sl
 800b742:	465a      	mov	r2, fp
 800b744:	4631      	mov	r1, r6
 800b746:	4628      	mov	r0, r5
 800b748:	47b8      	blx	r7
 800b74a:	3001      	adds	r0, #1
 800b74c:	d1be      	bne.n	800b6cc <_printf_float+0x2fc>
 800b74e:	e68d      	b.n	800b46c <_printf_float+0x9c>
 800b750:	9a04      	ldr	r2, [sp, #16]
 800b752:	464b      	mov	r3, r9
 800b754:	4442      	add	r2, r8
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	d1c1      	bne.n	800b6e4 <_printf_float+0x314>
 800b760:	e684      	b.n	800b46c <_printf_float+0x9c>
 800b762:	9a08      	ldr	r2, [sp, #32]
 800b764:	2a01      	cmp	r2, #1
 800b766:	dc01      	bgt.n	800b76c <_printf_float+0x39c>
 800b768:	07db      	lsls	r3, r3, #31
 800b76a:	d537      	bpl.n	800b7dc <_printf_float+0x40c>
 800b76c:	2301      	movs	r3, #1
 800b76e:	4642      	mov	r2, r8
 800b770:	4631      	mov	r1, r6
 800b772:	4628      	mov	r0, r5
 800b774:	47b8      	blx	r7
 800b776:	3001      	adds	r0, #1
 800b778:	f43f ae78 	beq.w	800b46c <_printf_float+0x9c>
 800b77c:	4653      	mov	r3, sl
 800b77e:	465a      	mov	r2, fp
 800b780:	4631      	mov	r1, r6
 800b782:	4628      	mov	r0, r5
 800b784:	47b8      	blx	r7
 800b786:	3001      	adds	r0, #1
 800b788:	f43f ae70 	beq.w	800b46c <_printf_float+0x9c>
 800b78c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b790:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	d01b      	beq.n	800b7d2 <_printf_float+0x402>
 800b79a:	9b08      	ldr	r3, [sp, #32]
 800b79c:	f108 0201 	add.w	r2, r8, #1
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d10e      	bne.n	800b7ca <_printf_float+0x3fa>
 800b7ac:	e65e      	b.n	800b46c <_printf_float+0x9c>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	464a      	mov	r2, r9
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b8      	blx	r7
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f43f ae57 	beq.w	800b46c <_printf_float+0x9c>
 800b7be:	f108 0801 	add.w	r8, r8, #1
 800b7c2:	9b08      	ldr	r3, [sp, #32]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	4543      	cmp	r3, r8
 800b7c8:	dcf1      	bgt.n	800b7ae <_printf_float+0x3de>
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7d0:	e6db      	b.n	800b58a <_printf_float+0x1ba>
 800b7d2:	f04f 0800 	mov.w	r8, #0
 800b7d6:	f104 091a 	add.w	r9, r4, #26
 800b7da:	e7f2      	b.n	800b7c2 <_printf_float+0x3f2>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4642      	mov	r2, r8
 800b7e0:	e7df      	b.n	800b7a2 <_printf_float+0x3d2>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	464a      	mov	r2, r9
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	f43f ae3d 	beq.w	800b46c <_printf_float+0x9c>
 800b7f2:	f108 0801 	add.w	r8, r8, #1
 800b7f6:	68e3      	ldr	r3, [r4, #12]
 800b7f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7fa:	1a5b      	subs	r3, r3, r1
 800b7fc:	4543      	cmp	r3, r8
 800b7fe:	dcf0      	bgt.n	800b7e2 <_printf_float+0x412>
 800b800:	e6f7      	b.n	800b5f2 <_printf_float+0x222>
 800b802:	f04f 0800 	mov.w	r8, #0
 800b806:	f104 0919 	add.w	r9, r4, #25
 800b80a:	e7f4      	b.n	800b7f6 <_printf_float+0x426>

0800b80c <_printf_common>:
 800b80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b810:	4616      	mov	r6, r2
 800b812:	4699      	mov	r9, r3
 800b814:	688a      	ldr	r2, [r1, #8]
 800b816:	690b      	ldr	r3, [r1, #16]
 800b818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	bfb8      	it	lt
 800b820:	4613      	movlt	r3, r2
 800b822:	6033      	str	r3, [r6, #0]
 800b824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b828:	4607      	mov	r7, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	b10a      	cbz	r2, 800b832 <_printf_common+0x26>
 800b82e:	3301      	adds	r3, #1
 800b830:	6033      	str	r3, [r6, #0]
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	0699      	lsls	r1, r3, #26
 800b836:	bf42      	ittt	mi
 800b838:	6833      	ldrmi	r3, [r6, #0]
 800b83a:	3302      	addmi	r3, #2
 800b83c:	6033      	strmi	r3, [r6, #0]
 800b83e:	6825      	ldr	r5, [r4, #0]
 800b840:	f015 0506 	ands.w	r5, r5, #6
 800b844:	d106      	bne.n	800b854 <_printf_common+0x48>
 800b846:	f104 0a19 	add.w	sl, r4, #25
 800b84a:	68e3      	ldr	r3, [r4, #12]
 800b84c:	6832      	ldr	r2, [r6, #0]
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	42ab      	cmp	r3, r5
 800b852:	dc26      	bgt.n	800b8a2 <_printf_common+0x96>
 800b854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b858:	1e13      	subs	r3, r2, #0
 800b85a:	6822      	ldr	r2, [r4, #0]
 800b85c:	bf18      	it	ne
 800b85e:	2301      	movne	r3, #1
 800b860:	0692      	lsls	r2, r2, #26
 800b862:	d42b      	bmi.n	800b8bc <_printf_common+0xb0>
 800b864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b868:	4649      	mov	r1, r9
 800b86a:	4638      	mov	r0, r7
 800b86c:	47c0      	blx	r8
 800b86e:	3001      	adds	r0, #1
 800b870:	d01e      	beq.n	800b8b0 <_printf_common+0xa4>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	68e5      	ldr	r5, [r4, #12]
 800b876:	6832      	ldr	r2, [r6, #0]
 800b878:	f003 0306 	and.w	r3, r3, #6
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	bf08      	it	eq
 800b880:	1aad      	subeq	r5, r5, r2
 800b882:	68a3      	ldr	r3, [r4, #8]
 800b884:	6922      	ldr	r2, [r4, #16]
 800b886:	bf0c      	ite	eq
 800b888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b88c:	2500      	movne	r5, #0
 800b88e:	4293      	cmp	r3, r2
 800b890:	bfc4      	itt	gt
 800b892:	1a9b      	subgt	r3, r3, r2
 800b894:	18ed      	addgt	r5, r5, r3
 800b896:	2600      	movs	r6, #0
 800b898:	341a      	adds	r4, #26
 800b89a:	42b5      	cmp	r5, r6
 800b89c:	d11a      	bne.n	800b8d4 <_printf_common+0xc8>
 800b89e:	2000      	movs	r0, #0
 800b8a0:	e008      	b.n	800b8b4 <_printf_common+0xa8>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4652      	mov	r2, sl
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	47c0      	blx	r8
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	d103      	bne.n	800b8b8 <_printf_common+0xac>
 800b8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b8:	3501      	adds	r5, #1
 800b8ba:	e7c6      	b.n	800b84a <_printf_common+0x3e>
 800b8bc:	18e1      	adds	r1, r4, r3
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	2030      	movs	r0, #48	; 0x30
 800b8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8c6:	4422      	add	r2, r4
 800b8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8d0:	3302      	adds	r3, #2
 800b8d2:	e7c7      	b.n	800b864 <_printf_common+0x58>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4638      	mov	r0, r7
 800b8dc:	47c0      	blx	r8
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d0e6      	beq.n	800b8b0 <_printf_common+0xa4>
 800b8e2:	3601      	adds	r6, #1
 800b8e4:	e7d9      	b.n	800b89a <_printf_common+0x8e>
	...

0800b8e8 <_printf_i>:
 800b8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ec:	7e0f      	ldrb	r7, [r1, #24]
 800b8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8f0:	2f78      	cmp	r7, #120	; 0x78
 800b8f2:	4691      	mov	r9, r2
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	469a      	mov	sl, r3
 800b8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8fe:	d807      	bhi.n	800b910 <_printf_i+0x28>
 800b900:	2f62      	cmp	r7, #98	; 0x62
 800b902:	d80a      	bhi.n	800b91a <_printf_i+0x32>
 800b904:	2f00      	cmp	r7, #0
 800b906:	f000 80d8 	beq.w	800baba <_printf_i+0x1d2>
 800b90a:	2f58      	cmp	r7, #88	; 0x58
 800b90c:	f000 80a3 	beq.w	800ba56 <_printf_i+0x16e>
 800b910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b918:	e03a      	b.n	800b990 <_printf_i+0xa8>
 800b91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b91e:	2b15      	cmp	r3, #21
 800b920:	d8f6      	bhi.n	800b910 <_printf_i+0x28>
 800b922:	a101      	add	r1, pc, #4	; (adr r1, 800b928 <_printf_i+0x40>)
 800b924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b928:	0800b981 	.word	0x0800b981
 800b92c:	0800b995 	.word	0x0800b995
 800b930:	0800b911 	.word	0x0800b911
 800b934:	0800b911 	.word	0x0800b911
 800b938:	0800b911 	.word	0x0800b911
 800b93c:	0800b911 	.word	0x0800b911
 800b940:	0800b995 	.word	0x0800b995
 800b944:	0800b911 	.word	0x0800b911
 800b948:	0800b911 	.word	0x0800b911
 800b94c:	0800b911 	.word	0x0800b911
 800b950:	0800b911 	.word	0x0800b911
 800b954:	0800baa1 	.word	0x0800baa1
 800b958:	0800b9c5 	.word	0x0800b9c5
 800b95c:	0800ba83 	.word	0x0800ba83
 800b960:	0800b911 	.word	0x0800b911
 800b964:	0800b911 	.word	0x0800b911
 800b968:	0800bac3 	.word	0x0800bac3
 800b96c:	0800b911 	.word	0x0800b911
 800b970:	0800b9c5 	.word	0x0800b9c5
 800b974:	0800b911 	.word	0x0800b911
 800b978:	0800b911 	.word	0x0800b911
 800b97c:	0800ba8b 	.word	0x0800ba8b
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	1d1a      	adds	r2, r3, #4
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	602a      	str	r2, [r5, #0]
 800b988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b990:	2301      	movs	r3, #1
 800b992:	e0a3      	b.n	800badc <_printf_i+0x1f4>
 800b994:	6820      	ldr	r0, [r4, #0]
 800b996:	6829      	ldr	r1, [r5, #0]
 800b998:	0606      	lsls	r6, r0, #24
 800b99a:	f101 0304 	add.w	r3, r1, #4
 800b99e:	d50a      	bpl.n	800b9b6 <_printf_i+0xce>
 800b9a0:	680e      	ldr	r6, [r1, #0]
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	2e00      	cmp	r6, #0
 800b9a6:	da03      	bge.n	800b9b0 <_printf_i+0xc8>
 800b9a8:	232d      	movs	r3, #45	; 0x2d
 800b9aa:	4276      	negs	r6, r6
 800b9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9b0:	485e      	ldr	r0, [pc, #376]	; (800bb2c <_printf_i+0x244>)
 800b9b2:	230a      	movs	r3, #10
 800b9b4:	e019      	b.n	800b9ea <_printf_i+0x102>
 800b9b6:	680e      	ldr	r6, [r1, #0]
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9be:	bf18      	it	ne
 800b9c0:	b236      	sxthne	r6, r6
 800b9c2:	e7ef      	b.n	800b9a4 <_printf_i+0xbc>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	1d19      	adds	r1, r3, #4
 800b9ca:	6029      	str	r1, [r5, #0]
 800b9cc:	0601      	lsls	r1, r0, #24
 800b9ce:	d501      	bpl.n	800b9d4 <_printf_i+0xec>
 800b9d0:	681e      	ldr	r6, [r3, #0]
 800b9d2:	e002      	b.n	800b9da <_printf_i+0xf2>
 800b9d4:	0646      	lsls	r6, r0, #25
 800b9d6:	d5fb      	bpl.n	800b9d0 <_printf_i+0xe8>
 800b9d8:	881e      	ldrh	r6, [r3, #0]
 800b9da:	4854      	ldr	r0, [pc, #336]	; (800bb2c <_printf_i+0x244>)
 800b9dc:	2f6f      	cmp	r7, #111	; 0x6f
 800b9de:	bf0c      	ite	eq
 800b9e0:	2308      	moveq	r3, #8
 800b9e2:	230a      	movne	r3, #10
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9ea:	6865      	ldr	r5, [r4, #4]
 800b9ec:	60a5      	str	r5, [r4, #8]
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	bfa2      	ittt	ge
 800b9f2:	6821      	ldrge	r1, [r4, #0]
 800b9f4:	f021 0104 	bicge.w	r1, r1, #4
 800b9f8:	6021      	strge	r1, [r4, #0]
 800b9fa:	b90e      	cbnz	r6, 800ba00 <_printf_i+0x118>
 800b9fc:	2d00      	cmp	r5, #0
 800b9fe:	d04d      	beq.n	800ba9c <_printf_i+0x1b4>
 800ba00:	4615      	mov	r5, r2
 800ba02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba06:	fb03 6711 	mls	r7, r3, r1, r6
 800ba0a:	5dc7      	ldrb	r7, [r0, r7]
 800ba0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba10:	4637      	mov	r7, r6
 800ba12:	42bb      	cmp	r3, r7
 800ba14:	460e      	mov	r6, r1
 800ba16:	d9f4      	bls.n	800ba02 <_printf_i+0x11a>
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	d10b      	bne.n	800ba34 <_printf_i+0x14c>
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	07de      	lsls	r6, r3, #31
 800ba20:	d508      	bpl.n	800ba34 <_printf_i+0x14c>
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	6861      	ldr	r1, [r4, #4]
 800ba26:	4299      	cmp	r1, r3
 800ba28:	bfde      	ittt	le
 800ba2a:	2330      	movle	r3, #48	; 0x30
 800ba2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba34:	1b52      	subs	r2, r2, r5
 800ba36:	6122      	str	r2, [r4, #16]
 800ba38:	f8cd a000 	str.w	sl, [sp]
 800ba3c:	464b      	mov	r3, r9
 800ba3e:	aa03      	add	r2, sp, #12
 800ba40:	4621      	mov	r1, r4
 800ba42:	4640      	mov	r0, r8
 800ba44:	f7ff fee2 	bl	800b80c <_printf_common>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d14c      	bne.n	800bae6 <_printf_i+0x1fe>
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	b004      	add	sp, #16
 800ba52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba56:	4835      	ldr	r0, [pc, #212]	; (800bb2c <_printf_i+0x244>)
 800ba58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba5c:	6829      	ldr	r1, [r5, #0]
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba64:	6029      	str	r1, [r5, #0]
 800ba66:	061d      	lsls	r5, r3, #24
 800ba68:	d514      	bpl.n	800ba94 <_printf_i+0x1ac>
 800ba6a:	07df      	lsls	r7, r3, #31
 800ba6c:	bf44      	itt	mi
 800ba6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba72:	6023      	strmi	r3, [r4, #0]
 800ba74:	b91e      	cbnz	r6, 800ba7e <_printf_i+0x196>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	f023 0320 	bic.w	r3, r3, #32
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	2310      	movs	r3, #16
 800ba80:	e7b0      	b.n	800b9e4 <_printf_i+0xfc>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	f043 0320 	orr.w	r3, r3, #32
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	2378      	movs	r3, #120	; 0x78
 800ba8c:	4828      	ldr	r0, [pc, #160]	; (800bb30 <_printf_i+0x248>)
 800ba8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba92:	e7e3      	b.n	800ba5c <_printf_i+0x174>
 800ba94:	0659      	lsls	r1, r3, #25
 800ba96:	bf48      	it	mi
 800ba98:	b2b6      	uxthmi	r6, r6
 800ba9a:	e7e6      	b.n	800ba6a <_printf_i+0x182>
 800ba9c:	4615      	mov	r5, r2
 800ba9e:	e7bb      	b.n	800ba18 <_printf_i+0x130>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	6826      	ldr	r6, [r4, #0]
 800baa4:	6961      	ldr	r1, [r4, #20]
 800baa6:	1d18      	adds	r0, r3, #4
 800baa8:	6028      	str	r0, [r5, #0]
 800baaa:	0635      	lsls	r5, r6, #24
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	d501      	bpl.n	800bab4 <_printf_i+0x1cc>
 800bab0:	6019      	str	r1, [r3, #0]
 800bab2:	e002      	b.n	800baba <_printf_i+0x1d2>
 800bab4:	0670      	lsls	r0, r6, #25
 800bab6:	d5fb      	bpl.n	800bab0 <_printf_i+0x1c8>
 800bab8:	8019      	strh	r1, [r3, #0]
 800baba:	2300      	movs	r3, #0
 800babc:	6123      	str	r3, [r4, #16]
 800babe:	4615      	mov	r5, r2
 800bac0:	e7ba      	b.n	800ba38 <_printf_i+0x150>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	1d1a      	adds	r2, r3, #4
 800bac6:	602a      	str	r2, [r5, #0]
 800bac8:	681d      	ldr	r5, [r3, #0]
 800baca:	6862      	ldr	r2, [r4, #4]
 800bacc:	2100      	movs	r1, #0
 800bace:	4628      	mov	r0, r5
 800bad0:	f7f4 fc0e 	bl	80002f0 <memchr>
 800bad4:	b108      	cbz	r0, 800bada <_printf_i+0x1f2>
 800bad6:	1b40      	subs	r0, r0, r5
 800bad8:	6060      	str	r0, [r4, #4]
 800bada:	6863      	ldr	r3, [r4, #4]
 800badc:	6123      	str	r3, [r4, #16]
 800bade:	2300      	movs	r3, #0
 800bae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bae4:	e7a8      	b.n	800ba38 <_printf_i+0x150>
 800bae6:	6923      	ldr	r3, [r4, #16]
 800bae8:	462a      	mov	r2, r5
 800baea:	4649      	mov	r1, r9
 800baec:	4640      	mov	r0, r8
 800baee:	47d0      	blx	sl
 800baf0:	3001      	adds	r0, #1
 800baf2:	d0ab      	beq.n	800ba4c <_printf_i+0x164>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	079b      	lsls	r3, r3, #30
 800baf8:	d413      	bmi.n	800bb22 <_printf_i+0x23a>
 800bafa:	68e0      	ldr	r0, [r4, #12]
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	4298      	cmp	r0, r3
 800bb00:	bfb8      	it	lt
 800bb02:	4618      	movlt	r0, r3
 800bb04:	e7a4      	b.n	800ba50 <_printf_i+0x168>
 800bb06:	2301      	movs	r3, #1
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	47d0      	blx	sl
 800bb10:	3001      	adds	r0, #1
 800bb12:	d09b      	beq.n	800ba4c <_printf_i+0x164>
 800bb14:	3501      	adds	r5, #1
 800bb16:	68e3      	ldr	r3, [r4, #12]
 800bb18:	9903      	ldr	r1, [sp, #12]
 800bb1a:	1a5b      	subs	r3, r3, r1
 800bb1c:	42ab      	cmp	r3, r5
 800bb1e:	dcf2      	bgt.n	800bb06 <_printf_i+0x21e>
 800bb20:	e7eb      	b.n	800bafa <_printf_i+0x212>
 800bb22:	2500      	movs	r5, #0
 800bb24:	f104 0619 	add.w	r6, r4, #25
 800bb28:	e7f5      	b.n	800bb16 <_printf_i+0x22e>
 800bb2a:	bf00      	nop
 800bb2c:	0800fe12 	.word	0x0800fe12
 800bb30:	0800fe23 	.word	0x0800fe23

0800bb34 <iprintf>:
 800bb34:	b40f      	push	{r0, r1, r2, r3}
 800bb36:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <iprintf+0x2c>)
 800bb38:	b513      	push	{r0, r1, r4, lr}
 800bb3a:	681c      	ldr	r4, [r3, #0]
 800bb3c:	b124      	cbz	r4, 800bb48 <iprintf+0x14>
 800bb3e:	69a3      	ldr	r3, [r4, #24]
 800bb40:	b913      	cbnz	r3, 800bb48 <iprintf+0x14>
 800bb42:	4620      	mov	r0, r4
 800bb44:	f001 f858 	bl	800cbf8 <__sinit>
 800bb48:	ab05      	add	r3, sp, #20
 800bb4a:	9a04      	ldr	r2, [sp, #16]
 800bb4c:	68a1      	ldr	r1, [r4, #8]
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	4620      	mov	r0, r4
 800bb52:	f001 fe15 	bl	800d780 <_vfiprintf_r>
 800bb56:	b002      	add	sp, #8
 800bb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb5c:	b004      	add	sp, #16
 800bb5e:	4770      	bx	lr
 800bb60:	24000034 	.word	0x24000034

0800bb64 <_puts_r>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	460e      	mov	r6, r1
 800bb68:	4605      	mov	r5, r0
 800bb6a:	b118      	cbz	r0, 800bb74 <_puts_r+0x10>
 800bb6c:	6983      	ldr	r3, [r0, #24]
 800bb6e:	b90b      	cbnz	r3, 800bb74 <_puts_r+0x10>
 800bb70:	f001 f842 	bl	800cbf8 <__sinit>
 800bb74:	69ab      	ldr	r3, [r5, #24]
 800bb76:	68ac      	ldr	r4, [r5, #8]
 800bb78:	b913      	cbnz	r3, 800bb80 <_puts_r+0x1c>
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f001 f83c 	bl	800cbf8 <__sinit>
 800bb80:	4b2c      	ldr	r3, [pc, #176]	; (800bc34 <_puts_r+0xd0>)
 800bb82:	429c      	cmp	r4, r3
 800bb84:	d120      	bne.n	800bbc8 <_puts_r+0x64>
 800bb86:	686c      	ldr	r4, [r5, #4]
 800bb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb8a:	07db      	lsls	r3, r3, #31
 800bb8c:	d405      	bmi.n	800bb9a <_puts_r+0x36>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	0598      	lsls	r0, r3, #22
 800bb92:	d402      	bmi.n	800bb9a <_puts_r+0x36>
 800bb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb96:	f001 f8d2 	bl	800cd3e <__retarget_lock_acquire_recursive>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	0719      	lsls	r1, r3, #28
 800bb9e:	d51d      	bpl.n	800bbdc <_puts_r+0x78>
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	b1db      	cbz	r3, 800bbdc <_puts_r+0x78>
 800bba4:	3e01      	subs	r6, #1
 800bba6:	68a3      	ldr	r3, [r4, #8]
 800bba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbac:	3b01      	subs	r3, #1
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	bb39      	cbnz	r1, 800bc02 <_puts_r+0x9e>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da38      	bge.n	800bc28 <_puts_r+0xc4>
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	210a      	movs	r1, #10
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f000 f848 	bl	800bc50 <__swbuf_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d011      	beq.n	800bbe8 <_puts_r+0x84>
 800bbc4:	250a      	movs	r5, #10
 800bbc6:	e011      	b.n	800bbec <_puts_r+0x88>
 800bbc8:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <_puts_r+0xd4>)
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d101      	bne.n	800bbd2 <_puts_r+0x6e>
 800bbce:	68ac      	ldr	r4, [r5, #8]
 800bbd0:	e7da      	b.n	800bb88 <_puts_r+0x24>
 800bbd2:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <_puts_r+0xd8>)
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	bf08      	it	eq
 800bbd8:	68ec      	ldreq	r4, [r5, #12]
 800bbda:	e7d5      	b.n	800bb88 <_puts_r+0x24>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 f888 	bl	800bcf4 <__swsetup_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d0dd      	beq.n	800bba4 <_puts_r+0x40>
 800bbe8:	f04f 35ff 	mov.w	r5, #4294967295
 800bbec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbee:	07da      	lsls	r2, r3, #31
 800bbf0:	d405      	bmi.n	800bbfe <_puts_r+0x9a>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	059b      	lsls	r3, r3, #22
 800bbf6:	d402      	bmi.n	800bbfe <_puts_r+0x9a>
 800bbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbfa:	f001 f8a1 	bl	800cd40 <__retarget_lock_release_recursive>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	bd70      	pop	{r4, r5, r6, pc}
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da04      	bge.n	800bc10 <_puts_r+0xac>
 800bc06:	69a2      	ldr	r2, [r4, #24]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	dc06      	bgt.n	800bc1a <_puts_r+0xb6>
 800bc0c:	290a      	cmp	r1, #10
 800bc0e:	d004      	beq.n	800bc1a <_puts_r+0xb6>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	6022      	str	r2, [r4, #0]
 800bc16:	7019      	strb	r1, [r3, #0]
 800bc18:	e7c5      	b.n	800bba6 <_puts_r+0x42>
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f000 f817 	bl	800bc50 <__swbuf_r>
 800bc22:	3001      	adds	r0, #1
 800bc24:	d1bf      	bne.n	800bba6 <_puts_r+0x42>
 800bc26:	e7df      	b.n	800bbe8 <_puts_r+0x84>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	250a      	movs	r5, #10
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	6022      	str	r2, [r4, #0]
 800bc30:	701d      	strb	r5, [r3, #0]
 800bc32:	e7db      	b.n	800bbec <_puts_r+0x88>
 800bc34:	0800fee4 	.word	0x0800fee4
 800bc38:	0800ff04 	.word	0x0800ff04
 800bc3c:	0800fec4 	.word	0x0800fec4

0800bc40 <puts>:
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <puts+0xc>)
 800bc42:	4601      	mov	r1, r0
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f7ff bf8d 	b.w	800bb64 <_puts_r>
 800bc4a:	bf00      	nop
 800bc4c:	24000034 	.word	0x24000034

0800bc50 <__swbuf_r>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	460e      	mov	r6, r1
 800bc54:	4614      	mov	r4, r2
 800bc56:	4605      	mov	r5, r0
 800bc58:	b118      	cbz	r0, 800bc62 <__swbuf_r+0x12>
 800bc5a:	6983      	ldr	r3, [r0, #24]
 800bc5c:	b90b      	cbnz	r3, 800bc62 <__swbuf_r+0x12>
 800bc5e:	f000 ffcb 	bl	800cbf8 <__sinit>
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <__swbuf_r+0x98>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	d12b      	bne.n	800bcc0 <__swbuf_r+0x70>
 800bc68:	686c      	ldr	r4, [r5, #4]
 800bc6a:	69a3      	ldr	r3, [r4, #24]
 800bc6c:	60a3      	str	r3, [r4, #8]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	071a      	lsls	r2, r3, #28
 800bc72:	d52f      	bpl.n	800bcd4 <__swbuf_r+0x84>
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	b36b      	cbz	r3, 800bcd4 <__swbuf_r+0x84>
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	6820      	ldr	r0, [r4, #0]
 800bc7c:	1ac0      	subs	r0, r0, r3
 800bc7e:	6963      	ldr	r3, [r4, #20]
 800bc80:	b2f6      	uxtb	r6, r6
 800bc82:	4283      	cmp	r3, r0
 800bc84:	4637      	mov	r7, r6
 800bc86:	dc04      	bgt.n	800bc92 <__swbuf_r+0x42>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 ff20 	bl	800cad0 <_fflush_r>
 800bc90:	bb30      	cbnz	r0, 800bce0 <__swbuf_r+0x90>
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	60a3      	str	r3, [r4, #8]
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	701e      	strb	r6, [r3, #0]
 800bca0:	6963      	ldr	r3, [r4, #20]
 800bca2:	3001      	adds	r0, #1
 800bca4:	4283      	cmp	r3, r0
 800bca6:	d004      	beq.n	800bcb2 <__swbuf_r+0x62>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	07db      	lsls	r3, r3, #31
 800bcac:	d506      	bpl.n	800bcbc <__swbuf_r+0x6c>
 800bcae:	2e0a      	cmp	r6, #10
 800bcb0:	d104      	bne.n	800bcbc <__swbuf_r+0x6c>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f000 ff0b 	bl	800cad0 <_fflush_r>
 800bcba:	b988      	cbnz	r0, 800bce0 <__swbuf_r+0x90>
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <__swbuf_r+0x9c>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d101      	bne.n	800bcca <__swbuf_r+0x7a>
 800bcc6:	68ac      	ldr	r4, [r5, #8]
 800bcc8:	e7cf      	b.n	800bc6a <__swbuf_r+0x1a>
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <__swbuf_r+0xa0>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	bf08      	it	eq
 800bcd0:	68ec      	ldreq	r4, [r5, #12]
 800bcd2:	e7ca      	b.n	800bc6a <__swbuf_r+0x1a>
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f000 f80c 	bl	800bcf4 <__swsetup_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d0cb      	beq.n	800bc78 <__swbuf_r+0x28>
 800bce0:	f04f 37ff 	mov.w	r7, #4294967295
 800bce4:	e7ea      	b.n	800bcbc <__swbuf_r+0x6c>
 800bce6:	bf00      	nop
 800bce8:	0800fee4 	.word	0x0800fee4
 800bcec:	0800ff04 	.word	0x0800ff04
 800bcf0:	0800fec4 	.word	0x0800fec4

0800bcf4 <__swsetup_r>:
 800bcf4:	4b32      	ldr	r3, [pc, #200]	; (800bdc0 <__swsetup_r+0xcc>)
 800bcf6:	b570      	push	{r4, r5, r6, lr}
 800bcf8:	681d      	ldr	r5, [r3, #0]
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	b125      	cbz	r5, 800bd0a <__swsetup_r+0x16>
 800bd00:	69ab      	ldr	r3, [r5, #24]
 800bd02:	b913      	cbnz	r3, 800bd0a <__swsetup_r+0x16>
 800bd04:	4628      	mov	r0, r5
 800bd06:	f000 ff77 	bl	800cbf8 <__sinit>
 800bd0a:	4b2e      	ldr	r3, [pc, #184]	; (800bdc4 <__swsetup_r+0xd0>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	d10f      	bne.n	800bd30 <__swsetup_r+0x3c>
 800bd10:	686c      	ldr	r4, [r5, #4]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd18:	0719      	lsls	r1, r3, #28
 800bd1a:	d42c      	bmi.n	800bd76 <__swsetup_r+0x82>
 800bd1c:	06dd      	lsls	r5, r3, #27
 800bd1e:	d411      	bmi.n	800bd44 <__swsetup_r+0x50>
 800bd20:	2309      	movs	r3, #9
 800bd22:	6033      	str	r3, [r6, #0]
 800bd24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	e03e      	b.n	800bdae <__swsetup_r+0xba>
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <__swsetup_r+0xd4>)
 800bd32:	429c      	cmp	r4, r3
 800bd34:	d101      	bne.n	800bd3a <__swsetup_r+0x46>
 800bd36:	68ac      	ldr	r4, [r5, #8]
 800bd38:	e7eb      	b.n	800bd12 <__swsetup_r+0x1e>
 800bd3a:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <__swsetup_r+0xd8>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	bf08      	it	eq
 800bd40:	68ec      	ldreq	r4, [r5, #12]
 800bd42:	e7e6      	b.n	800bd12 <__swsetup_r+0x1e>
 800bd44:	0758      	lsls	r0, r3, #29
 800bd46:	d512      	bpl.n	800bd6e <__swsetup_r+0x7a>
 800bd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd4a:	b141      	cbz	r1, 800bd5e <__swsetup_r+0x6a>
 800bd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd50:	4299      	cmp	r1, r3
 800bd52:	d002      	beq.n	800bd5a <__swsetup_r+0x66>
 800bd54:	4630      	mov	r0, r6
 800bd56:	f001 fc09 	bl	800d56c <_free_r>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	2300      	movs	r3, #0
 800bd68:	6063      	str	r3, [r4, #4]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f043 0308 	orr.w	r3, r3, #8
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	6923      	ldr	r3, [r4, #16]
 800bd78:	b94b      	cbnz	r3, 800bd8e <__swsetup_r+0x9a>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd84:	d003      	beq.n	800bd8e <__swsetup_r+0x9a>
 800bd86:	4621      	mov	r1, r4
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f000 ffff 	bl	800cd8c <__smakebuf_r>
 800bd8e:	89a0      	ldrh	r0, [r4, #12]
 800bd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd94:	f010 0301 	ands.w	r3, r0, #1
 800bd98:	d00a      	beq.n	800bdb0 <__swsetup_r+0xbc>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60a3      	str	r3, [r4, #8]
 800bd9e:	6963      	ldr	r3, [r4, #20]
 800bda0:	425b      	negs	r3, r3
 800bda2:	61a3      	str	r3, [r4, #24]
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	b943      	cbnz	r3, 800bdba <__swsetup_r+0xc6>
 800bda8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdac:	d1ba      	bne.n	800bd24 <__swsetup_r+0x30>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	0781      	lsls	r1, r0, #30
 800bdb2:	bf58      	it	pl
 800bdb4:	6963      	ldrpl	r3, [r4, #20]
 800bdb6:	60a3      	str	r3, [r4, #8]
 800bdb8:	e7f4      	b.n	800bda4 <__swsetup_r+0xb0>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e7f7      	b.n	800bdae <__swsetup_r+0xba>
 800bdbe:	bf00      	nop
 800bdc0:	24000034 	.word	0x24000034
 800bdc4:	0800fee4 	.word	0x0800fee4
 800bdc8:	0800ff04 	.word	0x0800ff04
 800bdcc:	0800fec4 	.word	0x0800fec4

0800bdd0 <quorem>:
 800bdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	6903      	ldr	r3, [r0, #16]
 800bdd6:	690c      	ldr	r4, [r1, #16]
 800bdd8:	42a3      	cmp	r3, r4
 800bdda:	4607      	mov	r7, r0
 800bddc:	f2c0 8081 	blt.w	800bee2 <quorem+0x112>
 800bde0:	3c01      	subs	r4, #1
 800bde2:	f101 0814 	add.w	r8, r1, #20
 800bde6:	f100 0514 	add.w	r5, r0, #20
 800bdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be04:	fbb2 f6f3 	udiv	r6, r2, r3
 800be08:	d331      	bcc.n	800be6e <quorem+0x9e>
 800be0a:	f04f 0e00 	mov.w	lr, #0
 800be0e:	4640      	mov	r0, r8
 800be10:	46ac      	mov	ip, r5
 800be12:	46f2      	mov	sl, lr
 800be14:	f850 2b04 	ldr.w	r2, [r0], #4
 800be18:	b293      	uxth	r3, r2
 800be1a:	fb06 e303 	mla	r3, r6, r3, lr
 800be1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be22:	b29b      	uxth	r3, r3
 800be24:	ebaa 0303 	sub.w	r3, sl, r3
 800be28:	f8dc a000 	ldr.w	sl, [ip]
 800be2c:	0c12      	lsrs	r2, r2, #16
 800be2e:	fa13 f38a 	uxtah	r3, r3, sl
 800be32:	fb06 e202 	mla	r2, r6, r2, lr
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	9b00      	ldr	r3, [sp, #0]
 800be3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be3e:	b292      	uxth	r2, r2
 800be40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be48:	f8bd 3000 	ldrh.w	r3, [sp]
 800be4c:	4581      	cmp	r9, r0
 800be4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be52:	f84c 3b04 	str.w	r3, [ip], #4
 800be56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be5a:	d2db      	bcs.n	800be14 <quorem+0x44>
 800be5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800be60:	b92b      	cbnz	r3, 800be6e <quorem+0x9e>
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	3b04      	subs	r3, #4
 800be66:	429d      	cmp	r5, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	d32e      	bcc.n	800beca <quorem+0xfa>
 800be6c:	613c      	str	r4, [r7, #16]
 800be6e:	4638      	mov	r0, r7
 800be70:	f001 fa64 	bl	800d33c <__mcmp>
 800be74:	2800      	cmp	r0, #0
 800be76:	db24      	blt.n	800bec2 <quorem+0xf2>
 800be78:	3601      	adds	r6, #1
 800be7a:	4628      	mov	r0, r5
 800be7c:	f04f 0c00 	mov.w	ip, #0
 800be80:	f858 2b04 	ldr.w	r2, [r8], #4
 800be84:	f8d0 e000 	ldr.w	lr, [r0]
 800be88:	b293      	uxth	r3, r2
 800be8a:	ebac 0303 	sub.w	r3, ip, r3
 800be8e:	0c12      	lsrs	r2, r2, #16
 800be90:	fa13 f38e 	uxtah	r3, r3, lr
 800be94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bea2:	45c1      	cmp	r9, r8
 800bea4:	f840 3b04 	str.w	r3, [r0], #4
 800bea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800beac:	d2e8      	bcs.n	800be80 <quorem+0xb0>
 800beae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beb6:	b922      	cbnz	r2, 800bec2 <quorem+0xf2>
 800beb8:	3b04      	subs	r3, #4
 800beba:	429d      	cmp	r5, r3
 800bebc:	461a      	mov	r2, r3
 800bebe:	d30a      	bcc.n	800bed6 <quorem+0x106>
 800bec0:	613c      	str	r4, [r7, #16]
 800bec2:	4630      	mov	r0, r6
 800bec4:	b003      	add	sp, #12
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	3b04      	subs	r3, #4
 800bece:	2a00      	cmp	r2, #0
 800bed0:	d1cc      	bne.n	800be6c <quorem+0x9c>
 800bed2:	3c01      	subs	r4, #1
 800bed4:	e7c7      	b.n	800be66 <quorem+0x96>
 800bed6:	6812      	ldr	r2, [r2, #0]
 800bed8:	3b04      	subs	r3, #4
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d1f0      	bne.n	800bec0 <quorem+0xf0>
 800bede:	3c01      	subs	r4, #1
 800bee0:	e7eb      	b.n	800beba <quorem+0xea>
 800bee2:	2000      	movs	r0, #0
 800bee4:	e7ee      	b.n	800bec4 <quorem+0xf4>
	...

0800bee8 <_dtoa_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ed2d 8b02 	vpush	{d8}
 800bef0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bef2:	b091      	sub	sp, #68	; 0x44
 800bef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bef8:	ec59 8b10 	vmov	r8, r9, d0
 800befc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800befe:	9106      	str	r1, [sp, #24]
 800bf00:	4606      	mov	r6, r0
 800bf02:	9208      	str	r2, [sp, #32]
 800bf04:	930c      	str	r3, [sp, #48]	; 0x30
 800bf06:	b975      	cbnz	r5, 800bf26 <_dtoa_r+0x3e>
 800bf08:	2010      	movs	r0, #16
 800bf0a:	f000 ff7f 	bl	800ce0c <malloc>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	6270      	str	r0, [r6, #36]	; 0x24
 800bf12:	b920      	cbnz	r0, 800bf1e <_dtoa_r+0x36>
 800bf14:	4baa      	ldr	r3, [pc, #680]	; (800c1c0 <_dtoa_r+0x2d8>)
 800bf16:	21ea      	movs	r1, #234	; 0xea
 800bf18:	48aa      	ldr	r0, [pc, #680]	; (800c1c4 <_dtoa_r+0x2dc>)
 800bf1a:	f001 fdc7 	bl	800daac <__assert_func>
 800bf1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf22:	6005      	str	r5, [r0, #0]
 800bf24:	60c5      	str	r5, [r0, #12]
 800bf26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf28:	6819      	ldr	r1, [r3, #0]
 800bf2a:	b151      	cbz	r1, 800bf42 <_dtoa_r+0x5a>
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	604a      	str	r2, [r1, #4]
 800bf30:	2301      	movs	r3, #1
 800bf32:	4093      	lsls	r3, r2
 800bf34:	608b      	str	r3, [r1, #8]
 800bf36:	4630      	mov	r0, r6
 800bf38:	f000 ffbe 	bl	800ceb8 <_Bfree>
 800bf3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f1b9 0300 	subs.w	r3, r9, #0
 800bf46:	bfbb      	ittet	lt
 800bf48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf4c:	9303      	strlt	r3, [sp, #12]
 800bf4e:	2300      	movge	r3, #0
 800bf50:	2201      	movlt	r2, #1
 800bf52:	bfac      	ite	ge
 800bf54:	6023      	strge	r3, [r4, #0]
 800bf56:	6022      	strlt	r2, [r4, #0]
 800bf58:	4b9b      	ldr	r3, [pc, #620]	; (800c1c8 <_dtoa_r+0x2e0>)
 800bf5a:	9c03      	ldr	r4, [sp, #12]
 800bf5c:	43a3      	bics	r3, r4
 800bf5e:	d11c      	bne.n	800bf9a <_dtoa_r+0xb2>
 800bf60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf62:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bf6c:	ea53 0308 	orrs.w	r3, r3, r8
 800bf70:	f000 84fd 	beq.w	800c96e <_dtoa_r+0xa86>
 800bf74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf76:	b963      	cbnz	r3, 800bf92 <_dtoa_r+0xaa>
 800bf78:	4b94      	ldr	r3, [pc, #592]	; (800c1cc <_dtoa_r+0x2e4>)
 800bf7a:	e01f      	b.n	800bfbc <_dtoa_r+0xd4>
 800bf7c:	4b94      	ldr	r3, [pc, #592]	; (800c1d0 <_dtoa_r+0x2e8>)
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	3308      	adds	r3, #8
 800bf82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	9801      	ldr	r0, [sp, #4]
 800bf88:	b011      	add	sp, #68	; 0x44
 800bf8a:	ecbd 8b02 	vpop	{d8}
 800bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf92:	4b8e      	ldr	r3, [pc, #568]	; (800c1cc <_dtoa_r+0x2e4>)
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	3303      	adds	r3, #3
 800bf98:	e7f3      	b.n	800bf82 <_dtoa_r+0x9a>
 800bf9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bf9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa6:	d10b      	bne.n	800bfc0 <_dtoa_r+0xd8>
 800bfa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfaa:	2301      	movs	r3, #1
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 84d9 	beq.w	800c968 <_dtoa_r+0xa80>
 800bfb6:	4887      	ldr	r0, [pc, #540]	; (800c1d4 <_dtoa_r+0x2ec>)
 800bfb8:	6018      	str	r0, [r3, #0]
 800bfba:	1e43      	subs	r3, r0, #1
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	e7e2      	b.n	800bf86 <_dtoa_r+0x9e>
 800bfc0:	a90f      	add	r1, sp, #60	; 0x3c
 800bfc2:	aa0e      	add	r2, sp, #56	; 0x38
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	eeb0 0b48 	vmov.f64	d0, d8
 800bfca:	f001 fa5d 	bl	800d488 <__d2b>
 800bfce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bfd6:	2900      	cmp	r1, #0
 800bfd8:	d046      	beq.n	800c068 <_dtoa_r+0x180>
 800bfda:	ee18 4a90 	vmov	r4, s17
 800bfde:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bfe2:	ec53 2b18 	vmov	r2, r3, d8
 800bfe6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bfea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bff2:	2400      	movs	r4, #0
 800bff4:	ec43 2b16 	vmov	d6, r2, r3
 800bff8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bffc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c1a8 <_dtoa_r+0x2c0>
 800c000:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c004:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c1b0 <_dtoa_r+0x2c8>
 800c008:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c00c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c1b8 <_dtoa_r+0x2d0>
 800c010:	ee07 1a90 	vmov	s15, r1
 800c014:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c018:	eeb0 7b46 	vmov.f64	d7, d6
 800c01c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c020:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c024:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02c:	ee16 ba90 	vmov	fp, s13
 800c030:	940a      	str	r4, [sp, #40]	; 0x28
 800c032:	d508      	bpl.n	800c046 <_dtoa_r+0x15e>
 800c034:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c038:	eeb4 6b47 	vcmp.f64	d6, d7
 800c03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c040:	bf18      	it	ne
 800c042:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c046:	f1bb 0f16 	cmp.w	fp, #22
 800c04a:	d82f      	bhi.n	800c0ac <_dtoa_r+0x1c4>
 800c04c:	4b62      	ldr	r3, [pc, #392]	; (800c1d8 <_dtoa_r+0x2f0>)
 800c04e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c052:	ed93 7b00 	vldr	d7, [r3]
 800c056:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	d501      	bpl.n	800c064 <_dtoa_r+0x17c>
 800c060:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c064:	2300      	movs	r3, #0
 800c066:	e022      	b.n	800c0ae <_dtoa_r+0x1c6>
 800c068:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c06a:	4401      	add	r1, r0
 800c06c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c070:	2b20      	cmp	r3, #32
 800c072:	bfc1      	itttt	gt
 800c074:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c078:	fa04 f303 	lslgt.w	r3, r4, r3
 800c07c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c080:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c084:	bfd6      	itet	le
 800c086:	f1c3 0320 	rsble	r3, r3, #32
 800c08a:	ea43 0808 	orrgt.w	r8, r3, r8
 800c08e:	fa08 f803 	lslle.w	r8, r8, r3
 800c092:	ee07 8a90 	vmov	s15, r8
 800c096:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c09a:	3901      	subs	r1, #1
 800c09c:	ee17 4a90 	vmov	r4, s15
 800c0a0:	ec53 2b17 	vmov	r2, r3, d7
 800c0a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c0a8:	2401      	movs	r4, #1
 800c0aa:	e7a3      	b.n	800bff4 <_dtoa_r+0x10c>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0b0:	1a43      	subs	r3, r0, r1
 800c0b2:	1e5a      	subs	r2, r3, #1
 800c0b4:	bf45      	ittet	mi
 800c0b6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c0ba:	9304      	strmi	r3, [sp, #16]
 800c0bc:	2300      	movpl	r3, #0
 800c0be:	2300      	movmi	r3, #0
 800c0c0:	9205      	str	r2, [sp, #20]
 800c0c2:	bf54      	ite	pl
 800c0c4:	9304      	strpl	r3, [sp, #16]
 800c0c6:	9305      	strmi	r3, [sp, #20]
 800c0c8:	f1bb 0f00 	cmp.w	fp, #0
 800c0cc:	db18      	blt.n	800c100 <_dtoa_r+0x218>
 800c0ce:	9b05      	ldr	r3, [sp, #20]
 800c0d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c0d4:	445b      	add	r3, fp
 800c0d6:	9305      	str	r3, [sp, #20]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9a06      	ldr	r2, [sp, #24]
 800c0dc:	2a09      	cmp	r2, #9
 800c0de:	d849      	bhi.n	800c174 <_dtoa_r+0x28c>
 800c0e0:	2a05      	cmp	r2, #5
 800c0e2:	bfc4      	itt	gt
 800c0e4:	3a04      	subgt	r2, #4
 800c0e6:	9206      	strgt	r2, [sp, #24]
 800c0e8:	9a06      	ldr	r2, [sp, #24]
 800c0ea:	f1a2 0202 	sub.w	r2, r2, #2
 800c0ee:	bfcc      	ite	gt
 800c0f0:	2400      	movgt	r4, #0
 800c0f2:	2401      	movle	r4, #1
 800c0f4:	2a03      	cmp	r2, #3
 800c0f6:	d848      	bhi.n	800c18a <_dtoa_r+0x2a2>
 800c0f8:	e8df f002 	tbb	[pc, r2]
 800c0fc:	3a2c2e0b 	.word	0x3a2c2e0b
 800c100:	9b04      	ldr	r3, [sp, #16]
 800c102:	2200      	movs	r2, #0
 800c104:	eba3 030b 	sub.w	r3, r3, fp
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	9209      	str	r2, [sp, #36]	; 0x24
 800c10c:	f1cb 0300 	rsb	r3, fp, #0
 800c110:	e7e3      	b.n	800c0da <_dtoa_r+0x1f2>
 800c112:	2200      	movs	r2, #0
 800c114:	9207      	str	r2, [sp, #28]
 800c116:	9a08      	ldr	r2, [sp, #32]
 800c118:	2a00      	cmp	r2, #0
 800c11a:	dc39      	bgt.n	800c190 <_dtoa_r+0x2a8>
 800c11c:	f04f 0a01 	mov.w	sl, #1
 800c120:	46d1      	mov	r9, sl
 800c122:	4652      	mov	r2, sl
 800c124:	f8cd a020 	str.w	sl, [sp, #32]
 800c128:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c12a:	2100      	movs	r1, #0
 800c12c:	6079      	str	r1, [r7, #4]
 800c12e:	2004      	movs	r0, #4
 800c130:	f100 0c14 	add.w	ip, r0, #20
 800c134:	4594      	cmp	ip, r2
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	d92f      	bls.n	800c19a <_dtoa_r+0x2b2>
 800c13a:	4630      	mov	r0, r6
 800c13c:	930d      	str	r3, [sp, #52]	; 0x34
 800c13e:	f000 fe7b 	bl	800ce38 <_Balloc>
 800c142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c144:	9001      	str	r0, [sp, #4]
 800c146:	4602      	mov	r2, r0
 800c148:	2800      	cmp	r0, #0
 800c14a:	d149      	bne.n	800c1e0 <_dtoa_r+0x2f8>
 800c14c:	4b23      	ldr	r3, [pc, #140]	; (800c1dc <_dtoa_r+0x2f4>)
 800c14e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c152:	e6e1      	b.n	800bf18 <_dtoa_r+0x30>
 800c154:	2201      	movs	r2, #1
 800c156:	e7dd      	b.n	800c114 <_dtoa_r+0x22c>
 800c158:	2200      	movs	r2, #0
 800c15a:	9207      	str	r2, [sp, #28]
 800c15c:	9a08      	ldr	r2, [sp, #32]
 800c15e:	eb0b 0a02 	add.w	sl, fp, r2
 800c162:	f10a 0901 	add.w	r9, sl, #1
 800c166:	464a      	mov	r2, r9
 800c168:	2a01      	cmp	r2, #1
 800c16a:	bfb8      	it	lt
 800c16c:	2201      	movlt	r2, #1
 800c16e:	e7db      	b.n	800c128 <_dtoa_r+0x240>
 800c170:	2201      	movs	r2, #1
 800c172:	e7f2      	b.n	800c15a <_dtoa_r+0x272>
 800c174:	2401      	movs	r4, #1
 800c176:	2200      	movs	r2, #0
 800c178:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c17c:	f04f 3aff 	mov.w	sl, #4294967295
 800c180:	2100      	movs	r1, #0
 800c182:	46d1      	mov	r9, sl
 800c184:	2212      	movs	r2, #18
 800c186:	9108      	str	r1, [sp, #32]
 800c188:	e7ce      	b.n	800c128 <_dtoa_r+0x240>
 800c18a:	2201      	movs	r2, #1
 800c18c:	9207      	str	r2, [sp, #28]
 800c18e:	e7f5      	b.n	800c17c <_dtoa_r+0x294>
 800c190:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c194:	46d1      	mov	r9, sl
 800c196:	4652      	mov	r2, sl
 800c198:	e7c6      	b.n	800c128 <_dtoa_r+0x240>
 800c19a:	3101      	adds	r1, #1
 800c19c:	6079      	str	r1, [r7, #4]
 800c19e:	0040      	lsls	r0, r0, #1
 800c1a0:	e7c6      	b.n	800c130 <_dtoa_r+0x248>
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	636f4361 	.word	0x636f4361
 800c1ac:	3fd287a7 	.word	0x3fd287a7
 800c1b0:	8b60c8b3 	.word	0x8b60c8b3
 800c1b4:	3fc68a28 	.word	0x3fc68a28
 800c1b8:	509f79fb 	.word	0x509f79fb
 800c1bc:	3fd34413 	.word	0x3fd34413
 800c1c0:	0800fe41 	.word	0x0800fe41
 800c1c4:	0800fe58 	.word	0x0800fe58
 800c1c8:	7ff00000 	.word	0x7ff00000
 800c1cc:	0800fe3d 	.word	0x0800fe3d
 800c1d0:	0800fe34 	.word	0x0800fe34
 800c1d4:	0800fe11 	.word	0x0800fe11
 800c1d8:	0800ffa8 	.word	0x0800ffa8
 800c1dc:	0800feb3 	.word	0x0800feb3
 800c1e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c1e2:	9901      	ldr	r1, [sp, #4]
 800c1e4:	6011      	str	r1, [r2, #0]
 800c1e6:	f1b9 0f0e 	cmp.w	r9, #14
 800c1ea:	d86c      	bhi.n	800c2c6 <_dtoa_r+0x3de>
 800c1ec:	2c00      	cmp	r4, #0
 800c1ee:	d06a      	beq.n	800c2c6 <_dtoa_r+0x3de>
 800c1f0:	f1bb 0f00 	cmp.w	fp, #0
 800c1f4:	f340 80a0 	ble.w	800c338 <_dtoa_r+0x450>
 800c1f8:	49c1      	ldr	r1, [pc, #772]	; (800c500 <_dtoa_r+0x618>)
 800c1fa:	f00b 020f 	and.w	r2, fp, #15
 800c1fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c202:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c206:	ed92 7b00 	vldr	d7, [r2]
 800c20a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c20e:	f000 8087 	beq.w	800c320 <_dtoa_r+0x438>
 800c212:	4abc      	ldr	r2, [pc, #752]	; (800c504 <_dtoa_r+0x61c>)
 800c214:	ed92 6b08 	vldr	d6, [r2, #32]
 800c218:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c21c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c220:	f001 010f 	and.w	r1, r1, #15
 800c224:	2203      	movs	r2, #3
 800c226:	48b7      	ldr	r0, [pc, #732]	; (800c504 <_dtoa_r+0x61c>)
 800c228:	2900      	cmp	r1, #0
 800c22a:	d17b      	bne.n	800c324 <_dtoa_r+0x43c>
 800c22c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c230:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c234:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c23a:	2900      	cmp	r1, #0
 800c23c:	f000 80a2 	beq.w	800c384 <_dtoa_r+0x49c>
 800c240:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c244:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c248:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c250:	f140 8098 	bpl.w	800c384 <_dtoa_r+0x49c>
 800c254:	f1b9 0f00 	cmp.w	r9, #0
 800c258:	f000 8094 	beq.w	800c384 <_dtoa_r+0x49c>
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	dd2f      	ble.n	800c2c2 <_dtoa_r+0x3da>
 800c262:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c26a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c26e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c272:	3201      	adds	r2, #1
 800c274:	4650      	mov	r0, sl
 800c276:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c27a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c27e:	ee07 2a90 	vmov	s15, r2
 800c282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c286:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c28a:	ee15 4a90 	vmov	r4, s11
 800c28e:	ec52 1b15 	vmov	r1, r2, d5
 800c292:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c296:	2800      	cmp	r0, #0
 800c298:	d177      	bne.n	800c38a <_dtoa_r+0x4a2>
 800c29a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c29e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c2a2:	ec42 1b17 	vmov	d7, r1, r2
 800c2a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ae:	f300 8263 	bgt.w	800c778 <_dtoa_r+0x890>
 800c2b2:	eeb1 7b47 	vneg.f64	d7, d7
 800c2b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2be:	f100 8258 	bmi.w	800c772 <_dtoa_r+0x88a>
 800c2c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c2c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	f2c0 811d 	blt.w	800c508 <_dtoa_r+0x620>
 800c2ce:	f1bb 0f0e 	cmp.w	fp, #14
 800c2d2:	f300 8119 	bgt.w	800c508 <_dtoa_r+0x620>
 800c2d6:	4b8a      	ldr	r3, [pc, #552]	; (800c500 <_dtoa_r+0x618>)
 800c2d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2dc:	ed93 6b00 	vldr	d6, [r3]
 800c2e0:	9b08      	ldr	r3, [sp, #32]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f280 80b7 	bge.w	800c456 <_dtoa_r+0x56e>
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	f300 80b3 	bgt.w	800c456 <_dtoa_r+0x56e>
 800c2f0:	f040 823f 	bne.w	800c772 <_dtoa_r+0x88a>
 800c2f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c2f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c2fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c308:	464c      	mov	r4, r9
 800c30a:	464f      	mov	r7, r9
 800c30c:	f280 8215 	bge.w	800c73a <_dtoa_r+0x852>
 800c310:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c314:	2331      	movs	r3, #49	; 0x31
 800c316:	f808 3b01 	strb.w	r3, [r8], #1
 800c31a:	f10b 0b01 	add.w	fp, fp, #1
 800c31e:	e211      	b.n	800c744 <_dtoa_r+0x85c>
 800c320:	2202      	movs	r2, #2
 800c322:	e780      	b.n	800c226 <_dtoa_r+0x33e>
 800c324:	07cc      	lsls	r4, r1, #31
 800c326:	d504      	bpl.n	800c332 <_dtoa_r+0x44a>
 800c328:	ed90 6b00 	vldr	d6, [r0]
 800c32c:	3201      	adds	r2, #1
 800c32e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c332:	1049      	asrs	r1, r1, #1
 800c334:	3008      	adds	r0, #8
 800c336:	e777      	b.n	800c228 <_dtoa_r+0x340>
 800c338:	d022      	beq.n	800c380 <_dtoa_r+0x498>
 800c33a:	f1cb 0100 	rsb	r1, fp, #0
 800c33e:	4a70      	ldr	r2, [pc, #448]	; (800c500 <_dtoa_r+0x618>)
 800c340:	f001 000f 	and.w	r0, r1, #15
 800c344:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c348:	ed92 7b00 	vldr	d7, [r2]
 800c34c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c350:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c354:	486b      	ldr	r0, [pc, #428]	; (800c504 <_dtoa_r+0x61c>)
 800c356:	1109      	asrs	r1, r1, #4
 800c358:	2400      	movs	r4, #0
 800c35a:	2202      	movs	r2, #2
 800c35c:	b929      	cbnz	r1, 800c36a <_dtoa_r+0x482>
 800c35e:	2c00      	cmp	r4, #0
 800c360:	f43f af6a 	beq.w	800c238 <_dtoa_r+0x350>
 800c364:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c368:	e766      	b.n	800c238 <_dtoa_r+0x350>
 800c36a:	07cf      	lsls	r7, r1, #31
 800c36c:	d505      	bpl.n	800c37a <_dtoa_r+0x492>
 800c36e:	ed90 6b00 	vldr	d6, [r0]
 800c372:	3201      	adds	r2, #1
 800c374:	2401      	movs	r4, #1
 800c376:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c37a:	1049      	asrs	r1, r1, #1
 800c37c:	3008      	adds	r0, #8
 800c37e:	e7ed      	b.n	800c35c <_dtoa_r+0x474>
 800c380:	2202      	movs	r2, #2
 800c382:	e759      	b.n	800c238 <_dtoa_r+0x350>
 800c384:	465f      	mov	r7, fp
 800c386:	4648      	mov	r0, r9
 800c388:	e775      	b.n	800c276 <_dtoa_r+0x38e>
 800c38a:	ec42 1b17 	vmov	d7, r1, r2
 800c38e:	4a5c      	ldr	r2, [pc, #368]	; (800c500 <_dtoa_r+0x618>)
 800c390:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c394:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c398:	9a01      	ldr	r2, [sp, #4]
 800c39a:	1814      	adds	r4, r2, r0
 800c39c:	9a07      	ldr	r2, [sp, #28]
 800c39e:	b352      	cbz	r2, 800c3f6 <_dtoa_r+0x50e>
 800c3a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c3a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c3a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c3ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c3b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c3b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c3b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c3bc:	ee14 2a90 	vmov	r2, s9
 800c3c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c3c4:	3230      	adds	r2, #48	; 0x30
 800c3c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d2:	f808 2b01 	strb.w	r2, [r8], #1
 800c3d6:	d439      	bmi.n	800c44c <_dtoa_r+0x564>
 800c3d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c3dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e4:	d472      	bmi.n	800c4cc <_dtoa_r+0x5e4>
 800c3e6:	45a0      	cmp	r8, r4
 800c3e8:	f43f af6b 	beq.w	800c2c2 <_dtoa_r+0x3da>
 800c3ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c3f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3f4:	e7e0      	b.n	800c3b8 <_dtoa_r+0x4d0>
 800c3f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c3fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3fe:	4621      	mov	r1, r4
 800c400:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c404:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c408:	ee14 2a90 	vmov	r2, s9
 800c40c:	3230      	adds	r2, #48	; 0x30
 800c40e:	f808 2b01 	strb.w	r2, [r8], #1
 800c412:	45a0      	cmp	r8, r4
 800c414:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c418:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c41c:	d118      	bne.n	800c450 <_dtoa_r+0x568>
 800c41e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c422:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c426:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42e:	dc4d      	bgt.n	800c4cc <_dtoa_r+0x5e4>
 800c430:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c434:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c43c:	f57f af41 	bpl.w	800c2c2 <_dtoa_r+0x3da>
 800c440:	4688      	mov	r8, r1
 800c442:	3901      	subs	r1, #1
 800c444:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c448:	2b30      	cmp	r3, #48	; 0x30
 800c44a:	d0f9      	beq.n	800c440 <_dtoa_r+0x558>
 800c44c:	46bb      	mov	fp, r7
 800c44e:	e02a      	b.n	800c4a6 <_dtoa_r+0x5be>
 800c450:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c454:	e7d6      	b.n	800c404 <_dtoa_r+0x51c>
 800c456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c45a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c45e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c462:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c466:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c46a:	ee15 3a10 	vmov	r3, s10
 800c46e:	3330      	adds	r3, #48	; 0x30
 800c470:	f808 3b01 	strb.w	r3, [r8], #1
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	eba8 0303 	sub.w	r3, r8, r3
 800c47a:	4599      	cmp	r9, r3
 800c47c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c480:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c484:	d133      	bne.n	800c4ee <_dtoa_r+0x606>
 800c486:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c48a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c492:	dc1a      	bgt.n	800c4ca <_dtoa_r+0x5e2>
 800c494:	eeb4 7b46 	vcmp.f64	d7, d6
 800c498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49c:	d103      	bne.n	800c4a6 <_dtoa_r+0x5be>
 800c49e:	ee15 3a10 	vmov	r3, s10
 800c4a2:	07d9      	lsls	r1, r3, #31
 800c4a4:	d411      	bmi.n	800c4ca <_dtoa_r+0x5e2>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f000 fd05 	bl	800ceb8 <_Bfree>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4b2:	f888 3000 	strb.w	r3, [r8]
 800c4b6:	f10b 0301 	add.w	r3, fp, #1
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f43f ad61 	beq.w	800bf86 <_dtoa_r+0x9e>
 800c4c4:	f8c3 8000 	str.w	r8, [r3]
 800c4c8:	e55d      	b.n	800bf86 <_dtoa_r+0x9e>
 800c4ca:	465f      	mov	r7, fp
 800c4cc:	4643      	mov	r3, r8
 800c4ce:	4698      	mov	r8, r3
 800c4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4d4:	2a39      	cmp	r2, #57	; 0x39
 800c4d6:	d106      	bne.n	800c4e6 <_dtoa_r+0x5fe>
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d1f7      	bne.n	800c4ce <_dtoa_r+0x5e6>
 800c4de:	9901      	ldr	r1, [sp, #4]
 800c4e0:	2230      	movs	r2, #48	; 0x30
 800c4e2:	3701      	adds	r7, #1
 800c4e4:	700a      	strb	r2, [r1, #0]
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	3201      	adds	r2, #1
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	e7ae      	b.n	800c44c <_dtoa_r+0x564>
 800c4ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	d1b2      	bne.n	800c462 <_dtoa_r+0x57a>
 800c4fc:	e7d3      	b.n	800c4a6 <_dtoa_r+0x5be>
 800c4fe:	bf00      	nop
 800c500:	0800ffa8 	.word	0x0800ffa8
 800c504:	0800ff80 	.word	0x0800ff80
 800c508:	9907      	ldr	r1, [sp, #28]
 800c50a:	2900      	cmp	r1, #0
 800c50c:	f000 80d0 	beq.w	800c6b0 <_dtoa_r+0x7c8>
 800c510:	9906      	ldr	r1, [sp, #24]
 800c512:	2901      	cmp	r1, #1
 800c514:	f300 80b4 	bgt.w	800c680 <_dtoa_r+0x798>
 800c518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c51a:	2900      	cmp	r1, #0
 800c51c:	f000 80ac 	beq.w	800c678 <_dtoa_r+0x790>
 800c520:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c524:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c528:	461c      	mov	r4, r3
 800c52a:	930a      	str	r3, [sp, #40]	; 0x28
 800c52c:	9b04      	ldr	r3, [sp, #16]
 800c52e:	4413      	add	r3, r2
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9b05      	ldr	r3, [sp, #20]
 800c534:	2101      	movs	r1, #1
 800c536:	4413      	add	r3, r2
 800c538:	4630      	mov	r0, r6
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	f000 fd74 	bl	800d028 <__i2b>
 800c540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c542:	4607      	mov	r7, r0
 800c544:	f1b8 0f00 	cmp.w	r8, #0
 800c548:	dd0d      	ble.n	800c566 <_dtoa_r+0x67e>
 800c54a:	9a05      	ldr	r2, [sp, #20]
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	dd0a      	ble.n	800c566 <_dtoa_r+0x67e>
 800c550:	4542      	cmp	r2, r8
 800c552:	9904      	ldr	r1, [sp, #16]
 800c554:	bfa8      	it	ge
 800c556:	4642      	movge	r2, r8
 800c558:	1a89      	subs	r1, r1, r2
 800c55a:	9104      	str	r1, [sp, #16]
 800c55c:	9905      	ldr	r1, [sp, #20]
 800c55e:	eba8 0802 	sub.w	r8, r8, r2
 800c562:	1a8a      	subs	r2, r1, r2
 800c564:	9205      	str	r2, [sp, #20]
 800c566:	b303      	cbz	r3, 800c5aa <_dtoa_r+0x6c2>
 800c568:	9a07      	ldr	r2, [sp, #28]
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	f000 80a5 	beq.w	800c6ba <_dtoa_r+0x7d2>
 800c570:	2c00      	cmp	r4, #0
 800c572:	dd13      	ble.n	800c59c <_dtoa_r+0x6b4>
 800c574:	4639      	mov	r1, r7
 800c576:	4622      	mov	r2, r4
 800c578:	4630      	mov	r0, r6
 800c57a:	930d      	str	r3, [sp, #52]	; 0x34
 800c57c:	f000 fe14 	bl	800d1a8 <__pow5mult>
 800c580:	462a      	mov	r2, r5
 800c582:	4601      	mov	r1, r0
 800c584:	4607      	mov	r7, r0
 800c586:	4630      	mov	r0, r6
 800c588:	f000 fd64 	bl	800d054 <__multiply>
 800c58c:	4629      	mov	r1, r5
 800c58e:	900a      	str	r0, [sp, #40]	; 0x28
 800c590:	4630      	mov	r0, r6
 800c592:	f000 fc91 	bl	800ceb8 <_Bfree>
 800c596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c59a:	4615      	mov	r5, r2
 800c59c:	1b1a      	subs	r2, r3, r4
 800c59e:	d004      	beq.n	800c5aa <_dtoa_r+0x6c2>
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f000 fe00 	bl	800d1a8 <__pow5mult>
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f000 fd3b 	bl	800d028 <__i2b>
 800c5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	f340 8081 	ble.w	800c6be <_dtoa_r+0x7d6>
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4601      	mov	r1, r0
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f000 fdf1 	bl	800d1a8 <__pow5mult>
 800c5c6:	9b06      	ldr	r3, [sp, #24]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	dd7a      	ble.n	800c6c4 <_dtoa_r+0x7dc>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c5d8:	6910      	ldr	r0, [r2, #16]
 800c5da:	f000 fcd5 	bl	800cf88 <__hi0bits>
 800c5de:	f1c0 0020 	rsb	r0, r0, #32
 800c5e2:	9b05      	ldr	r3, [sp, #20]
 800c5e4:	4418      	add	r0, r3
 800c5e6:	f010 001f 	ands.w	r0, r0, #31
 800c5ea:	f000 808c 	beq.w	800c706 <_dtoa_r+0x81e>
 800c5ee:	f1c0 0220 	rsb	r2, r0, #32
 800c5f2:	2a04      	cmp	r2, #4
 800c5f4:	f340 8085 	ble.w	800c702 <_dtoa_r+0x81a>
 800c5f8:	f1c0 001c 	rsb	r0, r0, #28
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	4403      	add	r3, r0
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	9b05      	ldr	r3, [sp, #20]
 800c604:	4403      	add	r3, r0
 800c606:	4480      	add	r8, r0
 800c608:	9305      	str	r3, [sp, #20]
 800c60a:	9b04      	ldr	r3, [sp, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dd05      	ble.n	800c61c <_dtoa_r+0x734>
 800c610:	4629      	mov	r1, r5
 800c612:	461a      	mov	r2, r3
 800c614:	4630      	mov	r0, r6
 800c616:	f000 fe21 	bl	800d25c <__lshift>
 800c61a:	4605      	mov	r5, r0
 800c61c:	9b05      	ldr	r3, [sp, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd05      	ble.n	800c62e <_dtoa_r+0x746>
 800c622:	4621      	mov	r1, r4
 800c624:	461a      	mov	r2, r3
 800c626:	4630      	mov	r0, r6
 800c628:	f000 fe18 	bl	800d25c <__lshift>
 800c62c:	4604      	mov	r4, r0
 800c62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d06a      	beq.n	800c70a <_dtoa_r+0x822>
 800c634:	4621      	mov	r1, r4
 800c636:	4628      	mov	r0, r5
 800c638:	f000 fe80 	bl	800d33c <__mcmp>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	da64      	bge.n	800c70a <_dtoa_r+0x822>
 800c640:	2300      	movs	r3, #0
 800c642:	4629      	mov	r1, r5
 800c644:	220a      	movs	r2, #10
 800c646:	4630      	mov	r0, r6
 800c648:	f000 fc58 	bl	800cefc <__multadd>
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c652:	4605      	mov	r5, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 8191 	beq.w	800c97c <_dtoa_r+0xa94>
 800c65a:	4639      	mov	r1, r7
 800c65c:	2300      	movs	r3, #0
 800c65e:	220a      	movs	r2, #10
 800c660:	4630      	mov	r0, r6
 800c662:	f000 fc4b 	bl	800cefc <__multadd>
 800c666:	f1ba 0f00 	cmp.w	sl, #0
 800c66a:	4607      	mov	r7, r0
 800c66c:	f300 808d 	bgt.w	800c78a <_dtoa_r+0x8a2>
 800c670:	9b06      	ldr	r3, [sp, #24]
 800c672:	2b02      	cmp	r3, #2
 800c674:	dc50      	bgt.n	800c718 <_dtoa_r+0x830>
 800c676:	e088      	b.n	800c78a <_dtoa_r+0x8a2>
 800c678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c67a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c67e:	e751      	b.n	800c524 <_dtoa_r+0x63c>
 800c680:	f109 34ff 	add.w	r4, r9, #4294967295
 800c684:	42a3      	cmp	r3, r4
 800c686:	bfbf      	itttt	lt
 800c688:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c68a:	1ae3      	sublt	r3, r4, r3
 800c68c:	18d2      	addlt	r2, r2, r3
 800c68e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c690:	bfb6      	itet	lt
 800c692:	4623      	movlt	r3, r4
 800c694:	1b1c      	subge	r4, r3, r4
 800c696:	2400      	movlt	r4, #0
 800c698:	f1b9 0f00 	cmp.w	r9, #0
 800c69c:	bfb5      	itete	lt
 800c69e:	9a04      	ldrlt	r2, [sp, #16]
 800c6a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c6a4:	eba2 0809 	sublt.w	r8, r2, r9
 800c6a8:	464a      	movge	r2, r9
 800c6aa:	bfb8      	it	lt
 800c6ac:	2200      	movlt	r2, #0
 800c6ae:	e73c      	b.n	800c52a <_dtoa_r+0x642>
 800c6b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c6b4:	9f07      	ldr	r7, [sp, #28]
 800c6b6:	461c      	mov	r4, r3
 800c6b8:	e744      	b.n	800c544 <_dtoa_r+0x65c>
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	e770      	b.n	800c5a0 <_dtoa_r+0x6b8>
 800c6be:	9b06      	ldr	r3, [sp, #24]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	dc18      	bgt.n	800c6f6 <_dtoa_r+0x80e>
 800c6c4:	9b02      	ldr	r3, [sp, #8]
 800c6c6:	b9b3      	cbnz	r3, 800c6f6 <_dtoa_r+0x80e>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c6ce:	b9a2      	cbnz	r2, 800c6fa <_dtoa_r+0x812>
 800c6d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c6d4:	0d12      	lsrs	r2, r2, #20
 800c6d6:	0512      	lsls	r2, r2, #20
 800c6d8:	b18a      	cbz	r2, 800c6fe <_dtoa_r+0x816>
 800c6da:	9b04      	ldr	r3, [sp, #16]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	9b05      	ldr	r3, [sp, #20]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f47f af70 	bne.w	800c5d2 <_dtoa_r+0x6ea>
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	e775      	b.n	800c5e2 <_dtoa_r+0x6fa>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e7f6      	b.n	800c6e8 <_dtoa_r+0x800>
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	e7f4      	b.n	800c6e8 <_dtoa_r+0x800>
 800c6fe:	920a      	str	r2, [sp, #40]	; 0x28
 800c700:	e7f3      	b.n	800c6ea <_dtoa_r+0x802>
 800c702:	d082      	beq.n	800c60a <_dtoa_r+0x722>
 800c704:	4610      	mov	r0, r2
 800c706:	301c      	adds	r0, #28
 800c708:	e778      	b.n	800c5fc <_dtoa_r+0x714>
 800c70a:	f1b9 0f00 	cmp.w	r9, #0
 800c70e:	dc37      	bgt.n	800c780 <_dtoa_r+0x898>
 800c710:	9b06      	ldr	r3, [sp, #24]
 800c712:	2b02      	cmp	r3, #2
 800c714:	dd34      	ble.n	800c780 <_dtoa_r+0x898>
 800c716:	46ca      	mov	sl, r9
 800c718:	f1ba 0f00 	cmp.w	sl, #0
 800c71c:	d10d      	bne.n	800c73a <_dtoa_r+0x852>
 800c71e:	4621      	mov	r1, r4
 800c720:	4653      	mov	r3, sl
 800c722:	2205      	movs	r2, #5
 800c724:	4630      	mov	r0, r6
 800c726:	f000 fbe9 	bl	800cefc <__multadd>
 800c72a:	4601      	mov	r1, r0
 800c72c:	4604      	mov	r4, r0
 800c72e:	4628      	mov	r0, r5
 800c730:	f000 fe04 	bl	800d33c <__mcmp>
 800c734:	2800      	cmp	r0, #0
 800c736:	f73f adeb 	bgt.w	800c310 <_dtoa_r+0x428>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c740:	ea6f 0b03 	mvn.w	fp, r3
 800c744:	f04f 0900 	mov.w	r9, #0
 800c748:	4621      	mov	r1, r4
 800c74a:	4630      	mov	r0, r6
 800c74c:	f000 fbb4 	bl	800ceb8 <_Bfree>
 800c750:	2f00      	cmp	r7, #0
 800c752:	f43f aea8 	beq.w	800c4a6 <_dtoa_r+0x5be>
 800c756:	f1b9 0f00 	cmp.w	r9, #0
 800c75a:	d005      	beq.n	800c768 <_dtoa_r+0x880>
 800c75c:	45b9      	cmp	r9, r7
 800c75e:	d003      	beq.n	800c768 <_dtoa_r+0x880>
 800c760:	4649      	mov	r1, r9
 800c762:	4630      	mov	r0, r6
 800c764:	f000 fba8 	bl	800ceb8 <_Bfree>
 800c768:	4639      	mov	r1, r7
 800c76a:	4630      	mov	r0, r6
 800c76c:	f000 fba4 	bl	800ceb8 <_Bfree>
 800c770:	e699      	b.n	800c4a6 <_dtoa_r+0x5be>
 800c772:	2400      	movs	r4, #0
 800c774:	4627      	mov	r7, r4
 800c776:	e7e0      	b.n	800c73a <_dtoa_r+0x852>
 800c778:	46bb      	mov	fp, r7
 800c77a:	4604      	mov	r4, r0
 800c77c:	4607      	mov	r7, r0
 800c77e:	e5c7      	b.n	800c310 <_dtoa_r+0x428>
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	46ca      	mov	sl, r9
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 8100 	beq.w	800c98a <_dtoa_r+0xaa2>
 800c78a:	f1b8 0f00 	cmp.w	r8, #0
 800c78e:	dd05      	ble.n	800c79c <_dtoa_r+0x8b4>
 800c790:	4639      	mov	r1, r7
 800c792:	4642      	mov	r2, r8
 800c794:	4630      	mov	r0, r6
 800c796:	f000 fd61 	bl	800d25c <__lshift>
 800c79a:	4607      	mov	r7, r0
 800c79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d05d      	beq.n	800c85e <_dtoa_r+0x976>
 800c7a2:	6879      	ldr	r1, [r7, #4]
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f000 fb47 	bl	800ce38 <_Balloc>
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	b928      	cbnz	r0, 800c7ba <_dtoa_r+0x8d2>
 800c7ae:	4b82      	ldr	r3, [pc, #520]	; (800c9b8 <_dtoa_r+0xad0>)
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7b6:	f7ff bbaf 	b.w	800bf18 <_dtoa_r+0x30>
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	3202      	adds	r2, #2
 800c7be:	0092      	lsls	r2, r2, #2
 800c7c0:	f107 010c 	add.w	r1, r7, #12
 800c7c4:	300c      	adds	r0, #12
 800c7c6:	f000 fb29 	bl	800ce1c <memcpy>
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	4641      	mov	r1, r8
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f000 fd44 	bl	800d25c <__lshift>
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	9b01      	ldr	r3, [sp, #4]
 800c7dc:	4453      	add	r3, sl
 800c7de:	9308      	str	r3, [sp, #32]
 800c7e0:	9b02      	ldr	r3, [sp, #8]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	46b9      	mov	r9, r7
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	9b04      	ldr	r3, [sp, #16]
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	f7ff faeb 	bl	800bdd0 <quorem>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	3330      	adds	r3, #48	; 0x30
 800c7fe:	9005      	str	r0, [sp, #20]
 800c800:	4649      	mov	r1, r9
 800c802:	4628      	mov	r0, r5
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	f000 fd99 	bl	800d33c <__mcmp>
 800c80a:	463a      	mov	r2, r7
 800c80c:	4682      	mov	sl, r0
 800c80e:	4621      	mov	r1, r4
 800c810:	4630      	mov	r0, r6
 800c812:	f000 fdaf 	bl	800d374 <__mdiff>
 800c816:	68c2      	ldr	r2, [r0, #12]
 800c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81a:	4680      	mov	r8, r0
 800c81c:	bb0a      	cbnz	r2, 800c862 <_dtoa_r+0x97a>
 800c81e:	4601      	mov	r1, r0
 800c820:	4628      	mov	r0, r5
 800c822:	f000 fd8b 	bl	800d33c <__mcmp>
 800c826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c828:	4602      	mov	r2, r0
 800c82a:	4641      	mov	r1, r8
 800c82c:	4630      	mov	r0, r6
 800c82e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c832:	f000 fb41 	bl	800ceb8 <_Bfree>
 800c836:	9b06      	ldr	r3, [sp, #24]
 800c838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c83e:	ea43 0102 	orr.w	r1, r3, r2
 800c842:	9b07      	ldr	r3, [sp, #28]
 800c844:	430b      	orrs	r3, r1
 800c846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c848:	d10d      	bne.n	800c866 <_dtoa_r+0x97e>
 800c84a:	2b39      	cmp	r3, #57	; 0x39
 800c84c:	d029      	beq.n	800c8a2 <_dtoa_r+0x9ba>
 800c84e:	f1ba 0f00 	cmp.w	sl, #0
 800c852:	dd01      	ble.n	800c858 <_dtoa_r+0x970>
 800c854:	9b05      	ldr	r3, [sp, #20]
 800c856:	3331      	adds	r3, #49	; 0x31
 800c858:	9a02      	ldr	r2, [sp, #8]
 800c85a:	7013      	strb	r3, [r2, #0]
 800c85c:	e774      	b.n	800c748 <_dtoa_r+0x860>
 800c85e:	4638      	mov	r0, r7
 800c860:	e7b8      	b.n	800c7d4 <_dtoa_r+0x8ec>
 800c862:	2201      	movs	r2, #1
 800c864:	e7e1      	b.n	800c82a <_dtoa_r+0x942>
 800c866:	f1ba 0f00 	cmp.w	sl, #0
 800c86a:	db06      	blt.n	800c87a <_dtoa_r+0x992>
 800c86c:	9906      	ldr	r1, [sp, #24]
 800c86e:	ea41 0a0a 	orr.w	sl, r1, sl
 800c872:	9907      	ldr	r1, [sp, #28]
 800c874:	ea5a 0101 	orrs.w	r1, sl, r1
 800c878:	d120      	bne.n	800c8bc <_dtoa_r+0x9d4>
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	ddec      	ble.n	800c858 <_dtoa_r+0x970>
 800c87e:	4629      	mov	r1, r5
 800c880:	2201      	movs	r2, #1
 800c882:	4630      	mov	r0, r6
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	f000 fce9 	bl	800d25c <__lshift>
 800c88a:	4621      	mov	r1, r4
 800c88c:	4605      	mov	r5, r0
 800c88e:	f000 fd55 	bl	800d33c <__mcmp>
 800c892:	2800      	cmp	r0, #0
 800c894:	9b04      	ldr	r3, [sp, #16]
 800c896:	dc02      	bgt.n	800c89e <_dtoa_r+0x9b6>
 800c898:	d1de      	bne.n	800c858 <_dtoa_r+0x970>
 800c89a:	07da      	lsls	r2, r3, #31
 800c89c:	d5dc      	bpl.n	800c858 <_dtoa_r+0x970>
 800c89e:	2b39      	cmp	r3, #57	; 0x39
 800c8a0:	d1d8      	bne.n	800c854 <_dtoa_r+0x96c>
 800c8a2:	9a02      	ldr	r2, [sp, #8]
 800c8a4:	2339      	movs	r3, #57	; 0x39
 800c8a6:	7013      	strb	r3, [r2, #0]
 800c8a8:	4643      	mov	r3, r8
 800c8aa:	4698      	mov	r8, r3
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c8b2:	2a39      	cmp	r2, #57	; 0x39
 800c8b4:	d051      	beq.n	800c95a <_dtoa_r+0xa72>
 800c8b6:	3201      	adds	r2, #1
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	e745      	b.n	800c748 <_dtoa_r+0x860>
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	dd03      	ble.n	800c8c8 <_dtoa_r+0x9e0>
 800c8c0:	2b39      	cmp	r3, #57	; 0x39
 800c8c2:	d0ee      	beq.n	800c8a2 <_dtoa_r+0x9ba>
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	e7c7      	b.n	800c858 <_dtoa_r+0x970>
 800c8c8:	9a04      	ldr	r2, [sp, #16]
 800c8ca:	9908      	ldr	r1, [sp, #32]
 800c8cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c8d0:	428a      	cmp	r2, r1
 800c8d2:	d02b      	beq.n	800c92c <_dtoa_r+0xa44>
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	220a      	movs	r2, #10
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f000 fb0e 	bl	800cefc <__multadd>
 800c8e0:	45b9      	cmp	r9, r7
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	f04f 020a 	mov.w	r2, #10
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	d107      	bne.n	800c902 <_dtoa_r+0xa1a>
 800c8f2:	f000 fb03 	bl	800cefc <__multadd>
 800c8f6:	4681      	mov	r9, r0
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	e774      	b.n	800c7ec <_dtoa_r+0x904>
 800c902:	f000 fafb 	bl	800cefc <__multadd>
 800c906:	4639      	mov	r1, r7
 800c908:	4681      	mov	r9, r0
 800c90a:	2300      	movs	r3, #0
 800c90c:	220a      	movs	r2, #10
 800c90e:	4630      	mov	r0, r6
 800c910:	f000 faf4 	bl	800cefc <__multadd>
 800c914:	4607      	mov	r7, r0
 800c916:	e7f0      	b.n	800c8fa <_dtoa_r+0xa12>
 800c918:	f1ba 0f00 	cmp.w	sl, #0
 800c91c:	9a01      	ldr	r2, [sp, #4]
 800c91e:	bfcc      	ite	gt
 800c920:	46d0      	movgt	r8, sl
 800c922:	f04f 0801 	movle.w	r8, #1
 800c926:	4490      	add	r8, r2
 800c928:	f04f 0900 	mov.w	r9, #0
 800c92c:	4629      	mov	r1, r5
 800c92e:	2201      	movs	r2, #1
 800c930:	4630      	mov	r0, r6
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	f000 fc92 	bl	800d25c <__lshift>
 800c938:	4621      	mov	r1, r4
 800c93a:	4605      	mov	r5, r0
 800c93c:	f000 fcfe 	bl	800d33c <__mcmp>
 800c940:	2800      	cmp	r0, #0
 800c942:	dcb1      	bgt.n	800c8a8 <_dtoa_r+0x9c0>
 800c944:	d102      	bne.n	800c94c <_dtoa_r+0xa64>
 800c946:	9b02      	ldr	r3, [sp, #8]
 800c948:	07db      	lsls	r3, r3, #31
 800c94a:	d4ad      	bmi.n	800c8a8 <_dtoa_r+0x9c0>
 800c94c:	4643      	mov	r3, r8
 800c94e:	4698      	mov	r8, r3
 800c950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c954:	2a30      	cmp	r2, #48	; 0x30
 800c956:	d0fa      	beq.n	800c94e <_dtoa_r+0xa66>
 800c958:	e6f6      	b.n	800c748 <_dtoa_r+0x860>
 800c95a:	9a01      	ldr	r2, [sp, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d1a4      	bne.n	800c8aa <_dtoa_r+0x9c2>
 800c960:	f10b 0b01 	add.w	fp, fp, #1
 800c964:	2331      	movs	r3, #49	; 0x31
 800c966:	e778      	b.n	800c85a <_dtoa_r+0x972>
 800c968:	4b14      	ldr	r3, [pc, #80]	; (800c9bc <_dtoa_r+0xad4>)
 800c96a:	f7ff bb27 	b.w	800bfbc <_dtoa_r+0xd4>
 800c96e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f ab03 	bne.w	800bf7c <_dtoa_r+0x94>
 800c976:	4b12      	ldr	r3, [pc, #72]	; (800c9c0 <_dtoa_r+0xad8>)
 800c978:	f7ff bb20 	b.w	800bfbc <_dtoa_r+0xd4>
 800c97c:	f1ba 0f00 	cmp.w	sl, #0
 800c980:	dc03      	bgt.n	800c98a <_dtoa_r+0xaa2>
 800c982:	9b06      	ldr	r3, [sp, #24]
 800c984:	2b02      	cmp	r3, #2
 800c986:	f73f aec7 	bgt.w	800c718 <_dtoa_r+0x830>
 800c98a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fa1d 	bl	800bdd0 <quorem>
 800c996:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c99a:	f808 3b01 	strb.w	r3, [r8], #1
 800c99e:	9a01      	ldr	r2, [sp, #4]
 800c9a0:	eba8 0202 	sub.w	r2, r8, r2
 800c9a4:	4592      	cmp	sl, r2
 800c9a6:	ddb7      	ble.n	800c918 <_dtoa_r+0xa30>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f000 faa4 	bl	800cefc <__multadd>
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	e7ea      	b.n	800c98e <_dtoa_r+0xaa6>
 800c9b8:	0800feb3 	.word	0x0800feb3
 800c9bc:	0800fe10 	.word	0x0800fe10
 800c9c0:	0800fe34 	.word	0x0800fe34

0800c9c4 <__sflush_r>:
 800c9c4:	898a      	ldrh	r2, [r1, #12]
 800c9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	0710      	lsls	r0, r2, #28
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	d458      	bmi.n	800ca84 <__sflush_r+0xc0>
 800c9d2:	684b      	ldr	r3, [r1, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dc05      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dc02      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d0f9      	beq.n	800c9de <__sflush_r+0x1a>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9f0:	682f      	ldr	r7, [r5, #0]
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	d032      	beq.n	800ca5c <__sflush_r+0x98>
 800c9f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	075a      	lsls	r2, r3, #29
 800c9fc:	d505      	bpl.n	800ca0a <__sflush_r+0x46>
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	1ac0      	subs	r0, r0, r3
 800ca02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca04:	b10b      	cbz	r3, 800ca0a <__sflush_r+0x46>
 800ca06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca08:	1ac0      	subs	r0, r0, r3
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca10:	6a21      	ldr	r1, [r4, #32]
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b0      	blx	r6
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	d106      	bne.n	800ca2a <__sflush_r+0x66>
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	291d      	cmp	r1, #29
 800ca20:	d82c      	bhi.n	800ca7c <__sflush_r+0xb8>
 800ca22:	4a2a      	ldr	r2, [pc, #168]	; (800cacc <__sflush_r+0x108>)
 800ca24:	40ca      	lsrs	r2, r1
 800ca26:	07d6      	lsls	r6, r2, #31
 800ca28:	d528      	bpl.n	800ca7c <__sflush_r+0xb8>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6062      	str	r2, [r4, #4]
 800ca2e:	04d9      	lsls	r1, r3, #19
 800ca30:	6922      	ldr	r2, [r4, #16]
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	d504      	bpl.n	800ca40 <__sflush_r+0x7c>
 800ca36:	1c42      	adds	r2, r0, #1
 800ca38:	d101      	bne.n	800ca3e <__sflush_r+0x7a>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b903      	cbnz	r3, 800ca40 <__sflush_r+0x7c>
 800ca3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca42:	602f      	str	r7, [r5, #0]
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d0ca      	beq.n	800c9de <__sflush_r+0x1a>
 800ca48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	d002      	beq.n	800ca56 <__sflush_r+0x92>
 800ca50:	4628      	mov	r0, r5
 800ca52:	f000 fd8b 	bl	800d56c <_free_r>
 800ca56:	2000      	movs	r0, #0
 800ca58:	6360      	str	r0, [r4, #52]	; 0x34
 800ca5a:	e7c1      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca5c:	6a21      	ldr	r1, [r4, #32]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b0      	blx	r6
 800ca64:	1c41      	adds	r1, r0, #1
 800ca66:	d1c7      	bne.n	800c9f8 <__sflush_r+0x34>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0c4      	beq.n	800c9f8 <__sflush_r+0x34>
 800ca6e:	2b1d      	cmp	r3, #29
 800ca70:	d001      	beq.n	800ca76 <__sflush_r+0xb2>
 800ca72:	2b16      	cmp	r3, #22
 800ca74:	d101      	bne.n	800ca7a <__sflush_r+0xb6>
 800ca76:	602f      	str	r7, [r5, #0]
 800ca78:	e7b1      	b.n	800c9de <__sflush_r+0x1a>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7ad      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca84:	690f      	ldr	r7, [r1, #16]
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d0a9      	beq.n	800c9de <__sflush_r+0x1a>
 800ca8a:	0793      	lsls	r3, r2, #30
 800ca8c:	680e      	ldr	r6, [r1, #0]
 800ca8e:	bf08      	it	eq
 800ca90:	694b      	ldreq	r3, [r1, #20]
 800ca92:	600f      	str	r7, [r1, #0]
 800ca94:	bf18      	it	ne
 800ca96:	2300      	movne	r3, #0
 800ca98:	eba6 0807 	sub.w	r8, r6, r7
 800ca9c:	608b      	str	r3, [r1, #8]
 800ca9e:	f1b8 0f00 	cmp.w	r8, #0
 800caa2:	dd9c      	ble.n	800c9de <__sflush_r+0x1a>
 800caa4:	6a21      	ldr	r1, [r4, #32]
 800caa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa8:	4643      	mov	r3, r8
 800caaa:	463a      	mov	r2, r7
 800caac:	4628      	mov	r0, r5
 800caae:	47b0      	blx	r6
 800cab0:	2800      	cmp	r0, #0
 800cab2:	dc06      	bgt.n	800cac2 <__sflush_r+0xfe>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e78e      	b.n	800c9e0 <__sflush_r+0x1c>
 800cac2:	4407      	add	r7, r0
 800cac4:	eba8 0800 	sub.w	r8, r8, r0
 800cac8:	e7e9      	b.n	800ca9e <__sflush_r+0xda>
 800caca:	bf00      	nop
 800cacc:	20400001 	.word	0x20400001

0800cad0 <_fflush_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	690b      	ldr	r3, [r1, #16]
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	b913      	cbnz	r3, 800cae0 <_fflush_r+0x10>
 800cada:	2500      	movs	r5, #0
 800cadc:	4628      	mov	r0, r5
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	b118      	cbz	r0, 800caea <_fflush_r+0x1a>
 800cae2:	6983      	ldr	r3, [r0, #24]
 800cae4:	b90b      	cbnz	r3, 800caea <_fflush_r+0x1a>
 800cae6:	f000 f887 	bl	800cbf8 <__sinit>
 800caea:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <_fflush_r+0x6c>)
 800caec:	429c      	cmp	r4, r3
 800caee:	d11b      	bne.n	800cb28 <_fflush_r+0x58>
 800caf0:	686c      	ldr	r4, [r5, #4]
 800caf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0ef      	beq.n	800cada <_fflush_r+0xa>
 800cafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cafc:	07d0      	lsls	r0, r2, #31
 800cafe:	d404      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb00:	0599      	lsls	r1, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb06:	f000 f91a 	bl	800cd3e <__retarget_lock_acquire_recursive>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	f7ff ff59 	bl	800c9c4 <__sflush_r>
 800cb12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb14:	07da      	lsls	r2, r3, #31
 800cb16:	4605      	mov	r5, r0
 800cb18:	d4e0      	bmi.n	800cadc <_fflush_r+0xc>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	059b      	lsls	r3, r3, #22
 800cb1e:	d4dd      	bmi.n	800cadc <_fflush_r+0xc>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f000 f90d 	bl	800cd40 <__retarget_lock_release_recursive>
 800cb26:	e7d9      	b.n	800cadc <_fflush_r+0xc>
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <_fflush_r+0x70>)
 800cb2a:	429c      	cmp	r4, r3
 800cb2c:	d101      	bne.n	800cb32 <_fflush_r+0x62>
 800cb2e:	68ac      	ldr	r4, [r5, #8]
 800cb30:	e7df      	b.n	800caf2 <_fflush_r+0x22>
 800cb32:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <_fflush_r+0x74>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	bf08      	it	eq
 800cb38:	68ec      	ldreq	r4, [r5, #12]
 800cb3a:	e7da      	b.n	800caf2 <_fflush_r+0x22>
 800cb3c:	0800fee4 	.word	0x0800fee4
 800cb40:	0800ff04 	.word	0x0800ff04
 800cb44:	0800fec4 	.word	0x0800fec4

0800cb48 <std>:
 800cb48:	2300      	movs	r3, #0
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb56:	6083      	str	r3, [r0, #8]
 800cb58:	8181      	strh	r1, [r0, #12]
 800cb5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb5c:	81c2      	strh	r2, [r0, #14]
 800cb5e:	6183      	str	r3, [r0, #24]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2208      	movs	r2, #8
 800cb64:	305c      	adds	r0, #92	; 0x5c
 800cb66:	f7fe fb9b 	bl	800b2a0 <memset>
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <std+0x38>)
 800cb6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <std+0x3c>)
 800cb70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <std+0x40>)
 800cb74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <std+0x44>)
 800cb78:	6224      	str	r4, [r4, #32]
 800cb7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	bf00      	nop
 800cb80:	0800da01 	.word	0x0800da01
 800cb84:	0800da23 	.word	0x0800da23
 800cb88:	0800da5b 	.word	0x0800da5b
 800cb8c:	0800da7f 	.word	0x0800da7f

0800cb90 <_cleanup_r>:
 800cb90:	4901      	ldr	r1, [pc, #4]	; (800cb98 <_cleanup_r+0x8>)
 800cb92:	f000 b8af 	b.w	800ccf4 <_fwalk_reent>
 800cb96:	bf00      	nop
 800cb98:	0800cad1 	.word	0x0800cad1

0800cb9c <__sfmoreglue>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	2268      	movs	r2, #104	; 0x68
 800cba0:	1e4d      	subs	r5, r1, #1
 800cba2:	4355      	muls	r5, r2
 800cba4:	460e      	mov	r6, r1
 800cba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbaa:	f000 fd4b 	bl	800d644 <_malloc_r>
 800cbae:	4604      	mov	r4, r0
 800cbb0:	b140      	cbz	r0, 800cbc4 <__sfmoreglue+0x28>
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	e9c0 1600 	strd	r1, r6, [r0]
 800cbb8:	300c      	adds	r0, #12
 800cbba:	60a0      	str	r0, [r4, #8]
 800cbbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbc0:	f7fe fb6e 	bl	800b2a0 <memset>
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__sfp_lock_acquire>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__sfp_lock_acquire+0x8>)
 800cbca:	f000 b8b8 	b.w	800cd3e <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	24000581 	.word	0x24000581

0800cbd4 <__sfp_lock_release>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__sfp_lock_release+0x8>)
 800cbd6:	f000 b8b3 	b.w	800cd40 <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	24000581 	.word	0x24000581

0800cbe0 <__sinit_lock_acquire>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__sinit_lock_acquire+0x8>)
 800cbe2:	f000 b8ac 	b.w	800cd3e <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	24000582 	.word	0x24000582

0800cbec <__sinit_lock_release>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__sinit_lock_release+0x8>)
 800cbee:	f000 b8a7 	b.w	800cd40 <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	24000582 	.word	0x24000582

0800cbf8 <__sinit>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	f7ff fff0 	bl	800cbe0 <__sinit_lock_acquire>
 800cc00:	69a3      	ldr	r3, [r4, #24]
 800cc02:	b11b      	cbz	r3, 800cc0c <__sinit+0x14>
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f7ff bff0 	b.w	800cbec <__sinit_lock_release>
 800cc0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc10:	6523      	str	r3, [r4, #80]	; 0x50
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <__sinit+0x68>)
 800cc14:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <__sinit+0x6c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	bf04      	itt	eq
 800cc1e:	2301      	moveq	r3, #1
 800cc20:	61a3      	streq	r3, [r4, #24]
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 f820 	bl	800cc68 <__sfp>
 800cc28:	6060      	str	r0, [r4, #4]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f81c 	bl	800cc68 <__sfp>
 800cc30:	60a0      	str	r0, [r4, #8]
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f818 	bl	800cc68 <__sfp>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	60e0      	str	r0, [r4, #12]
 800cc3c:	2104      	movs	r1, #4
 800cc3e:	6860      	ldr	r0, [r4, #4]
 800cc40:	f7ff ff82 	bl	800cb48 <std>
 800cc44:	68a0      	ldr	r0, [r4, #8]
 800cc46:	2201      	movs	r2, #1
 800cc48:	2109      	movs	r1, #9
 800cc4a:	f7ff ff7d 	bl	800cb48 <std>
 800cc4e:	68e0      	ldr	r0, [r4, #12]
 800cc50:	2202      	movs	r2, #2
 800cc52:	2112      	movs	r1, #18
 800cc54:	f7ff ff78 	bl	800cb48 <std>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	61a3      	str	r3, [r4, #24]
 800cc5c:	e7d2      	b.n	800cc04 <__sinit+0xc>
 800cc5e:	bf00      	nop
 800cc60:	0800fdfc 	.word	0x0800fdfc
 800cc64:	0800cb91 	.word	0x0800cb91

0800cc68 <__sfp>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	f7ff ffac 	bl	800cbc8 <__sfp_lock_acquire>
 800cc70:	4b1e      	ldr	r3, [pc, #120]	; (800ccec <__sfp+0x84>)
 800cc72:	681e      	ldr	r6, [r3, #0]
 800cc74:	69b3      	ldr	r3, [r6, #24]
 800cc76:	b913      	cbnz	r3, 800cc7e <__sfp+0x16>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ffbd 	bl	800cbf8 <__sinit>
 800cc7e:	3648      	adds	r6, #72	; 0x48
 800cc80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	d503      	bpl.n	800cc90 <__sfp+0x28>
 800cc88:	6833      	ldr	r3, [r6, #0]
 800cc8a:	b30b      	cbz	r3, 800ccd0 <__sfp+0x68>
 800cc8c:	6836      	ldr	r6, [r6, #0]
 800cc8e:	e7f7      	b.n	800cc80 <__sfp+0x18>
 800cc90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc94:	b9d5      	cbnz	r5, 800cccc <__sfp+0x64>
 800cc96:	4b16      	ldr	r3, [pc, #88]	; (800ccf0 <__sfp+0x88>)
 800cc98:	60e3      	str	r3, [r4, #12]
 800cc9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cca0:	f000 f84c 	bl	800cd3c <__retarget_lock_init_recursive>
 800cca4:	f7ff ff96 	bl	800cbd4 <__sfp_lock_release>
 800cca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccb0:	6025      	str	r5, [r4, #0]
 800ccb2:	61a5      	str	r5, [r4, #24]
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccbc:	f7fe faf0 	bl	800b2a0 <memset>
 800ccc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	3468      	adds	r4, #104	; 0x68
 800ccce:	e7d9      	b.n	800cc84 <__sfp+0x1c>
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	f7ff ff62 	bl	800cb9c <__sfmoreglue>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	6030      	str	r0, [r6, #0]
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1d5      	bne.n	800cc8c <__sfp+0x24>
 800cce0:	f7ff ff78 	bl	800cbd4 <__sfp_lock_release>
 800cce4:	230c      	movs	r3, #12
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	e7ee      	b.n	800ccc8 <__sfp+0x60>
 800ccea:	bf00      	nop
 800ccec:	0800fdfc 	.word	0x0800fdfc
 800ccf0:	ffff0001 	.word	0xffff0001

0800ccf4 <_fwalk_reent>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	4688      	mov	r8, r1
 800ccfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd00:	2700      	movs	r7, #0
 800cd02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd06:	f1b9 0901 	subs.w	r9, r9, #1
 800cd0a:	d505      	bpl.n	800cd18 <_fwalk_reent+0x24>
 800cd0c:	6824      	ldr	r4, [r4, #0]
 800cd0e:	2c00      	cmp	r4, #0
 800cd10:	d1f7      	bne.n	800cd02 <_fwalk_reent+0xe>
 800cd12:	4638      	mov	r0, r7
 800cd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd18:	89ab      	ldrh	r3, [r5, #12]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d907      	bls.n	800cd2e <_fwalk_reent+0x3a>
 800cd1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd22:	3301      	adds	r3, #1
 800cd24:	d003      	beq.n	800cd2e <_fwalk_reent+0x3a>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4630      	mov	r0, r6
 800cd2a:	47c0      	blx	r8
 800cd2c:	4307      	orrs	r7, r0
 800cd2e:	3568      	adds	r5, #104	; 0x68
 800cd30:	e7e9      	b.n	800cd06 <_fwalk_reent+0x12>
	...

0800cd34 <_localeconv_r>:
 800cd34:	4800      	ldr	r0, [pc, #0]	; (800cd38 <_localeconv_r+0x4>)
 800cd36:	4770      	bx	lr
 800cd38:	24000188 	.word	0x24000188

0800cd3c <__retarget_lock_init_recursive>:
 800cd3c:	4770      	bx	lr

0800cd3e <__retarget_lock_acquire_recursive>:
 800cd3e:	4770      	bx	lr

0800cd40 <__retarget_lock_release_recursive>:
 800cd40:	4770      	bx	lr

0800cd42 <__swhatbuf_r>:
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	460e      	mov	r6, r1
 800cd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4a:	2900      	cmp	r1, #0
 800cd4c:	b096      	sub	sp, #88	; 0x58
 800cd4e:	4614      	mov	r4, r2
 800cd50:	461d      	mov	r5, r3
 800cd52:	da08      	bge.n	800cd66 <__swhatbuf_r+0x24>
 800cd54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	602a      	str	r2, [r5, #0]
 800cd5c:	061a      	lsls	r2, r3, #24
 800cd5e:	d410      	bmi.n	800cd82 <__swhatbuf_r+0x40>
 800cd60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd64:	e00e      	b.n	800cd84 <__swhatbuf_r+0x42>
 800cd66:	466a      	mov	r2, sp
 800cd68:	f000 fee0 	bl	800db2c <_fstat_r>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	dbf1      	blt.n	800cd54 <__swhatbuf_r+0x12>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd7a:	425a      	negs	r2, r3
 800cd7c:	415a      	adcs	r2, r3
 800cd7e:	602a      	str	r2, [r5, #0]
 800cd80:	e7ee      	b.n	800cd60 <__swhatbuf_r+0x1e>
 800cd82:	2340      	movs	r3, #64	; 0x40
 800cd84:	2000      	movs	r0, #0
 800cd86:	6023      	str	r3, [r4, #0]
 800cd88:	b016      	add	sp, #88	; 0x58
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}

0800cd8c <__smakebuf_r>:
 800cd8c:	898b      	ldrh	r3, [r1, #12]
 800cd8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd90:	079d      	lsls	r5, r3, #30
 800cd92:	4606      	mov	r6, r0
 800cd94:	460c      	mov	r4, r1
 800cd96:	d507      	bpl.n	800cda8 <__smakebuf_r+0x1c>
 800cd98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	6123      	str	r3, [r4, #16]
 800cda0:	2301      	movs	r3, #1
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	b002      	add	sp, #8
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	ab01      	add	r3, sp, #4
 800cdaa:	466a      	mov	r2, sp
 800cdac:	f7ff ffc9 	bl	800cd42 <__swhatbuf_r>
 800cdb0:	9900      	ldr	r1, [sp, #0]
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 fc45 	bl	800d644 <_malloc_r>
 800cdba:	b948      	cbnz	r0, 800cdd0 <__smakebuf_r+0x44>
 800cdbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc0:	059a      	lsls	r2, r3, #22
 800cdc2:	d4ef      	bmi.n	800cda4 <__smakebuf_r+0x18>
 800cdc4:	f023 0303 	bic.w	r3, r3, #3
 800cdc8:	f043 0302 	orr.w	r3, r3, #2
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	e7e3      	b.n	800cd98 <__smakebuf_r+0xc>
 800cdd0:	4b0d      	ldr	r3, [pc, #52]	; (800ce08 <__smakebuf_r+0x7c>)
 800cdd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	6020      	str	r0, [r4, #0]
 800cdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	9b00      	ldr	r3, [sp, #0]
 800cde0:	6163      	str	r3, [r4, #20]
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	6120      	str	r0, [r4, #16]
 800cde6:	b15b      	cbz	r3, 800ce00 <__smakebuf_r+0x74>
 800cde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdec:	4630      	mov	r0, r6
 800cdee:	f000 feaf 	bl	800db50 <_isatty_r>
 800cdf2:	b128      	cbz	r0, 800ce00 <__smakebuf_r+0x74>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	89a0      	ldrh	r0, [r4, #12]
 800ce02:	4305      	orrs	r5, r0
 800ce04:	81a5      	strh	r5, [r4, #12]
 800ce06:	e7cd      	b.n	800cda4 <__smakebuf_r+0x18>
 800ce08:	0800cb91 	.word	0x0800cb91

0800ce0c <malloc>:
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <malloc+0xc>)
 800ce0e:	4601      	mov	r1, r0
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	f000 bc17 	b.w	800d644 <_malloc_r>
 800ce16:	bf00      	nop
 800ce18:	24000034 	.word	0x24000034

0800ce1c <memcpy>:
 800ce1c:	440a      	add	r2, r1
 800ce1e:	4291      	cmp	r1, r2
 800ce20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce24:	d100      	bne.n	800ce28 <memcpy+0xc>
 800ce26:	4770      	bx	lr
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce32:	4291      	cmp	r1, r2
 800ce34:	d1f9      	bne.n	800ce2a <memcpy+0xe>
 800ce36:	bd10      	pop	{r4, pc}

0800ce38 <_Balloc>:
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	b976      	cbnz	r6, 800ce60 <_Balloc+0x28>
 800ce42:	2010      	movs	r0, #16
 800ce44:	f7ff ffe2 	bl	800ce0c <malloc>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ce4c:	b920      	cbnz	r0, 800ce58 <_Balloc+0x20>
 800ce4e:	4b18      	ldr	r3, [pc, #96]	; (800ceb0 <_Balloc+0x78>)
 800ce50:	4818      	ldr	r0, [pc, #96]	; (800ceb4 <_Balloc+0x7c>)
 800ce52:	2166      	movs	r1, #102	; 0x66
 800ce54:	f000 fe2a 	bl	800daac <__assert_func>
 800ce58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce5c:	6006      	str	r6, [r0, #0]
 800ce5e:	60c6      	str	r6, [r0, #12]
 800ce60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce62:	68f3      	ldr	r3, [r6, #12]
 800ce64:	b183      	cbz	r3, 800ce88 <_Balloc+0x50>
 800ce66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce6e:	b9b8      	cbnz	r0, 800cea0 <_Balloc+0x68>
 800ce70:	2101      	movs	r1, #1
 800ce72:	fa01 f605 	lsl.w	r6, r1, r5
 800ce76:	1d72      	adds	r2, r6, #5
 800ce78:	0092      	lsls	r2, r2, #2
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fb60 	bl	800d540 <_calloc_r>
 800ce80:	b160      	cbz	r0, 800ce9c <_Balloc+0x64>
 800ce82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce86:	e00e      	b.n	800cea6 <_Balloc+0x6e>
 800ce88:	2221      	movs	r2, #33	; 0x21
 800ce8a:	2104      	movs	r1, #4
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 fb57 	bl	800d540 <_calloc_r>
 800ce92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce94:	60f0      	str	r0, [r6, #12]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e4      	bne.n	800ce66 <_Balloc+0x2e>
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	6802      	ldr	r2, [r0, #0]
 800cea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cea6:	2300      	movs	r3, #0
 800cea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ceac:	e7f7      	b.n	800ce9e <_Balloc+0x66>
 800ceae:	bf00      	nop
 800ceb0:	0800fe41 	.word	0x0800fe41
 800ceb4:	0800ff24 	.word	0x0800ff24

0800ceb8 <_Bfree>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cebc:	4605      	mov	r5, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	b976      	cbnz	r6, 800cee0 <_Bfree+0x28>
 800cec2:	2010      	movs	r0, #16
 800cec4:	f7ff ffa2 	bl	800ce0c <malloc>
 800cec8:	4602      	mov	r2, r0
 800ceca:	6268      	str	r0, [r5, #36]	; 0x24
 800cecc:	b920      	cbnz	r0, 800ced8 <_Bfree+0x20>
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <_Bfree+0x3c>)
 800ced0:	4809      	ldr	r0, [pc, #36]	; (800cef8 <_Bfree+0x40>)
 800ced2:	218a      	movs	r1, #138	; 0x8a
 800ced4:	f000 fdea 	bl	800daac <__assert_func>
 800ced8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cedc:	6006      	str	r6, [r0, #0]
 800cede:	60c6      	str	r6, [r0, #12]
 800cee0:	b13c      	cbz	r4, 800cef2 <_Bfree+0x3a>
 800cee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cee4:	6862      	ldr	r2, [r4, #4]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceec:	6021      	str	r1, [r4, #0]
 800ceee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	0800fe41 	.word	0x0800fe41
 800cef8:	0800ff24 	.word	0x0800ff24

0800cefc <__multadd>:
 800cefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf00:	690d      	ldr	r5, [r1, #16]
 800cf02:	4607      	mov	r7, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	461e      	mov	r6, r3
 800cf08:	f101 0c14 	add.w	ip, r1, #20
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf12:	b299      	uxth	r1, r3
 800cf14:	fb02 6101 	mla	r1, r2, r1, r6
 800cf18:	0c1e      	lsrs	r6, r3, #16
 800cf1a:	0c0b      	lsrs	r3, r1, #16
 800cf1c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf20:	b289      	uxth	r1, r1
 800cf22:	3001      	adds	r0, #1
 800cf24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf28:	4285      	cmp	r5, r0
 800cf2a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf32:	dcec      	bgt.n	800cf0e <__multadd+0x12>
 800cf34:	b30e      	cbz	r6, 800cf7a <__multadd+0x7e>
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	42ab      	cmp	r3, r5
 800cf3a:	dc19      	bgt.n	800cf70 <__multadd+0x74>
 800cf3c:	6861      	ldr	r1, [r4, #4]
 800cf3e:	4638      	mov	r0, r7
 800cf40:	3101      	adds	r1, #1
 800cf42:	f7ff ff79 	bl	800ce38 <_Balloc>
 800cf46:	4680      	mov	r8, r0
 800cf48:	b928      	cbnz	r0, 800cf56 <__multadd+0x5a>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <__multadd+0x84>)
 800cf4e:	480d      	ldr	r0, [pc, #52]	; (800cf84 <__multadd+0x88>)
 800cf50:	21b5      	movs	r1, #181	; 0xb5
 800cf52:	f000 fdab 	bl	800daac <__assert_func>
 800cf56:	6922      	ldr	r2, [r4, #16]
 800cf58:	3202      	adds	r2, #2
 800cf5a:	f104 010c 	add.w	r1, r4, #12
 800cf5e:	0092      	lsls	r2, r2, #2
 800cf60:	300c      	adds	r0, #12
 800cf62:	f7ff ff5b 	bl	800ce1c <memcpy>
 800cf66:	4621      	mov	r1, r4
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff ffa5 	bl	800ceb8 <_Bfree>
 800cf6e:	4644      	mov	r4, r8
 800cf70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf74:	3501      	adds	r5, #1
 800cf76:	615e      	str	r6, [r3, #20]
 800cf78:	6125      	str	r5, [r4, #16]
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf80:	0800feb3 	.word	0x0800feb3
 800cf84:	0800ff24 	.word	0x0800ff24

0800cf88 <__hi0bits>:
 800cf88:	0c03      	lsrs	r3, r0, #16
 800cf8a:	041b      	lsls	r3, r3, #16
 800cf8c:	b9d3      	cbnz	r3, 800cfc4 <__hi0bits+0x3c>
 800cf8e:	0400      	lsls	r0, r0, #16
 800cf90:	2310      	movs	r3, #16
 800cf92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf96:	bf04      	itt	eq
 800cf98:	0200      	lsleq	r0, r0, #8
 800cf9a:	3308      	addeq	r3, #8
 800cf9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfa0:	bf04      	itt	eq
 800cfa2:	0100      	lsleq	r0, r0, #4
 800cfa4:	3304      	addeq	r3, #4
 800cfa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfaa:	bf04      	itt	eq
 800cfac:	0080      	lsleq	r0, r0, #2
 800cfae:	3302      	addeq	r3, #2
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	db05      	blt.n	800cfc0 <__hi0bits+0x38>
 800cfb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfb8:	f103 0301 	add.w	r3, r3, #1
 800cfbc:	bf08      	it	eq
 800cfbe:	2320      	moveq	r3, #32
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	4770      	bx	lr
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	e7e4      	b.n	800cf92 <__hi0bits+0xa>

0800cfc8 <__lo0bits>:
 800cfc8:	6803      	ldr	r3, [r0, #0]
 800cfca:	f013 0207 	ands.w	r2, r3, #7
 800cfce:	4601      	mov	r1, r0
 800cfd0:	d00b      	beq.n	800cfea <__lo0bits+0x22>
 800cfd2:	07da      	lsls	r2, r3, #31
 800cfd4:	d423      	bmi.n	800d01e <__lo0bits+0x56>
 800cfd6:	0798      	lsls	r0, r3, #30
 800cfd8:	bf49      	itett	mi
 800cfda:	085b      	lsrmi	r3, r3, #1
 800cfdc:	089b      	lsrpl	r3, r3, #2
 800cfde:	2001      	movmi	r0, #1
 800cfe0:	600b      	strmi	r3, [r1, #0]
 800cfe2:	bf5c      	itt	pl
 800cfe4:	600b      	strpl	r3, [r1, #0]
 800cfe6:	2002      	movpl	r0, #2
 800cfe8:	4770      	bx	lr
 800cfea:	b298      	uxth	r0, r3
 800cfec:	b9a8      	cbnz	r0, 800d01a <__lo0bits+0x52>
 800cfee:	0c1b      	lsrs	r3, r3, #16
 800cff0:	2010      	movs	r0, #16
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	b90a      	cbnz	r2, 800cffa <__lo0bits+0x32>
 800cff6:	3008      	adds	r0, #8
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	071a      	lsls	r2, r3, #28
 800cffc:	bf04      	itt	eq
 800cffe:	091b      	lsreq	r3, r3, #4
 800d000:	3004      	addeq	r0, #4
 800d002:	079a      	lsls	r2, r3, #30
 800d004:	bf04      	itt	eq
 800d006:	089b      	lsreq	r3, r3, #2
 800d008:	3002      	addeq	r0, #2
 800d00a:	07da      	lsls	r2, r3, #31
 800d00c:	d403      	bmi.n	800d016 <__lo0bits+0x4e>
 800d00e:	085b      	lsrs	r3, r3, #1
 800d010:	f100 0001 	add.w	r0, r0, #1
 800d014:	d005      	beq.n	800d022 <__lo0bits+0x5a>
 800d016:	600b      	str	r3, [r1, #0]
 800d018:	4770      	bx	lr
 800d01a:	4610      	mov	r0, r2
 800d01c:	e7e9      	b.n	800cff2 <__lo0bits+0x2a>
 800d01e:	2000      	movs	r0, #0
 800d020:	4770      	bx	lr
 800d022:	2020      	movs	r0, #32
 800d024:	4770      	bx	lr
	...

0800d028 <__i2b>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	2101      	movs	r1, #1
 800d02e:	f7ff ff03 	bl	800ce38 <_Balloc>
 800d032:	4602      	mov	r2, r0
 800d034:	b928      	cbnz	r0, 800d042 <__i2b+0x1a>
 800d036:	4b05      	ldr	r3, [pc, #20]	; (800d04c <__i2b+0x24>)
 800d038:	4805      	ldr	r0, [pc, #20]	; (800d050 <__i2b+0x28>)
 800d03a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d03e:	f000 fd35 	bl	800daac <__assert_func>
 800d042:	2301      	movs	r3, #1
 800d044:	6144      	str	r4, [r0, #20]
 800d046:	6103      	str	r3, [r0, #16]
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	bf00      	nop
 800d04c:	0800feb3 	.word	0x0800feb3
 800d050:	0800ff24 	.word	0x0800ff24

0800d054 <__multiply>:
 800d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d058:	4691      	mov	r9, r2
 800d05a:	690a      	ldr	r2, [r1, #16]
 800d05c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d060:	429a      	cmp	r2, r3
 800d062:	bfb8      	it	lt
 800d064:	460b      	movlt	r3, r1
 800d066:	460c      	mov	r4, r1
 800d068:	bfbc      	itt	lt
 800d06a:	464c      	movlt	r4, r9
 800d06c:	4699      	movlt	r9, r3
 800d06e:	6927      	ldr	r7, [r4, #16]
 800d070:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d074:	68a3      	ldr	r3, [r4, #8]
 800d076:	6861      	ldr	r1, [r4, #4]
 800d078:	eb07 060a 	add.w	r6, r7, sl
 800d07c:	42b3      	cmp	r3, r6
 800d07e:	b085      	sub	sp, #20
 800d080:	bfb8      	it	lt
 800d082:	3101      	addlt	r1, #1
 800d084:	f7ff fed8 	bl	800ce38 <_Balloc>
 800d088:	b930      	cbnz	r0, 800d098 <__multiply+0x44>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4b44      	ldr	r3, [pc, #272]	; (800d1a0 <__multiply+0x14c>)
 800d08e:	4845      	ldr	r0, [pc, #276]	; (800d1a4 <__multiply+0x150>)
 800d090:	f240 115d 	movw	r1, #349	; 0x15d
 800d094:	f000 fd0a 	bl	800daac <__assert_func>
 800d098:	f100 0514 	add.w	r5, r0, #20
 800d09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0a0:	462b      	mov	r3, r5
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4543      	cmp	r3, r8
 800d0a6:	d321      	bcc.n	800d0ec <__multiply+0x98>
 800d0a8:	f104 0314 	add.w	r3, r4, #20
 800d0ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0b0:	f109 0314 	add.w	r3, r9, #20
 800d0b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0b8:	9202      	str	r2, [sp, #8]
 800d0ba:	1b3a      	subs	r2, r7, r4
 800d0bc:	3a15      	subs	r2, #21
 800d0be:	f022 0203 	bic.w	r2, r2, #3
 800d0c2:	3204      	adds	r2, #4
 800d0c4:	f104 0115 	add.w	r1, r4, #21
 800d0c8:	428f      	cmp	r7, r1
 800d0ca:	bf38      	it	cc
 800d0cc:	2204      	movcc	r2, #4
 800d0ce:	9201      	str	r2, [sp, #4]
 800d0d0:	9a02      	ldr	r2, [sp, #8]
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d80c      	bhi.n	800d0f2 <__multiply+0x9e>
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	dd03      	ble.n	800d0e4 <__multiply+0x90>
 800d0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d05a      	beq.n	800d19a <__multiply+0x146>
 800d0e4:	6106      	str	r6, [r0, #16]
 800d0e6:	b005      	add	sp, #20
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	f843 2b04 	str.w	r2, [r3], #4
 800d0f0:	e7d8      	b.n	800d0a4 <__multiply+0x50>
 800d0f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0f6:	f1ba 0f00 	cmp.w	sl, #0
 800d0fa:	d024      	beq.n	800d146 <__multiply+0xf2>
 800d0fc:	f104 0e14 	add.w	lr, r4, #20
 800d100:	46a9      	mov	r9, r5
 800d102:	f04f 0c00 	mov.w	ip, #0
 800d106:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d10a:	f8d9 1000 	ldr.w	r1, [r9]
 800d10e:	fa1f fb82 	uxth.w	fp, r2
 800d112:	b289      	uxth	r1, r1
 800d114:	fb0a 110b 	mla	r1, sl, fp, r1
 800d118:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d11c:	f8d9 2000 	ldr.w	r2, [r9]
 800d120:	4461      	add	r1, ip
 800d122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d126:	fb0a c20b 	mla	r2, sl, fp, ip
 800d12a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d12e:	b289      	uxth	r1, r1
 800d130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d134:	4577      	cmp	r7, lr
 800d136:	f849 1b04 	str.w	r1, [r9], #4
 800d13a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d13e:	d8e2      	bhi.n	800d106 <__multiply+0xb2>
 800d140:	9a01      	ldr	r2, [sp, #4]
 800d142:	f845 c002 	str.w	ip, [r5, r2]
 800d146:	9a03      	ldr	r2, [sp, #12]
 800d148:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d14c:	3304      	adds	r3, #4
 800d14e:	f1b9 0f00 	cmp.w	r9, #0
 800d152:	d020      	beq.n	800d196 <__multiply+0x142>
 800d154:	6829      	ldr	r1, [r5, #0]
 800d156:	f104 0c14 	add.w	ip, r4, #20
 800d15a:	46ae      	mov	lr, r5
 800d15c:	f04f 0a00 	mov.w	sl, #0
 800d160:	f8bc b000 	ldrh.w	fp, [ip]
 800d164:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d168:	fb09 220b 	mla	r2, r9, fp, r2
 800d16c:	4492      	add	sl, r2
 800d16e:	b289      	uxth	r1, r1
 800d170:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d174:	f84e 1b04 	str.w	r1, [lr], #4
 800d178:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d17c:	f8be 1000 	ldrh.w	r1, [lr]
 800d180:	0c12      	lsrs	r2, r2, #16
 800d182:	fb09 1102 	mla	r1, r9, r2, r1
 800d186:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d18a:	4567      	cmp	r7, ip
 800d18c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d190:	d8e6      	bhi.n	800d160 <__multiply+0x10c>
 800d192:	9a01      	ldr	r2, [sp, #4]
 800d194:	50a9      	str	r1, [r5, r2]
 800d196:	3504      	adds	r5, #4
 800d198:	e79a      	b.n	800d0d0 <__multiply+0x7c>
 800d19a:	3e01      	subs	r6, #1
 800d19c:	e79c      	b.n	800d0d8 <__multiply+0x84>
 800d19e:	bf00      	nop
 800d1a0:	0800feb3 	.word	0x0800feb3
 800d1a4:	0800ff24 	.word	0x0800ff24

0800d1a8 <__pow5mult>:
 800d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	4615      	mov	r5, r2
 800d1ae:	f012 0203 	ands.w	r2, r2, #3
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460f      	mov	r7, r1
 800d1b6:	d007      	beq.n	800d1c8 <__pow5mult+0x20>
 800d1b8:	4c25      	ldr	r4, [pc, #148]	; (800d250 <__pow5mult+0xa8>)
 800d1ba:	3a01      	subs	r2, #1
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1c2:	f7ff fe9b 	bl	800cefc <__multadd>
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	10ad      	asrs	r5, r5, #2
 800d1ca:	d03d      	beq.n	800d248 <__pow5mult+0xa0>
 800d1cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1ce:	b97c      	cbnz	r4, 800d1f0 <__pow5mult+0x48>
 800d1d0:	2010      	movs	r0, #16
 800d1d2:	f7ff fe1b 	bl	800ce0c <malloc>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d1da:	b928      	cbnz	r0, 800d1e8 <__pow5mult+0x40>
 800d1dc:	4b1d      	ldr	r3, [pc, #116]	; (800d254 <__pow5mult+0xac>)
 800d1de:	481e      	ldr	r0, [pc, #120]	; (800d258 <__pow5mult+0xb0>)
 800d1e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1e4:	f000 fc62 	bl	800daac <__assert_func>
 800d1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1ec:	6004      	str	r4, [r0, #0]
 800d1ee:	60c4      	str	r4, [r0, #12]
 800d1f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1f8:	b94c      	cbnz	r4, 800d20e <__pow5mult+0x66>
 800d1fa:	f240 2171 	movw	r1, #625	; 0x271
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ff12 	bl	800d028 <__i2b>
 800d204:	2300      	movs	r3, #0
 800d206:	f8c8 0008 	str.w	r0, [r8, #8]
 800d20a:	4604      	mov	r4, r0
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	f04f 0900 	mov.w	r9, #0
 800d212:	07eb      	lsls	r3, r5, #31
 800d214:	d50a      	bpl.n	800d22c <__pow5mult+0x84>
 800d216:	4639      	mov	r1, r7
 800d218:	4622      	mov	r2, r4
 800d21a:	4630      	mov	r0, r6
 800d21c:	f7ff ff1a 	bl	800d054 <__multiply>
 800d220:	4639      	mov	r1, r7
 800d222:	4680      	mov	r8, r0
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff fe47 	bl	800ceb8 <_Bfree>
 800d22a:	4647      	mov	r7, r8
 800d22c:	106d      	asrs	r5, r5, #1
 800d22e:	d00b      	beq.n	800d248 <__pow5mult+0xa0>
 800d230:	6820      	ldr	r0, [r4, #0]
 800d232:	b938      	cbnz	r0, 800d244 <__pow5mult+0x9c>
 800d234:	4622      	mov	r2, r4
 800d236:	4621      	mov	r1, r4
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ff0b 	bl	800d054 <__multiply>
 800d23e:	6020      	str	r0, [r4, #0]
 800d240:	f8c0 9000 	str.w	r9, [r0]
 800d244:	4604      	mov	r4, r0
 800d246:	e7e4      	b.n	800d212 <__pow5mult+0x6a>
 800d248:	4638      	mov	r0, r7
 800d24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d24e:	bf00      	nop
 800d250:	08010070 	.word	0x08010070
 800d254:	0800fe41 	.word	0x0800fe41
 800d258:	0800ff24 	.word	0x0800ff24

0800d25c <__lshift>:
 800d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d260:	460c      	mov	r4, r1
 800d262:	6849      	ldr	r1, [r1, #4]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	4607      	mov	r7, r0
 800d26e:	4691      	mov	r9, r2
 800d270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d274:	f108 0601 	add.w	r6, r8, #1
 800d278:	42b3      	cmp	r3, r6
 800d27a:	db0b      	blt.n	800d294 <__lshift+0x38>
 800d27c:	4638      	mov	r0, r7
 800d27e:	f7ff fddb 	bl	800ce38 <_Balloc>
 800d282:	4605      	mov	r5, r0
 800d284:	b948      	cbnz	r0, 800d29a <__lshift+0x3e>
 800d286:	4602      	mov	r2, r0
 800d288:	4b2a      	ldr	r3, [pc, #168]	; (800d334 <__lshift+0xd8>)
 800d28a:	482b      	ldr	r0, [pc, #172]	; (800d338 <__lshift+0xdc>)
 800d28c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d290:	f000 fc0c 	bl	800daac <__assert_func>
 800d294:	3101      	adds	r1, #1
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	e7ee      	b.n	800d278 <__lshift+0x1c>
 800d29a:	2300      	movs	r3, #0
 800d29c:	f100 0114 	add.w	r1, r0, #20
 800d2a0:	f100 0210 	add.w	r2, r0, #16
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	4553      	cmp	r3, sl
 800d2a8:	db37      	blt.n	800d31a <__lshift+0xbe>
 800d2aa:	6920      	ldr	r0, [r4, #16]
 800d2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2b0:	f104 0314 	add.w	r3, r4, #20
 800d2b4:	f019 091f 	ands.w	r9, r9, #31
 800d2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d2c0:	d02f      	beq.n	800d322 <__lshift+0xc6>
 800d2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d2c6:	468a      	mov	sl, r1
 800d2c8:	f04f 0c00 	mov.w	ip, #0
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	fa02 f209 	lsl.w	r2, r2, r9
 800d2d2:	ea42 020c 	orr.w	r2, r2, ip
 800d2d6:	f84a 2b04 	str.w	r2, [sl], #4
 800d2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2de:	4298      	cmp	r0, r3
 800d2e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d2e4:	d8f2      	bhi.n	800d2cc <__lshift+0x70>
 800d2e6:	1b03      	subs	r3, r0, r4
 800d2e8:	3b15      	subs	r3, #21
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	f104 0215 	add.w	r2, r4, #21
 800d2f4:	4290      	cmp	r0, r2
 800d2f6:	bf38      	it	cc
 800d2f8:	2304      	movcc	r3, #4
 800d2fa:	f841 c003 	str.w	ip, [r1, r3]
 800d2fe:	f1bc 0f00 	cmp.w	ip, #0
 800d302:	d001      	beq.n	800d308 <__lshift+0xac>
 800d304:	f108 0602 	add.w	r6, r8, #2
 800d308:	3e01      	subs	r6, #1
 800d30a:	4638      	mov	r0, r7
 800d30c:	612e      	str	r6, [r5, #16]
 800d30e:	4621      	mov	r1, r4
 800d310:	f7ff fdd2 	bl	800ceb8 <_Bfree>
 800d314:	4628      	mov	r0, r5
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d31e:	3301      	adds	r3, #1
 800d320:	e7c1      	b.n	800d2a6 <__lshift+0x4a>
 800d322:	3904      	subs	r1, #4
 800d324:	f853 2b04 	ldr.w	r2, [r3], #4
 800d328:	f841 2f04 	str.w	r2, [r1, #4]!
 800d32c:	4298      	cmp	r0, r3
 800d32e:	d8f9      	bhi.n	800d324 <__lshift+0xc8>
 800d330:	e7ea      	b.n	800d308 <__lshift+0xac>
 800d332:	bf00      	nop
 800d334:	0800feb3 	.word	0x0800feb3
 800d338:	0800ff24 	.word	0x0800ff24

0800d33c <__mcmp>:
 800d33c:	b530      	push	{r4, r5, lr}
 800d33e:	6902      	ldr	r2, [r0, #16]
 800d340:	690c      	ldr	r4, [r1, #16]
 800d342:	1b12      	subs	r2, r2, r4
 800d344:	d10e      	bne.n	800d364 <__mcmp+0x28>
 800d346:	f100 0314 	add.w	r3, r0, #20
 800d34a:	3114      	adds	r1, #20
 800d34c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d350:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d354:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d358:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d35c:	42a5      	cmp	r5, r4
 800d35e:	d003      	beq.n	800d368 <__mcmp+0x2c>
 800d360:	d305      	bcc.n	800d36e <__mcmp+0x32>
 800d362:	2201      	movs	r2, #1
 800d364:	4610      	mov	r0, r2
 800d366:	bd30      	pop	{r4, r5, pc}
 800d368:	4283      	cmp	r3, r0
 800d36a:	d3f3      	bcc.n	800d354 <__mcmp+0x18>
 800d36c:	e7fa      	b.n	800d364 <__mcmp+0x28>
 800d36e:	f04f 32ff 	mov.w	r2, #4294967295
 800d372:	e7f7      	b.n	800d364 <__mcmp+0x28>

0800d374 <__mdiff>:
 800d374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	460c      	mov	r4, r1
 800d37a:	4606      	mov	r6, r0
 800d37c:	4611      	mov	r1, r2
 800d37e:	4620      	mov	r0, r4
 800d380:	4690      	mov	r8, r2
 800d382:	f7ff ffdb 	bl	800d33c <__mcmp>
 800d386:	1e05      	subs	r5, r0, #0
 800d388:	d110      	bne.n	800d3ac <__mdiff+0x38>
 800d38a:	4629      	mov	r1, r5
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fd53 	bl	800ce38 <_Balloc>
 800d392:	b930      	cbnz	r0, 800d3a2 <__mdiff+0x2e>
 800d394:	4b3a      	ldr	r3, [pc, #232]	; (800d480 <__mdiff+0x10c>)
 800d396:	4602      	mov	r2, r0
 800d398:	f240 2132 	movw	r1, #562	; 0x232
 800d39c:	4839      	ldr	r0, [pc, #228]	; (800d484 <__mdiff+0x110>)
 800d39e:	f000 fb85 	bl	800daac <__assert_func>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	bfa4      	itt	ge
 800d3ae:	4643      	movge	r3, r8
 800d3b0:	46a0      	movge	r8, r4
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3b8:	bfa6      	itte	ge
 800d3ba:	461c      	movge	r4, r3
 800d3bc:	2500      	movge	r5, #0
 800d3be:	2501      	movlt	r5, #1
 800d3c0:	f7ff fd3a 	bl	800ce38 <_Balloc>
 800d3c4:	b920      	cbnz	r0, 800d3d0 <__mdiff+0x5c>
 800d3c6:	4b2e      	ldr	r3, [pc, #184]	; (800d480 <__mdiff+0x10c>)
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3ce:	e7e5      	b.n	800d39c <__mdiff+0x28>
 800d3d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3d4:	6926      	ldr	r6, [r4, #16]
 800d3d6:	60c5      	str	r5, [r0, #12]
 800d3d8:	f104 0914 	add.w	r9, r4, #20
 800d3dc:	f108 0514 	add.w	r5, r8, #20
 800d3e0:	f100 0e14 	add.w	lr, r0, #20
 800d3e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3ec:	f108 0210 	add.w	r2, r8, #16
 800d3f0:	46f2      	mov	sl, lr
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3fc:	fa1f f883 	uxth.w	r8, r3
 800d400:	fa11 f18b 	uxtah	r1, r1, fp
 800d404:	0c1b      	lsrs	r3, r3, #16
 800d406:	eba1 0808 	sub.w	r8, r1, r8
 800d40a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d40e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d412:	fa1f f888 	uxth.w	r8, r8
 800d416:	1419      	asrs	r1, r3, #16
 800d418:	454e      	cmp	r6, r9
 800d41a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d41e:	f84a 3b04 	str.w	r3, [sl], #4
 800d422:	d8e7      	bhi.n	800d3f4 <__mdiff+0x80>
 800d424:	1b33      	subs	r3, r6, r4
 800d426:	3b15      	subs	r3, #21
 800d428:	f023 0303 	bic.w	r3, r3, #3
 800d42c:	3304      	adds	r3, #4
 800d42e:	3415      	adds	r4, #21
 800d430:	42a6      	cmp	r6, r4
 800d432:	bf38      	it	cc
 800d434:	2304      	movcc	r3, #4
 800d436:	441d      	add	r5, r3
 800d438:	4473      	add	r3, lr
 800d43a:	469e      	mov	lr, r3
 800d43c:	462e      	mov	r6, r5
 800d43e:	4566      	cmp	r6, ip
 800d440:	d30e      	bcc.n	800d460 <__mdiff+0xec>
 800d442:	f10c 0203 	add.w	r2, ip, #3
 800d446:	1b52      	subs	r2, r2, r5
 800d448:	f022 0203 	bic.w	r2, r2, #3
 800d44c:	3d03      	subs	r5, #3
 800d44e:	45ac      	cmp	ip, r5
 800d450:	bf38      	it	cc
 800d452:	2200      	movcc	r2, #0
 800d454:	441a      	add	r2, r3
 800d456:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d45a:	b17b      	cbz	r3, 800d47c <__mdiff+0x108>
 800d45c:	6107      	str	r7, [r0, #16]
 800d45e:	e7a3      	b.n	800d3a8 <__mdiff+0x34>
 800d460:	f856 8b04 	ldr.w	r8, [r6], #4
 800d464:	fa11 f288 	uxtah	r2, r1, r8
 800d468:	1414      	asrs	r4, r2, #16
 800d46a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d46e:	b292      	uxth	r2, r2
 800d470:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d474:	f84e 2b04 	str.w	r2, [lr], #4
 800d478:	1421      	asrs	r1, r4, #16
 800d47a:	e7e0      	b.n	800d43e <__mdiff+0xca>
 800d47c:	3f01      	subs	r7, #1
 800d47e:	e7ea      	b.n	800d456 <__mdiff+0xe2>
 800d480:	0800feb3 	.word	0x0800feb3
 800d484:	0800ff24 	.word	0x0800ff24

0800d488 <__d2b>:
 800d488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d48c:	4689      	mov	r9, r1
 800d48e:	2101      	movs	r1, #1
 800d490:	ec57 6b10 	vmov	r6, r7, d0
 800d494:	4690      	mov	r8, r2
 800d496:	f7ff fccf 	bl	800ce38 <_Balloc>
 800d49a:	4604      	mov	r4, r0
 800d49c:	b930      	cbnz	r0, 800d4ac <__d2b+0x24>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b25      	ldr	r3, [pc, #148]	; (800d538 <__d2b+0xb0>)
 800d4a2:	4826      	ldr	r0, [pc, #152]	; (800d53c <__d2b+0xb4>)
 800d4a4:	f240 310a 	movw	r1, #778	; 0x30a
 800d4a8:	f000 fb00 	bl	800daac <__assert_func>
 800d4ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4b4:	bb35      	cbnz	r5, 800d504 <__d2b+0x7c>
 800d4b6:	2e00      	cmp	r6, #0
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	d028      	beq.n	800d50e <__d2b+0x86>
 800d4bc:	4668      	mov	r0, sp
 800d4be:	9600      	str	r6, [sp, #0]
 800d4c0:	f7ff fd82 	bl	800cfc8 <__lo0bits>
 800d4c4:	9900      	ldr	r1, [sp, #0]
 800d4c6:	b300      	cbz	r0, 800d50a <__d2b+0x82>
 800d4c8:	9a01      	ldr	r2, [sp, #4]
 800d4ca:	f1c0 0320 	rsb	r3, r0, #32
 800d4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d2:	430b      	orrs	r3, r1
 800d4d4:	40c2      	lsrs	r2, r0
 800d4d6:	6163      	str	r3, [r4, #20]
 800d4d8:	9201      	str	r2, [sp, #4]
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	61a3      	str	r3, [r4, #24]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bf14      	ite	ne
 800d4e2:	2202      	movne	r2, #2
 800d4e4:	2201      	moveq	r2, #1
 800d4e6:	6122      	str	r2, [r4, #16]
 800d4e8:	b1d5      	cbz	r5, 800d520 <__d2b+0x98>
 800d4ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4ee:	4405      	add	r5, r0
 800d4f0:	f8c9 5000 	str.w	r5, [r9]
 800d4f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4f8:	f8c8 0000 	str.w	r0, [r8]
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	b003      	add	sp, #12
 800d500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d508:	e7d5      	b.n	800d4b6 <__d2b+0x2e>
 800d50a:	6161      	str	r1, [r4, #20]
 800d50c:	e7e5      	b.n	800d4da <__d2b+0x52>
 800d50e:	a801      	add	r0, sp, #4
 800d510:	f7ff fd5a 	bl	800cfc8 <__lo0bits>
 800d514:	9b01      	ldr	r3, [sp, #4]
 800d516:	6163      	str	r3, [r4, #20]
 800d518:	2201      	movs	r2, #1
 800d51a:	6122      	str	r2, [r4, #16]
 800d51c:	3020      	adds	r0, #32
 800d51e:	e7e3      	b.n	800d4e8 <__d2b+0x60>
 800d520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d528:	f8c9 0000 	str.w	r0, [r9]
 800d52c:	6918      	ldr	r0, [r3, #16]
 800d52e:	f7ff fd2b 	bl	800cf88 <__hi0bits>
 800d532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d536:	e7df      	b.n	800d4f8 <__d2b+0x70>
 800d538:	0800feb3 	.word	0x0800feb3
 800d53c:	0800ff24 	.word	0x0800ff24

0800d540 <_calloc_r>:
 800d540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d542:	fba1 2402 	umull	r2, r4, r1, r2
 800d546:	b94c      	cbnz	r4, 800d55c <_calloc_r+0x1c>
 800d548:	4611      	mov	r1, r2
 800d54a:	9201      	str	r2, [sp, #4]
 800d54c:	f000 f87a 	bl	800d644 <_malloc_r>
 800d550:	9a01      	ldr	r2, [sp, #4]
 800d552:	4605      	mov	r5, r0
 800d554:	b930      	cbnz	r0, 800d564 <_calloc_r+0x24>
 800d556:	4628      	mov	r0, r5
 800d558:	b003      	add	sp, #12
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	220c      	movs	r2, #12
 800d55e:	6002      	str	r2, [r0, #0]
 800d560:	2500      	movs	r5, #0
 800d562:	e7f8      	b.n	800d556 <_calloc_r+0x16>
 800d564:	4621      	mov	r1, r4
 800d566:	f7fd fe9b 	bl	800b2a0 <memset>
 800d56a:	e7f4      	b.n	800d556 <_calloc_r+0x16>

0800d56c <_free_r>:
 800d56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d56e:	2900      	cmp	r1, #0
 800d570:	d044      	beq.n	800d5fc <_free_r+0x90>
 800d572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d576:	9001      	str	r0, [sp, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f1a1 0404 	sub.w	r4, r1, #4
 800d57e:	bfb8      	it	lt
 800d580:	18e4      	addlt	r4, r4, r3
 800d582:	f000 fb19 	bl	800dbb8 <__malloc_lock>
 800d586:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <_free_r+0x94>)
 800d588:	9801      	ldr	r0, [sp, #4]
 800d58a:	6813      	ldr	r3, [r2, #0]
 800d58c:	b933      	cbnz	r3, 800d59c <_free_r+0x30>
 800d58e:	6063      	str	r3, [r4, #4]
 800d590:	6014      	str	r4, [r2, #0]
 800d592:	b003      	add	sp, #12
 800d594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d598:	f000 bb14 	b.w	800dbc4 <__malloc_unlock>
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	d908      	bls.n	800d5b2 <_free_r+0x46>
 800d5a0:	6825      	ldr	r5, [r4, #0]
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf01      	itttt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	1949      	addeq	r1, r1, r5
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	e7ed      	b.n	800d58e <_free_r+0x22>
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	b10b      	cbz	r3, 800d5bc <_free_r+0x50>
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	d9fa      	bls.n	800d5b2 <_free_r+0x46>
 800d5bc:	6811      	ldr	r1, [r2, #0]
 800d5be:	1855      	adds	r5, r2, r1
 800d5c0:	42a5      	cmp	r5, r4
 800d5c2:	d10b      	bne.n	800d5dc <_free_r+0x70>
 800d5c4:	6824      	ldr	r4, [r4, #0]
 800d5c6:	4421      	add	r1, r4
 800d5c8:	1854      	adds	r4, r2, r1
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	6011      	str	r1, [r2, #0]
 800d5ce:	d1e0      	bne.n	800d592 <_free_r+0x26>
 800d5d0:	681c      	ldr	r4, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	6053      	str	r3, [r2, #4]
 800d5d6:	4421      	add	r1, r4
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	e7da      	b.n	800d592 <_free_r+0x26>
 800d5dc:	d902      	bls.n	800d5e4 <_free_r+0x78>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	e7d6      	b.n	800d592 <_free_r+0x26>
 800d5e4:	6825      	ldr	r5, [r4, #0]
 800d5e6:	1961      	adds	r1, r4, r5
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf04      	itt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	6063      	str	r3, [r4, #4]
 800d5f2:	bf04      	itt	eq
 800d5f4:	1949      	addeq	r1, r1, r5
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	6054      	str	r4, [r2, #4]
 800d5fa:	e7ca      	b.n	800d592 <_free_r+0x26>
 800d5fc:	b003      	add	sp, #12
 800d5fe:	bd30      	pop	{r4, r5, pc}
 800d600:	24000584 	.word	0x24000584

0800d604 <sbrk_aligned>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4e0e      	ldr	r6, [pc, #56]	; (800d640 <sbrk_aligned+0x3c>)
 800d608:	460c      	mov	r4, r1
 800d60a:	6831      	ldr	r1, [r6, #0]
 800d60c:	4605      	mov	r5, r0
 800d60e:	b911      	cbnz	r1, 800d616 <sbrk_aligned+0x12>
 800d610:	f000 f9e6 	bl	800d9e0 <_sbrk_r>
 800d614:	6030      	str	r0, [r6, #0]
 800d616:	4621      	mov	r1, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	f000 f9e1 	bl	800d9e0 <_sbrk_r>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d00a      	beq.n	800d638 <sbrk_aligned+0x34>
 800d622:	1cc4      	adds	r4, r0, #3
 800d624:	f024 0403 	bic.w	r4, r4, #3
 800d628:	42a0      	cmp	r0, r4
 800d62a:	d007      	beq.n	800d63c <sbrk_aligned+0x38>
 800d62c:	1a21      	subs	r1, r4, r0
 800d62e:	4628      	mov	r0, r5
 800d630:	f000 f9d6 	bl	800d9e0 <_sbrk_r>
 800d634:	3001      	adds	r0, #1
 800d636:	d101      	bne.n	800d63c <sbrk_aligned+0x38>
 800d638:	f04f 34ff 	mov.w	r4, #4294967295
 800d63c:	4620      	mov	r0, r4
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	24000588 	.word	0x24000588

0800d644 <_malloc_r>:
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	1ccd      	adds	r5, r1, #3
 800d64a:	f025 0503 	bic.w	r5, r5, #3
 800d64e:	3508      	adds	r5, #8
 800d650:	2d0c      	cmp	r5, #12
 800d652:	bf38      	it	cc
 800d654:	250c      	movcc	r5, #12
 800d656:	2d00      	cmp	r5, #0
 800d658:	4607      	mov	r7, r0
 800d65a:	db01      	blt.n	800d660 <_malloc_r+0x1c>
 800d65c:	42a9      	cmp	r1, r5
 800d65e:	d905      	bls.n	800d66c <_malloc_r+0x28>
 800d660:	230c      	movs	r3, #12
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	2600      	movs	r6, #0
 800d666:	4630      	mov	r0, r6
 800d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66c:	4e2e      	ldr	r6, [pc, #184]	; (800d728 <_malloc_r+0xe4>)
 800d66e:	f000 faa3 	bl	800dbb8 <__malloc_lock>
 800d672:	6833      	ldr	r3, [r6, #0]
 800d674:	461c      	mov	r4, r3
 800d676:	bb34      	cbnz	r4, 800d6c6 <_malloc_r+0x82>
 800d678:	4629      	mov	r1, r5
 800d67a:	4638      	mov	r0, r7
 800d67c:	f7ff ffc2 	bl	800d604 <sbrk_aligned>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	4604      	mov	r4, r0
 800d684:	d14d      	bne.n	800d722 <_malloc_r+0xde>
 800d686:	6834      	ldr	r4, [r6, #0]
 800d688:	4626      	mov	r6, r4
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d140      	bne.n	800d710 <_malloc_r+0xcc>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	4631      	mov	r1, r6
 800d692:	4638      	mov	r0, r7
 800d694:	eb04 0803 	add.w	r8, r4, r3
 800d698:	f000 f9a2 	bl	800d9e0 <_sbrk_r>
 800d69c:	4580      	cmp	r8, r0
 800d69e:	d13a      	bne.n	800d716 <_malloc_r+0xd2>
 800d6a0:	6821      	ldr	r1, [r4, #0]
 800d6a2:	3503      	adds	r5, #3
 800d6a4:	1a6d      	subs	r5, r5, r1
 800d6a6:	f025 0503 	bic.w	r5, r5, #3
 800d6aa:	3508      	adds	r5, #8
 800d6ac:	2d0c      	cmp	r5, #12
 800d6ae:	bf38      	it	cc
 800d6b0:	250c      	movcc	r5, #12
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ffa5 	bl	800d604 <sbrk_aligned>
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d02b      	beq.n	800d716 <_malloc_r+0xd2>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	442b      	add	r3, r5
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	e00e      	b.n	800d6e4 <_malloc_r+0xa0>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	1b52      	subs	r2, r2, r5
 800d6ca:	d41e      	bmi.n	800d70a <_malloc_r+0xc6>
 800d6cc:	2a0b      	cmp	r2, #11
 800d6ce:	d916      	bls.n	800d6fe <_malloc_r+0xba>
 800d6d0:	1961      	adds	r1, r4, r5
 800d6d2:	42a3      	cmp	r3, r4
 800d6d4:	6025      	str	r5, [r4, #0]
 800d6d6:	bf18      	it	ne
 800d6d8:	6059      	strne	r1, [r3, #4]
 800d6da:	6863      	ldr	r3, [r4, #4]
 800d6dc:	bf08      	it	eq
 800d6de:	6031      	streq	r1, [r6, #0]
 800d6e0:	5162      	str	r2, [r4, r5]
 800d6e2:	604b      	str	r3, [r1, #4]
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f104 060b 	add.w	r6, r4, #11
 800d6ea:	f000 fa6b 	bl	800dbc4 <__malloc_unlock>
 800d6ee:	f026 0607 	bic.w	r6, r6, #7
 800d6f2:	1d23      	adds	r3, r4, #4
 800d6f4:	1af2      	subs	r2, r6, r3
 800d6f6:	d0b6      	beq.n	800d666 <_malloc_r+0x22>
 800d6f8:	1b9b      	subs	r3, r3, r6
 800d6fa:	50a3      	str	r3, [r4, r2]
 800d6fc:	e7b3      	b.n	800d666 <_malloc_r+0x22>
 800d6fe:	6862      	ldr	r2, [r4, #4]
 800d700:	42a3      	cmp	r3, r4
 800d702:	bf0c      	ite	eq
 800d704:	6032      	streq	r2, [r6, #0]
 800d706:	605a      	strne	r2, [r3, #4]
 800d708:	e7ec      	b.n	800d6e4 <_malloc_r+0xa0>
 800d70a:	4623      	mov	r3, r4
 800d70c:	6864      	ldr	r4, [r4, #4]
 800d70e:	e7b2      	b.n	800d676 <_malloc_r+0x32>
 800d710:	4634      	mov	r4, r6
 800d712:	6876      	ldr	r6, [r6, #4]
 800d714:	e7b9      	b.n	800d68a <_malloc_r+0x46>
 800d716:	230c      	movs	r3, #12
 800d718:	603b      	str	r3, [r7, #0]
 800d71a:	4638      	mov	r0, r7
 800d71c:	f000 fa52 	bl	800dbc4 <__malloc_unlock>
 800d720:	e7a1      	b.n	800d666 <_malloc_r+0x22>
 800d722:	6025      	str	r5, [r4, #0]
 800d724:	e7de      	b.n	800d6e4 <_malloc_r+0xa0>
 800d726:	bf00      	nop
 800d728:	24000584 	.word	0x24000584

0800d72c <__sfputc_r>:
 800d72c:	6893      	ldr	r3, [r2, #8]
 800d72e:	3b01      	subs	r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	b410      	push	{r4}
 800d734:	6093      	str	r3, [r2, #8]
 800d736:	da08      	bge.n	800d74a <__sfputc_r+0x1e>
 800d738:	6994      	ldr	r4, [r2, #24]
 800d73a:	42a3      	cmp	r3, r4
 800d73c:	db01      	blt.n	800d742 <__sfputc_r+0x16>
 800d73e:	290a      	cmp	r1, #10
 800d740:	d103      	bne.n	800d74a <__sfputc_r+0x1e>
 800d742:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d746:	f7fe ba83 	b.w	800bc50 <__swbuf_r>
 800d74a:	6813      	ldr	r3, [r2, #0]
 800d74c:	1c58      	adds	r0, r3, #1
 800d74e:	6010      	str	r0, [r2, #0]
 800d750:	7019      	strb	r1, [r3, #0]
 800d752:	4608      	mov	r0, r1
 800d754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <__sfputs_r>:
 800d75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	4614      	mov	r4, r2
 800d762:	18d5      	adds	r5, r2, r3
 800d764:	42ac      	cmp	r4, r5
 800d766:	d101      	bne.n	800d76c <__sfputs_r+0x12>
 800d768:	2000      	movs	r0, #0
 800d76a:	e007      	b.n	800d77c <__sfputs_r+0x22>
 800d76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d770:	463a      	mov	r2, r7
 800d772:	4630      	mov	r0, r6
 800d774:	f7ff ffda 	bl	800d72c <__sfputc_r>
 800d778:	1c43      	adds	r3, r0, #1
 800d77a:	d1f3      	bne.n	800d764 <__sfputs_r+0xa>
 800d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d780 <_vfiprintf_r>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	460d      	mov	r5, r1
 800d786:	b09d      	sub	sp, #116	; 0x74
 800d788:	4614      	mov	r4, r2
 800d78a:	4698      	mov	r8, r3
 800d78c:	4606      	mov	r6, r0
 800d78e:	b118      	cbz	r0, 800d798 <_vfiprintf_r+0x18>
 800d790:	6983      	ldr	r3, [r0, #24]
 800d792:	b90b      	cbnz	r3, 800d798 <_vfiprintf_r+0x18>
 800d794:	f7ff fa30 	bl	800cbf8 <__sinit>
 800d798:	4b89      	ldr	r3, [pc, #548]	; (800d9c0 <_vfiprintf_r+0x240>)
 800d79a:	429d      	cmp	r5, r3
 800d79c:	d11b      	bne.n	800d7d6 <_vfiprintf_r+0x56>
 800d79e:	6875      	ldr	r5, [r6, #4]
 800d7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_vfiprintf_r+0x32>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_vfiprintf_r+0x32>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ae:	f7ff fac6 	bl	800cd3e <__retarget_lock_acquire_recursive>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	071b      	lsls	r3, r3, #28
 800d7b6:	d501      	bpl.n	800d7bc <_vfiprintf_r+0x3c>
 800d7b8:	692b      	ldr	r3, [r5, #16]
 800d7ba:	b9eb      	cbnz	r3, 800d7f8 <_vfiprintf_r+0x78>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7fe fa98 	bl	800bcf4 <__swsetup_r>
 800d7c4:	b1c0      	cbz	r0, 800d7f8 <_vfiprintf_r+0x78>
 800d7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7c8:	07dc      	lsls	r4, r3, #31
 800d7ca:	d50e      	bpl.n	800d7ea <_vfiprintf_r+0x6a>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b01d      	add	sp, #116	; 0x74
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	4b7b      	ldr	r3, [pc, #492]	; (800d9c4 <_vfiprintf_r+0x244>)
 800d7d8:	429d      	cmp	r5, r3
 800d7da:	d101      	bne.n	800d7e0 <_vfiprintf_r+0x60>
 800d7dc:	68b5      	ldr	r5, [r6, #8]
 800d7de:	e7df      	b.n	800d7a0 <_vfiprintf_r+0x20>
 800d7e0:	4b79      	ldr	r3, [pc, #484]	; (800d9c8 <_vfiprintf_r+0x248>)
 800d7e2:	429d      	cmp	r5, r3
 800d7e4:	bf08      	it	eq
 800d7e6:	68f5      	ldreq	r5, [r6, #12]
 800d7e8:	e7da      	b.n	800d7a0 <_vfiprintf_r+0x20>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	0598      	lsls	r0, r3, #22
 800d7ee:	d4ed      	bmi.n	800d7cc <_vfiprintf_r+0x4c>
 800d7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7f2:	f7ff faa5 	bl	800cd40 <__retarget_lock_release_recursive>
 800d7f6:	e7e9      	b.n	800d7cc <_vfiprintf_r+0x4c>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fc:	2320      	movs	r3, #32
 800d7fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d802:	f8cd 800c 	str.w	r8, [sp, #12]
 800d806:	2330      	movs	r3, #48	; 0x30
 800d808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9cc <_vfiprintf_r+0x24c>
 800d80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d810:	f04f 0901 	mov.w	r9, #1
 800d814:	4623      	mov	r3, r4
 800d816:	469a      	mov	sl, r3
 800d818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d81c:	b10a      	cbz	r2, 800d822 <_vfiprintf_r+0xa2>
 800d81e:	2a25      	cmp	r2, #37	; 0x25
 800d820:	d1f9      	bne.n	800d816 <_vfiprintf_r+0x96>
 800d822:	ebba 0b04 	subs.w	fp, sl, r4
 800d826:	d00b      	beq.n	800d840 <_vfiprintf_r+0xc0>
 800d828:	465b      	mov	r3, fp
 800d82a:	4622      	mov	r2, r4
 800d82c:	4629      	mov	r1, r5
 800d82e:	4630      	mov	r0, r6
 800d830:	f7ff ff93 	bl	800d75a <__sfputs_r>
 800d834:	3001      	adds	r0, #1
 800d836:	f000 80aa 	beq.w	800d98e <_vfiprintf_r+0x20e>
 800d83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d83c:	445a      	add	r2, fp
 800d83e:	9209      	str	r2, [sp, #36]	; 0x24
 800d840:	f89a 3000 	ldrb.w	r3, [sl]
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 80a2 	beq.w	800d98e <_vfiprintf_r+0x20e>
 800d84a:	2300      	movs	r3, #0
 800d84c:	f04f 32ff 	mov.w	r2, #4294967295
 800d850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d854:	f10a 0a01 	add.w	sl, sl, #1
 800d858:	9304      	str	r3, [sp, #16]
 800d85a:	9307      	str	r3, [sp, #28]
 800d85c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d860:	931a      	str	r3, [sp, #104]	; 0x68
 800d862:	4654      	mov	r4, sl
 800d864:	2205      	movs	r2, #5
 800d866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86a:	4858      	ldr	r0, [pc, #352]	; (800d9cc <_vfiprintf_r+0x24c>)
 800d86c:	f7f2 fd40 	bl	80002f0 <memchr>
 800d870:	9a04      	ldr	r2, [sp, #16]
 800d872:	b9d8      	cbnz	r0, 800d8ac <_vfiprintf_r+0x12c>
 800d874:	06d1      	lsls	r1, r2, #27
 800d876:	bf44      	itt	mi
 800d878:	2320      	movmi	r3, #32
 800d87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d87e:	0713      	lsls	r3, r2, #28
 800d880:	bf44      	itt	mi
 800d882:	232b      	movmi	r3, #43	; 0x2b
 800d884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d888:	f89a 3000 	ldrb.w	r3, [sl]
 800d88c:	2b2a      	cmp	r3, #42	; 0x2a
 800d88e:	d015      	beq.n	800d8bc <_vfiprintf_r+0x13c>
 800d890:	9a07      	ldr	r2, [sp, #28]
 800d892:	4654      	mov	r4, sl
 800d894:	2000      	movs	r0, #0
 800d896:	f04f 0c0a 	mov.w	ip, #10
 800d89a:	4621      	mov	r1, r4
 800d89c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a0:	3b30      	subs	r3, #48	; 0x30
 800d8a2:	2b09      	cmp	r3, #9
 800d8a4:	d94e      	bls.n	800d944 <_vfiprintf_r+0x1c4>
 800d8a6:	b1b0      	cbz	r0, 800d8d6 <_vfiprintf_r+0x156>
 800d8a8:	9207      	str	r2, [sp, #28]
 800d8aa:	e014      	b.n	800d8d6 <_vfiprintf_r+0x156>
 800d8ac:	eba0 0308 	sub.w	r3, r0, r8
 800d8b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	9304      	str	r3, [sp, #16]
 800d8b8:	46a2      	mov	sl, r4
 800d8ba:	e7d2      	b.n	800d862 <_vfiprintf_r+0xe2>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	1d19      	adds	r1, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	9103      	str	r1, [sp, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfbb      	ittet	lt
 800d8c8:	425b      	neglt	r3, r3
 800d8ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ce:	9307      	strge	r3, [sp, #28]
 800d8d0:	9307      	strlt	r3, [sp, #28]
 800d8d2:	bfb8      	it	lt
 800d8d4:	9204      	strlt	r2, [sp, #16]
 800d8d6:	7823      	ldrb	r3, [r4, #0]
 800d8d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8da:	d10c      	bne.n	800d8f6 <_vfiprintf_r+0x176>
 800d8dc:	7863      	ldrb	r3, [r4, #1]
 800d8de:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e0:	d135      	bne.n	800d94e <_vfiprintf_r+0x1ce>
 800d8e2:	9b03      	ldr	r3, [sp, #12]
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	9203      	str	r2, [sp, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfb8      	it	lt
 800d8ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8f2:	3402      	adds	r4, #2
 800d8f4:	9305      	str	r3, [sp, #20]
 800d8f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9dc <_vfiprintf_r+0x25c>
 800d8fa:	7821      	ldrb	r1, [r4, #0]
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	4650      	mov	r0, sl
 800d900:	f7f2 fcf6 	bl	80002f0 <memchr>
 800d904:	b140      	cbz	r0, 800d918 <_vfiprintf_r+0x198>
 800d906:	2340      	movs	r3, #64	; 0x40
 800d908:	eba0 000a 	sub.w	r0, r0, sl
 800d90c:	fa03 f000 	lsl.w	r0, r3, r0
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	4303      	orrs	r3, r0
 800d914:	3401      	adds	r4, #1
 800d916:	9304      	str	r3, [sp, #16]
 800d918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91c:	482c      	ldr	r0, [pc, #176]	; (800d9d0 <_vfiprintf_r+0x250>)
 800d91e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d922:	2206      	movs	r2, #6
 800d924:	f7f2 fce4 	bl	80002f0 <memchr>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d03f      	beq.n	800d9ac <_vfiprintf_r+0x22c>
 800d92c:	4b29      	ldr	r3, [pc, #164]	; (800d9d4 <_vfiprintf_r+0x254>)
 800d92e:	bb1b      	cbnz	r3, 800d978 <_vfiprintf_r+0x1f8>
 800d930:	9b03      	ldr	r3, [sp, #12]
 800d932:	3307      	adds	r3, #7
 800d934:	f023 0307 	bic.w	r3, r3, #7
 800d938:	3308      	adds	r3, #8
 800d93a:	9303      	str	r3, [sp, #12]
 800d93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93e:	443b      	add	r3, r7
 800d940:	9309      	str	r3, [sp, #36]	; 0x24
 800d942:	e767      	b.n	800d814 <_vfiprintf_r+0x94>
 800d944:	fb0c 3202 	mla	r2, ip, r2, r3
 800d948:	460c      	mov	r4, r1
 800d94a:	2001      	movs	r0, #1
 800d94c:	e7a5      	b.n	800d89a <_vfiprintf_r+0x11a>
 800d94e:	2300      	movs	r3, #0
 800d950:	3401      	adds	r4, #1
 800d952:	9305      	str	r3, [sp, #20]
 800d954:	4619      	mov	r1, r3
 800d956:	f04f 0c0a 	mov.w	ip, #10
 800d95a:	4620      	mov	r0, r4
 800d95c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d960:	3a30      	subs	r2, #48	; 0x30
 800d962:	2a09      	cmp	r2, #9
 800d964:	d903      	bls.n	800d96e <_vfiprintf_r+0x1ee>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0c5      	beq.n	800d8f6 <_vfiprintf_r+0x176>
 800d96a:	9105      	str	r1, [sp, #20]
 800d96c:	e7c3      	b.n	800d8f6 <_vfiprintf_r+0x176>
 800d96e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d972:	4604      	mov	r4, r0
 800d974:	2301      	movs	r3, #1
 800d976:	e7f0      	b.n	800d95a <_vfiprintf_r+0x1da>
 800d978:	ab03      	add	r3, sp, #12
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	462a      	mov	r2, r5
 800d97e:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <_vfiprintf_r+0x258>)
 800d980:	a904      	add	r1, sp, #16
 800d982:	4630      	mov	r0, r6
 800d984:	f7fd fd24 	bl	800b3d0 <_printf_float>
 800d988:	4607      	mov	r7, r0
 800d98a:	1c78      	adds	r0, r7, #1
 800d98c:	d1d6      	bne.n	800d93c <_vfiprintf_r+0x1bc>
 800d98e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d990:	07d9      	lsls	r1, r3, #31
 800d992:	d405      	bmi.n	800d9a0 <_vfiprintf_r+0x220>
 800d994:	89ab      	ldrh	r3, [r5, #12]
 800d996:	059a      	lsls	r2, r3, #22
 800d998:	d402      	bmi.n	800d9a0 <_vfiprintf_r+0x220>
 800d99a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d99c:	f7ff f9d0 	bl	800cd40 <__retarget_lock_release_recursive>
 800d9a0:	89ab      	ldrh	r3, [r5, #12]
 800d9a2:	065b      	lsls	r3, r3, #25
 800d9a4:	f53f af12 	bmi.w	800d7cc <_vfiprintf_r+0x4c>
 800d9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9aa:	e711      	b.n	800d7d0 <_vfiprintf_r+0x50>
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <_vfiprintf_r+0x258>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f7fd ff96 	bl	800b8e8 <_printf_i>
 800d9bc:	e7e4      	b.n	800d988 <_vfiprintf_r+0x208>
 800d9be:	bf00      	nop
 800d9c0:	0800fee4 	.word	0x0800fee4
 800d9c4:	0800ff04 	.word	0x0800ff04
 800d9c8:	0800fec4 	.word	0x0800fec4
 800d9cc:	0801007c 	.word	0x0801007c
 800d9d0:	08010086 	.word	0x08010086
 800d9d4:	0800b3d1 	.word	0x0800b3d1
 800d9d8:	0800d75b 	.word	0x0800d75b
 800d9dc:	08010082 	.word	0x08010082

0800d9e0 <_sbrk_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d06      	ldr	r5, [pc, #24]	; (800d9fc <_sbrk_r+0x1c>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	602b      	str	r3, [r5, #0]
 800d9ec:	f7f8 fca0 	bl	8006330 <_sbrk>
 800d9f0:	1c43      	adds	r3, r0, #1
 800d9f2:	d102      	bne.n	800d9fa <_sbrk_r+0x1a>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	b103      	cbz	r3, 800d9fa <_sbrk_r+0x1a>
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
 800d9fc:	2400058c 	.word	0x2400058c

0800da00 <__sread>:
 800da00:	b510      	push	{r4, lr}
 800da02:	460c      	mov	r4, r1
 800da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da08:	f000 f8e2 	bl	800dbd0 <_read_r>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	bfab      	itete	ge
 800da10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da12:	89a3      	ldrhlt	r3, [r4, #12]
 800da14:	181b      	addge	r3, r3, r0
 800da16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da1a:	bfac      	ite	ge
 800da1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da1e:	81a3      	strhlt	r3, [r4, #12]
 800da20:	bd10      	pop	{r4, pc}

0800da22 <__swrite>:
 800da22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da26:	461f      	mov	r7, r3
 800da28:	898b      	ldrh	r3, [r1, #12]
 800da2a:	05db      	lsls	r3, r3, #23
 800da2c:	4605      	mov	r5, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	4616      	mov	r6, r2
 800da32:	d505      	bpl.n	800da40 <__swrite+0x1e>
 800da34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da38:	2302      	movs	r3, #2
 800da3a:	2200      	movs	r2, #0
 800da3c:	f000 f898 	bl	800db70 <_lseek_r>
 800da40:	89a3      	ldrh	r3, [r4, #12]
 800da42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da4a:	81a3      	strh	r3, [r4, #12]
 800da4c:	4632      	mov	r2, r6
 800da4e:	463b      	mov	r3, r7
 800da50:	4628      	mov	r0, r5
 800da52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	f000 b817 	b.w	800da88 <_write_r>

0800da5a <__sseek>:
 800da5a:	b510      	push	{r4, lr}
 800da5c:	460c      	mov	r4, r1
 800da5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da62:	f000 f885 	bl	800db70 <_lseek_r>
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	bf15      	itete	ne
 800da6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da76:	81a3      	strheq	r3, [r4, #12]
 800da78:	bf18      	it	ne
 800da7a:	81a3      	strhne	r3, [r4, #12]
 800da7c:	bd10      	pop	{r4, pc}

0800da7e <__sclose>:
 800da7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da82:	f000 b831 	b.w	800dae8 <_close_r>
	...

0800da88 <_write_r>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4d07      	ldr	r5, [pc, #28]	; (800daa8 <_write_r+0x20>)
 800da8c:	4604      	mov	r4, r0
 800da8e:	4608      	mov	r0, r1
 800da90:	4611      	mov	r1, r2
 800da92:	2200      	movs	r2, #0
 800da94:	602a      	str	r2, [r5, #0]
 800da96:	461a      	mov	r2, r3
 800da98:	f7f6 f9e0 	bl	8003e5c <_write>
 800da9c:	1c43      	adds	r3, r0, #1
 800da9e:	d102      	bne.n	800daa6 <_write_r+0x1e>
 800daa0:	682b      	ldr	r3, [r5, #0]
 800daa2:	b103      	cbz	r3, 800daa6 <_write_r+0x1e>
 800daa4:	6023      	str	r3, [r4, #0]
 800daa6:	bd38      	pop	{r3, r4, r5, pc}
 800daa8:	2400058c 	.word	0x2400058c

0800daac <__assert_func>:
 800daac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daae:	4614      	mov	r4, r2
 800dab0:	461a      	mov	r2, r3
 800dab2:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <__assert_func+0x2c>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4605      	mov	r5, r0
 800dab8:	68d8      	ldr	r0, [r3, #12]
 800daba:	b14c      	cbz	r4, 800dad0 <__assert_func+0x24>
 800dabc:	4b07      	ldr	r3, [pc, #28]	; (800dadc <__assert_func+0x30>)
 800dabe:	9100      	str	r1, [sp, #0]
 800dac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dac4:	4906      	ldr	r1, [pc, #24]	; (800dae0 <__assert_func+0x34>)
 800dac6:	462b      	mov	r3, r5
 800dac8:	f000 f81e 	bl	800db08 <fiprintf>
 800dacc:	f000 f89f 	bl	800dc0e <abort>
 800dad0:	4b04      	ldr	r3, [pc, #16]	; (800dae4 <__assert_func+0x38>)
 800dad2:	461c      	mov	r4, r3
 800dad4:	e7f3      	b.n	800dabe <__assert_func+0x12>
 800dad6:	bf00      	nop
 800dad8:	24000034 	.word	0x24000034
 800dadc:	0801008d 	.word	0x0801008d
 800dae0:	0801009a 	.word	0x0801009a
 800dae4:	080100c8 	.word	0x080100c8

0800dae8 <_close_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4d06      	ldr	r5, [pc, #24]	; (800db04 <_close_r+0x1c>)
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	f7f8 fbe7 	bl	80062c6 <_close>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_close_r+0x1a>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_close_r+0x1a>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	2400058c 	.word	0x2400058c

0800db08 <fiprintf>:
 800db08:	b40e      	push	{r1, r2, r3}
 800db0a:	b503      	push	{r0, r1, lr}
 800db0c:	4601      	mov	r1, r0
 800db0e:	ab03      	add	r3, sp, #12
 800db10:	4805      	ldr	r0, [pc, #20]	; (800db28 <fiprintf+0x20>)
 800db12:	f853 2b04 	ldr.w	r2, [r3], #4
 800db16:	6800      	ldr	r0, [r0, #0]
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	f7ff fe31 	bl	800d780 <_vfiprintf_r>
 800db1e:	b002      	add	sp, #8
 800db20:	f85d eb04 	ldr.w	lr, [sp], #4
 800db24:	b003      	add	sp, #12
 800db26:	4770      	bx	lr
 800db28:	24000034 	.word	0x24000034

0800db2c <_fstat_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	; (800db4c <_fstat_r+0x20>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	4611      	mov	r1, r2
 800db38:	602b      	str	r3, [r5, #0]
 800db3a:	f7f8 fbd0 	bl	80062de <_fstat>
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	d102      	bne.n	800db48 <_fstat_r+0x1c>
 800db42:	682b      	ldr	r3, [r5, #0]
 800db44:	b103      	cbz	r3, 800db48 <_fstat_r+0x1c>
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	bd38      	pop	{r3, r4, r5, pc}
 800db4a:	bf00      	nop
 800db4c:	2400058c 	.word	0x2400058c

0800db50 <_isatty_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4d06      	ldr	r5, [pc, #24]	; (800db6c <_isatty_r+0x1c>)
 800db54:	2300      	movs	r3, #0
 800db56:	4604      	mov	r4, r0
 800db58:	4608      	mov	r0, r1
 800db5a:	602b      	str	r3, [r5, #0]
 800db5c:	f7f8 fbcf 	bl	80062fe <_isatty>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d102      	bne.n	800db6a <_isatty_r+0x1a>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	b103      	cbz	r3, 800db6a <_isatty_r+0x1a>
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	2400058c 	.word	0x2400058c

0800db70 <_lseek_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	; (800db90 <_lseek_r+0x20>)
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f8 fbc8 	bl	8006314 <_lseek>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_lseek_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_lseek_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	2400058c 	.word	0x2400058c

0800db94 <__ascii_mbtowc>:
 800db94:	b082      	sub	sp, #8
 800db96:	b901      	cbnz	r1, 800db9a <__ascii_mbtowc+0x6>
 800db98:	a901      	add	r1, sp, #4
 800db9a:	b142      	cbz	r2, 800dbae <__ascii_mbtowc+0x1a>
 800db9c:	b14b      	cbz	r3, 800dbb2 <__ascii_mbtowc+0x1e>
 800db9e:	7813      	ldrb	r3, [r2, #0]
 800dba0:	600b      	str	r3, [r1, #0]
 800dba2:	7812      	ldrb	r2, [r2, #0]
 800dba4:	1e10      	subs	r0, r2, #0
 800dba6:	bf18      	it	ne
 800dba8:	2001      	movne	r0, #1
 800dbaa:	b002      	add	sp, #8
 800dbac:	4770      	bx	lr
 800dbae:	4610      	mov	r0, r2
 800dbb0:	e7fb      	b.n	800dbaa <__ascii_mbtowc+0x16>
 800dbb2:	f06f 0001 	mvn.w	r0, #1
 800dbb6:	e7f8      	b.n	800dbaa <__ascii_mbtowc+0x16>

0800dbb8 <__malloc_lock>:
 800dbb8:	4801      	ldr	r0, [pc, #4]	; (800dbc0 <__malloc_lock+0x8>)
 800dbba:	f7ff b8c0 	b.w	800cd3e <__retarget_lock_acquire_recursive>
 800dbbe:	bf00      	nop
 800dbc0:	24000580 	.word	0x24000580

0800dbc4 <__malloc_unlock>:
 800dbc4:	4801      	ldr	r0, [pc, #4]	; (800dbcc <__malloc_unlock+0x8>)
 800dbc6:	f7ff b8bb 	b.w	800cd40 <__retarget_lock_release_recursive>
 800dbca:	bf00      	nop
 800dbcc:	24000580 	.word	0x24000580

0800dbd0 <_read_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4d07      	ldr	r5, [pc, #28]	; (800dbf0 <_read_r+0x20>)
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	4608      	mov	r0, r1
 800dbd8:	4611      	mov	r1, r2
 800dbda:	2200      	movs	r2, #0
 800dbdc:	602a      	str	r2, [r5, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f7f8 fb54 	bl	800628c <_read>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d102      	bne.n	800dbee <_read_r+0x1e>
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	b103      	cbz	r3, 800dbee <_read_r+0x1e>
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	bd38      	pop	{r3, r4, r5, pc}
 800dbf0:	2400058c 	.word	0x2400058c

0800dbf4 <__ascii_wctomb>:
 800dbf4:	b149      	cbz	r1, 800dc0a <__ascii_wctomb+0x16>
 800dbf6:	2aff      	cmp	r2, #255	; 0xff
 800dbf8:	bf85      	ittet	hi
 800dbfa:	238a      	movhi	r3, #138	; 0x8a
 800dbfc:	6003      	strhi	r3, [r0, #0]
 800dbfe:	700a      	strbls	r2, [r1, #0]
 800dc00:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc04:	bf98      	it	ls
 800dc06:	2001      	movls	r0, #1
 800dc08:	4770      	bx	lr
 800dc0a:	4608      	mov	r0, r1
 800dc0c:	4770      	bx	lr

0800dc0e <abort>:
 800dc0e:	b508      	push	{r3, lr}
 800dc10:	2006      	movs	r0, #6
 800dc12:	f000 f82b 	bl	800dc6c <raise>
 800dc16:	2001      	movs	r0, #1
 800dc18:	f7f8 fb2e 	bl	8006278 <_exit>

0800dc1c <_raise_r>:
 800dc1c:	291f      	cmp	r1, #31
 800dc1e:	b538      	push	{r3, r4, r5, lr}
 800dc20:	4604      	mov	r4, r0
 800dc22:	460d      	mov	r5, r1
 800dc24:	d904      	bls.n	800dc30 <_raise_r+0x14>
 800dc26:	2316      	movs	r3, #22
 800dc28:	6003      	str	r3, [r0, #0]
 800dc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc32:	b112      	cbz	r2, 800dc3a <_raise_r+0x1e>
 800dc34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc38:	b94b      	cbnz	r3, 800dc4e <_raise_r+0x32>
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 f830 	bl	800dca0 <_getpid_r>
 800dc40:	462a      	mov	r2, r5
 800dc42:	4601      	mov	r1, r0
 800dc44:	4620      	mov	r0, r4
 800dc46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc4a:	f000 b817 	b.w	800dc7c <_kill_r>
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d00a      	beq.n	800dc68 <_raise_r+0x4c>
 800dc52:	1c59      	adds	r1, r3, #1
 800dc54:	d103      	bne.n	800dc5e <_raise_r+0x42>
 800dc56:	2316      	movs	r3, #22
 800dc58:	6003      	str	r3, [r0, #0]
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	e7e7      	b.n	800dc2e <_raise_r+0x12>
 800dc5e:	2400      	movs	r4, #0
 800dc60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc64:	4628      	mov	r0, r5
 800dc66:	4798      	blx	r3
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7e0      	b.n	800dc2e <_raise_r+0x12>

0800dc6c <raise>:
 800dc6c:	4b02      	ldr	r3, [pc, #8]	; (800dc78 <raise+0xc>)
 800dc6e:	4601      	mov	r1, r0
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	f7ff bfd3 	b.w	800dc1c <_raise_r>
 800dc76:	bf00      	nop
 800dc78:	24000034 	.word	0x24000034

0800dc7c <_kill_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4d07      	ldr	r5, [pc, #28]	; (800dc9c <_kill_r+0x20>)
 800dc80:	2300      	movs	r3, #0
 800dc82:	4604      	mov	r4, r0
 800dc84:	4608      	mov	r0, r1
 800dc86:	4611      	mov	r1, r2
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	f7f8 fae5 	bl	8006258 <_kill>
 800dc8e:	1c43      	adds	r3, r0, #1
 800dc90:	d102      	bne.n	800dc98 <_kill_r+0x1c>
 800dc92:	682b      	ldr	r3, [r5, #0]
 800dc94:	b103      	cbz	r3, 800dc98 <_kill_r+0x1c>
 800dc96:	6023      	str	r3, [r4, #0]
 800dc98:	bd38      	pop	{r3, r4, r5, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2400058c 	.word	0x2400058c

0800dca0 <_getpid_r>:
 800dca0:	f7f8 bad2 	b.w	8006248 <_getpid>

0800dca4 <sinf_poly>:
 800dca4:	07cb      	lsls	r3, r1, #31
 800dca6:	d412      	bmi.n	800dcce <sinf_poly+0x2a>
 800dca8:	ee21 5b00 	vmul.f64	d5, d1, d0
 800dcac:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800dcb0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800dcb4:	eea6 7b01 	vfma.f64	d7, d6, d1
 800dcb8:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800dcbc:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dcc0:	eea6 0b05 	vfma.f64	d0, d6, d5
 800dcc4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800dcc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dccc:	4770      	bx	lr
 800dcce:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800dcd2:	ee21 5b01 	vmul.f64	d5, d1, d1
 800dcd6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800dcda:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800dcde:	eea1 7b06 	vfma.f64	d7, d1, d6
 800dce2:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800dce6:	eea1 0b06 	vfma.f64	d0, d1, d6
 800dcea:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800dcee:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dcf2:	eea5 0b06 	vfma.f64	d0, d5, d6
 800dcf6:	e7e5      	b.n	800dcc4 <sinf_poly+0x20>

0800dcf8 <cosf>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	ee10 4a10 	vmov	r4, s0
 800dcfe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800dd02:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800dd06:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800dd0a:	d21f      	bcs.n	800dd4c <cosf+0x54>
 800dd0c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dd10:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800dd14:	f0c0 8088 	bcc.w	800de28 <cosf+0x130>
 800dd18:	ee20 4b00 	vmul.f64	d4, d0, d0
 800dd1c:	4b46      	ldr	r3, [pc, #280]	; (800de38 <cosf+0x140>)
 800dd1e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 800dd22:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800dd26:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800dd2a:	eea0 6b05 	vfma.f64	d6, d0, d5
 800dd2e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800dd32:	eea0 7b05 	vfma.f64	d7, d0, d5
 800dd36:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800dd3a:	ee20 0b04 	vmul.f64	d0, d0, d4
 800dd3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dd42:	eea6 7b00 	vfma.f64	d7, d6, d0
 800dd46:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	f240 422e 	movw	r2, #1070	; 0x42e
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d82b      	bhi.n	800ddac <cosf+0xb4>
 800dd54:	4b38      	ldr	r3, [pc, #224]	; (800de38 <cosf+0x140>)
 800dd56:	ed93 6b08 	vldr	d6, [r3, #32]
 800dd5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dd5e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800dd62:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800dd66:	ee16 1a90 	vmov	r1, s13
 800dd6a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800dd6e:	1609      	asrs	r1, r1, #24
 800dd70:	ee06 1a90 	vmov	s13, r1
 800dd74:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800dd78:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800dd7c:	f001 0203 	and.w	r2, r1, #3
 800dd80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dd84:	eea5 7b46 	vfms.f64	d7, d5, d6
 800dd88:	eeb0 0b47 	vmov.f64	d0, d7
 800dd8c:	ed92 7b00 	vldr	d7, [r2]
 800dd90:	ee20 1b00 	vmul.f64	d1, d0, d0
 800dd94:	f011 0f02 	tst.w	r1, #2
 800dd98:	bf08      	it	eq
 800dd9a:	4618      	moveq	r0, r3
 800dd9c:	f081 0101 	eor.w	r1, r1, #1
 800dda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dda4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dda8:	f7ff bf7c 	b.w	800dca4 <sinf_poly>
 800ddac:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ddb0:	d236      	bcs.n	800de20 <cosf+0x128>
 800ddb2:	4a22      	ldr	r2, [pc, #136]	; (800de3c <cosf+0x144>)
 800ddb4:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800ddb8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800ddbc:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ddc0:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ddc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddc8:	4083      	lsls	r3, r0
 800ddca:	6a28      	ldr	r0, [r5, #32]
 800ddcc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ddd0:	fba3 1000 	umull	r1, r0, r3, r0
 800ddd4:	6929      	ldr	r1, [r5, #16]
 800ddd6:	435a      	muls	r2, r3
 800ddd8:	fbe3 0201 	umlal	r0, r2, r3, r1
 800dddc:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800dde0:	0f8d      	lsrs	r5, r1, #30
 800dde2:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800dde6:	1a51      	subs	r1, r2, r1
 800dde8:	f7f2 fc60 	bl	80006ac <__aeabi_l2d>
 800ddec:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ddf0:	4b11      	ldr	r3, [pc, #68]	; (800de38 <cosf+0x140>)
 800ddf2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800de30 <cosf+0x138>
 800ddf6:	ec41 0b16 	vmov	d6, r0, r1
 800ddfa:	f004 0203 	and.w	r2, r4, #3
 800ddfe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800de02:	f014 0f02 	tst.w	r4, #2
 800de06:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800de0a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800de0e:	ed92 0b00 	vldr	d0, [r2]
 800de12:	ee27 1b07 	vmul.f64	d1, d7, d7
 800de16:	f085 0101 	eor.w	r1, r5, #1
 800de1a:	bf08      	it	eq
 800de1c:	4618      	moveq	r0, r3
 800de1e:	e7bf      	b.n	800dda0 <cosf+0xa8>
 800de20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de24:	f000 b817 	b.w	800de56 <__math_invalidf>
 800de28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800de2c:	e78d      	b.n	800dd4a <cosf+0x52>
 800de2e:	bf00      	nop
 800de30:	54442d18 	.word	0x54442d18
 800de34:	3c1921fb 	.word	0x3c1921fb
 800de38:	08011280 	.word	0x08011280
 800de3c:	08011220 	.word	0x08011220

0800de40 <with_errnof>:
 800de40:	b513      	push	{r0, r1, r4, lr}
 800de42:	4604      	mov	r4, r0
 800de44:	ed8d 0a01 	vstr	s0, [sp, #4]
 800de48:	f7fd fa00 	bl	800b24c <__errno>
 800de4c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800de50:	6004      	str	r4, [r0, #0]
 800de52:	b002      	add	sp, #8
 800de54:	bd10      	pop	{r4, pc}

0800de56 <__math_invalidf>:
 800de56:	eef0 7a40 	vmov.f32	s15, s0
 800de5a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800de5e:	eef4 7a67 	vcmp.f32	s15, s15
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800de6a:	d602      	bvs.n	800de72 <__math_invalidf+0x1c>
 800de6c:	2021      	movs	r0, #33	; 0x21
 800de6e:	f7ff bfe7 	b.w	800de40 <with_errnof>
 800de72:	4770      	bx	lr

0800de74 <checkint>:
 800de74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de78:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800de7c:	429a      	cmp	r2, r3
 800de7e:	b570      	push	{r4, r5, r6, lr}
 800de80:	dd2a      	ble.n	800ded8 <checkint+0x64>
 800de82:	f240 4333 	movw	r3, #1075	; 0x433
 800de86:	429a      	cmp	r2, r3
 800de88:	dc24      	bgt.n	800ded4 <checkint+0x60>
 800de8a:	1a9b      	subs	r3, r3, r2
 800de8c:	f1a3 0620 	sub.w	r6, r3, #32
 800de90:	f04f 32ff 	mov.w	r2, #4294967295
 800de94:	fa02 f403 	lsl.w	r4, r2, r3
 800de98:	fa02 f606 	lsl.w	r6, r2, r6
 800de9c:	f1c3 0520 	rsb	r5, r3, #32
 800dea0:	fa22 f505 	lsr.w	r5, r2, r5
 800dea4:	4334      	orrs	r4, r6
 800dea6:	432c      	orrs	r4, r5
 800dea8:	409a      	lsls	r2, r3
 800deaa:	ea20 0202 	bic.w	r2, r0, r2
 800deae:	ea21 0404 	bic.w	r4, r1, r4
 800deb2:	4322      	orrs	r2, r4
 800deb4:	f1a3 0420 	sub.w	r4, r3, #32
 800deb8:	f1c3 0220 	rsb	r2, r3, #32
 800debc:	d10c      	bne.n	800ded8 <checkint+0x64>
 800debe:	40d8      	lsrs	r0, r3
 800dec0:	fa01 f302 	lsl.w	r3, r1, r2
 800dec4:	4318      	orrs	r0, r3
 800dec6:	40e1      	lsrs	r1, r4
 800dec8:	4308      	orrs	r0, r1
 800deca:	f000 0001 	and.w	r0, r0, #1
 800dece:	f1d0 0002 	rsbs	r0, r0, #2
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	2002      	movs	r0, #2
 800ded6:	e7fc      	b.n	800ded2 <checkint+0x5e>
 800ded8:	2000      	movs	r0, #0
 800deda:	e7fa      	b.n	800ded2 <checkint+0x5e>
 800dedc:	0000      	movs	r0, r0
	...

0800dee0 <pow>:
 800dee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee4:	ee10 4a90 	vmov	r4, s1
 800dee8:	ed2d 8b0a 	vpush	{d8-d12}
 800deec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800def0:	ee11 7a90 	vmov	r7, s3
 800def4:	f10a 32ff 	add.w	r2, sl, #4294967295
 800def8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800defc:	429a      	cmp	r2, r3
 800defe:	ee10 6a10 	vmov	r6, s0
 800df02:	ee11 0a10 	vmov	r0, s2
 800df06:	b086      	sub	sp, #24
 800df08:	46d4      	mov	ip, sl
 800df0a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800df0e:	d806      	bhi.n	800df1e <pow+0x3e>
 800df10:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800df14:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800df18:	2b7f      	cmp	r3, #127	; 0x7f
 800df1a:	f240 8156 	bls.w	800e1ca <pow+0x2ea>
 800df1e:	1802      	adds	r2, r0, r0
 800df20:	eb47 0107 	adc.w	r1, r7, r7
 800df24:	f06f 0e01 	mvn.w	lr, #1
 800df28:	f112 39ff 	adds.w	r9, r2, #4294967295
 800df2c:	f141 38ff 	adc.w	r8, r1, #4294967295
 800df30:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800df34:	45ce      	cmp	lr, r9
 800df36:	eb73 0808 	sbcs.w	r8, r3, r8
 800df3a:	d23f      	bcs.n	800dfbc <pow+0xdc>
 800df3c:	ea52 0301 	orrs.w	r3, r2, r1
 800df40:	f04f 0300 	mov.w	r3, #0
 800df44:	d10c      	bne.n	800df60 <pow+0x80>
 800df46:	19b6      	adds	r6, r6, r6
 800df48:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800df4c:	4164      	adcs	r4, r4
 800df4e:	42b3      	cmp	r3, r6
 800df50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df54:	41a3      	sbcs	r3, r4
 800df56:	f0c0 808c 	bcc.w	800e072 <pow+0x192>
 800df5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800df5e:	e028      	b.n	800dfb2 <pow+0xd2>
 800df60:	4da3      	ldr	r5, [pc, #652]	; (800e1f0 <pow+0x310>)
 800df62:	42ac      	cmp	r4, r5
 800df64:	bf08      	it	eq
 800df66:	429e      	cmpeq	r6, r3
 800df68:	d107      	bne.n	800df7a <pow+0x9a>
 800df6a:	1800      	adds	r0, r0, r0
 800df6c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800df70:	417f      	adcs	r7, r7
 800df72:	4283      	cmp	r3, r0
 800df74:	4b9f      	ldr	r3, [pc, #636]	; (800e1f4 <pow+0x314>)
 800df76:	41bb      	sbcs	r3, r7
 800df78:	e7ed      	b.n	800df56 <pow+0x76>
 800df7a:	19b6      	adds	r6, r6, r6
 800df7c:	489e      	ldr	r0, [pc, #632]	; (800e1f8 <pow+0x318>)
 800df7e:	4164      	adcs	r4, r4
 800df80:	42b3      	cmp	r3, r6
 800df82:	eb70 0504 	sbcs.w	r5, r0, r4
 800df86:	d374      	bcc.n	800e072 <pow+0x192>
 800df88:	4281      	cmp	r1, r0
 800df8a:	bf08      	it	eq
 800df8c:	429a      	cmpeq	r2, r3
 800df8e:	d170      	bne.n	800e072 <pow+0x192>
 800df90:	4a9a      	ldr	r2, [pc, #616]	; (800e1fc <pow+0x31c>)
 800df92:	4294      	cmp	r4, r2
 800df94:	bf08      	it	eq
 800df96:	429e      	cmpeq	r6, r3
 800df98:	d0df      	beq.n	800df5a <pow+0x7a>
 800df9a:	4294      	cmp	r4, r2
 800df9c:	ea6f 0707 	mvn.w	r7, r7
 800dfa0:	bf34      	ite	cc
 800dfa2:	2400      	movcc	r4, #0
 800dfa4:	2401      	movcs	r4, #1
 800dfa6:	0fff      	lsrs	r7, r7, #31
 800dfa8:	42bc      	cmp	r4, r7
 800dfaa:	f040 81d9 	bne.w	800e360 <pow+0x480>
 800dfae:	ee21 0b01 	vmul.f64	d0, d1, d1
 800dfb2:	b006      	add	sp, #24
 800dfb4:	ecbd 8b0a 	vpop	{d8-d12}
 800dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbc:	eb16 0806 	adds.w	r8, r6, r6
 800dfc0:	eb44 0904 	adc.w	r9, r4, r4
 800dfc4:	f118 31ff 	adds.w	r1, r8, #4294967295
 800dfc8:	f169 0200 	sbc.w	r2, r9, #0
 800dfcc:	458e      	cmp	lr, r1
 800dfce:	4193      	sbcs	r3, r2
 800dfd0:	d223      	bcs.n	800e01a <pow+0x13a>
 800dfd2:	ee20 0b00 	vmul.f64	d0, d0, d0
 800dfd6:	2c00      	cmp	r4, #0
 800dfd8:	da12      	bge.n	800e000 <pow+0x120>
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7ff ff4a 	bl	800de74 <checkint>
 800dfe0:	2801      	cmp	r0, #1
 800dfe2:	d10d      	bne.n	800e000 <pow+0x120>
 800dfe4:	eeb1 0b40 	vneg.f64	d0, d0
 800dfe8:	ea58 0309 	orrs.w	r3, r8, r9
 800dfec:	d10a      	bne.n	800e004 <pow+0x124>
 800dfee:	2f00      	cmp	r7, #0
 800dff0:	dadf      	bge.n	800dfb2 <pow+0xd2>
 800dff2:	b006      	add	sp, #24
 800dff4:	ecbd 8b0a 	vpop	{d8-d12}
 800dff8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dffc:	f001 bb68 	b.w	800f6d0 <__math_divzero>
 800e000:	2000      	movs	r0, #0
 800e002:	e7f1      	b.n	800dfe8 <pow+0x108>
 800e004:	2f00      	cmp	r7, #0
 800e006:	dad4      	bge.n	800dfb2 <pow+0xd2>
 800e008:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e00c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e010:	ed8d 7b00 	vstr	d7, [sp]
 800e014:	ed9d 0b00 	vldr	d0, [sp]
 800e018:	e7cb      	b.n	800dfb2 <pow+0xd2>
 800e01a:	2c00      	cmp	r4, #0
 800e01c:	da2c      	bge.n	800e078 <pow+0x198>
 800e01e:	4639      	mov	r1, r7
 800e020:	f7ff ff28 	bl	800de74 <checkint>
 800e024:	b930      	cbnz	r0, 800e034 <pow+0x154>
 800e026:	b006      	add	sp, #24
 800e028:	ecbd 8b0a 	vpop	{d8-d12}
 800e02c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e030:	f001 bb66 	b.w	800f700 <__math_invalid>
 800e034:	2801      	cmp	r0, #1
 800e036:	bf14      	ite	ne
 800e038:	2000      	movne	r0, #0
 800e03a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e03e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e042:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800e046:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800e04a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800e04e:	2b7f      	cmp	r3, #127	; 0x7f
 800e050:	d92d      	bls.n	800e0ae <pow+0x1ce>
 800e052:	4b67      	ldr	r3, [pc, #412]	; (800e1f0 <pow+0x310>)
 800e054:	2000      	movs	r0, #0
 800e056:	429c      	cmp	r4, r3
 800e058:	bf08      	it	eq
 800e05a:	4286      	cmpeq	r6, r0
 800e05c:	f43f af7d 	beq.w	800df5a <pow+0x7a>
 800e060:	f240 31bd 	movw	r1, #957	; 0x3bd
 800e064:	428a      	cmp	r2, r1
 800e066:	d80c      	bhi.n	800e082 <pow+0x1a2>
 800e068:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e06c:	42b0      	cmp	r0, r6
 800e06e:	41a3      	sbcs	r3, r4
 800e070:	d204      	bcs.n	800e07c <pow+0x19c>
 800e072:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e076:	e79c      	b.n	800dfb2 <pow+0xd2>
 800e078:	2000      	movs	r0, #0
 800e07a:	e7e4      	b.n	800e046 <pow+0x166>
 800e07c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e080:	e797      	b.n	800dfb2 <pow+0xd2>
 800e082:	2e01      	cmp	r6, #1
 800e084:	eb74 0303 	sbcs.w	r3, r4, r3
 800e088:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e08c:	bf34      	ite	cc
 800e08e:	2301      	movcc	r3, #1
 800e090:	2300      	movcs	r3, #0
 800e092:	4295      	cmp	r5, r2
 800e094:	bf8c      	ite	hi
 800e096:	2500      	movhi	r5, #0
 800e098:	2501      	movls	r5, #1
 800e09a:	42ab      	cmp	r3, r5
 800e09c:	f000 809d 	beq.w	800e1da <pow+0x2fa>
 800e0a0:	b006      	add	sp, #24
 800e0a2:	ecbd 8b0a 	vpop	{d8-d12}
 800e0a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0aa:	f001 bb09 	b.w	800f6c0 <__math_oflow>
 800e0ae:	f1bc 0f00 	cmp.w	ip, #0
 800e0b2:	d10b      	bne.n	800e0cc <pow+0x1ec>
 800e0b4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e1e8 <pow+0x308>
 800e0b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e0bc:	ec53 2b17 	vmov	r2, r3, d7
 800e0c0:	ee17 6a10 	vmov	r6, s14
 800e0c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0c8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800e0cc:	4b4c      	ldr	r3, [pc, #304]	; (800e200 <pow+0x320>)
 800e0ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e0d2:	4423      	add	r3, r4
 800e0d4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e0d8:	1519      	asrs	r1, r3, #20
 800e0da:	0d1b      	lsrs	r3, r3, #20
 800e0dc:	051b      	lsls	r3, r3, #20
 800e0de:	eba4 0903 	sub.w	r9, r4, r3
 800e0e2:	4b48      	ldr	r3, [pc, #288]	; (800e204 <pow+0x324>)
 800e0e4:	ee04 1a10 	vmov	s8, r1
 800e0e8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800e0ec:	f1b6 0800 	subs.w	r8, r6, #0
 800e0f0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800e0f4:	ec49 8b15 	vmov	d5, r8, r9
 800e0f8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800e0fc:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e100:	ed93 7b00 	vldr	d7, [r3]
 800e104:	ed93 5b02 	vldr	d5, [r3, #8]
 800e108:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800e10c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800e110:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800e114:	ee36 ab02 	vadd.f64	d10, d6, d2
 800e118:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800e11c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e120:	ed93 5b04 	vldr	d5, [r3, #16]
 800e124:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e128:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e12c:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e130:	ed93 4b08 	vldr	d4, [r3, #32]
 800e134:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e138:	eeb0 9b40 	vmov.f64	d9, d0
 800e13c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800e140:	ed93 5b06 	vldr	d5, [r3, #24]
 800e144:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800e148:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e14c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e150:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e154:	ee3a ab48 	vsub.f64	d10, d10, d8
 800e158:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800e15c:	ee37 9b09 	vadd.f64	d9, d7, d9
 800e160:	ee3a ab00 	vadd.f64	d10, d10, d0
 800e164:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e168:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e16c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800e170:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e174:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e178:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e17c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e180:	eeab ab05 	vfma.f64	d10, d11, d5
 800e184:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800e188:	ee21 7b06 	vmul.f64	d7, d1, d6
 800e18c:	ee17 3a90 	vmov	r3, s15
 800e190:	eeb0 5b47 	vmov.f64	d5, d7
 800e194:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e198:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800e19c:	18b2      	adds	r2, r6, r2
 800e19e:	2a3e      	cmp	r2, #62	; 0x3e
 800e1a0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800e1a4:	ee38 8b46 	vsub.f64	d8, d8, d6
 800e1a8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800e1ac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800e1b0:	d92b      	bls.n	800e20a <pow+0x32a>
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	da0b      	bge.n	800e1ce <pow+0x2ee>
 800e1b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e1ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f aef7 	beq.w	800dfb2 <pow+0xd2>
 800e1c4:	eeb1 0b40 	vneg.f64	d0, d0
 800e1c8:	e6f3      	b.n	800dfb2 <pow+0xd2>
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	e77e      	b.n	800e0cc <pow+0x1ec>
 800e1ce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800e1d2:	d919      	bls.n	800e208 <pow+0x328>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f6bf af63 	bge.w	800e0a0 <pow+0x1c0>
 800e1da:	b006      	add	sp, #24
 800e1dc:	ecbd 8b0a 	vpop	{d8-d12}
 800e1e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e4:	f001 ba64 	b.w	800f6b0 <__math_uflow>
 800e1e8:	00000000 	.word	0x00000000
 800e1ec:	43300000 	.word	0x43300000
 800e1f0:	3ff00000 	.word	0x3ff00000
 800e1f4:	fff00000 	.word	0xfff00000
 800e1f8:	ffe00000 	.word	0xffe00000
 800e1fc:	7fe00000 	.word	0x7fe00000
 800e200:	c0196aab 	.word	0xc0196aab
 800e204:	080101d8 	.word	0x080101d8
 800e208:	2600      	movs	r6, #0
 800e20a:	495d      	ldr	r1, [pc, #372]	; (800e380 <pow+0x4a0>)
 800e20c:	ed91 4b02 	vldr	d4, [r1, #8]
 800e210:	ed91 3b00 	vldr	d3, [r1]
 800e214:	eeb0 6b44 	vmov.f64	d6, d4
 800e218:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e21c:	ee16 5a10 	vmov	r5, s12
 800e220:	ee36 6b44 	vsub.f64	d6, d6, d4
 800e224:	ed91 4b04 	vldr	d4, [r1, #16]
 800e228:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800e22c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e230:	eeb0 0b47 	vmov.f64	d0, d7
 800e234:	ed91 7b06 	vldr	d7, [r1, #24]
 800e238:	18dc      	adds	r4, r3, r3
 800e23a:	f104 030f 	add.w	r3, r4, #15
 800e23e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e242:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e246:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800e24a:	ee35 0b00 	vadd.f64	d0, d5, d0
 800e24e:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e252:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800e256:	ed91 5b08 	vldr	d5, [r1, #32]
 800e25a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e25e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e262:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e266:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800e26a:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e26e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e272:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800e276:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e27a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e27e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e282:	1940      	adds	r0, r0, r5
 800e284:	2700      	movs	r7, #0
 800e286:	eb17 020c 	adds.w	r2, r7, ip
 800e28a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e28e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e292:	2e00      	cmp	r6, #0
 800e294:	d15f      	bne.n	800e356 <pow+0x476>
 800e296:	42bd      	cmp	r5, r7
 800e298:	db13      	blt.n	800e2c2 <pow+0x3e2>
 800e29a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800e29e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800e2a2:	4610      	mov	r0, r2
 800e2a4:	ec41 0b10 	vmov	d0, r0, r1
 800e2a8:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e2ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e368 <pow+0x488>
 800e2b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e2b4:	b006      	add	sp, #24
 800e2b6:	ecbd 8b0a 	vpop	{d8-d12}
 800e2ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2be:	f001 ba37 	b.w	800f730 <__math_check_oflow>
 800e2c2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e2c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	ec41 0b15 	vmov	d5, r0, r1
 800e2d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e2d4:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e2d8:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e2dc:	eeb0 3bc7 	vabs.f64	d3, d7
 800e2e0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e370 <pow+0x490>
 800e2ec:	d52a      	bpl.n	800e344 <pow+0x464>
 800e2ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e2f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e2fe:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e302:	bf48      	it	mi
 800e304:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e308:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e30c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e310:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e314:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e318:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e31c:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e320:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e328:	d104      	bne.n	800e334 <pow+0x454>
 800e32a:	4632      	mov	r2, r6
 800e32c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e330:	ec43 2b17 	vmov	d7, r2, r3
 800e334:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e338:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e33c:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e340:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e344:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e348:	b006      	add	sp, #24
 800e34a:	ecbd 8b0a 	vpop	{d8-d12}
 800e34e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e352:	f001 b9e4 	b.w	800f71e <__math_check_uflow>
 800e356:	ec43 2b10 	vmov	d0, r2, r3
 800e35a:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e35e:	e628      	b.n	800dfb2 <pow+0xd2>
 800e360:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e378 <pow+0x498>
 800e364:	e625      	b.n	800dfb2 <pow+0xd2>
 800e366:	bf00      	nop
 800e368:	00000000 	.word	0x00000000
 800e36c:	7f000000 	.word	0x7f000000
 800e370:	00000000 	.word	0x00000000
 800e374:	00100000 	.word	0x00100000
	...
 800e380:	08011740 	.word	0x08011740

0800e384 <tanf>:
 800e384:	ee10 3a10 	vmov	r3, s0
 800e388:	b507      	push	{r0, r1, r2, lr}
 800e38a:	4a12      	ldr	r2, [pc, #72]	; (800e3d4 <tanf+0x50>)
 800e38c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e390:	4293      	cmp	r3, r2
 800e392:	dc07      	bgt.n	800e3a4 <tanf+0x20>
 800e394:	eddf 0a10 	vldr	s1, [pc, #64]	; 800e3d8 <tanf+0x54>
 800e398:	2001      	movs	r0, #1
 800e39a:	b003      	add	sp, #12
 800e39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a0:	f001 b88a 	b.w	800f4b8 <__kernel_tanf>
 800e3a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e3a8:	db04      	blt.n	800e3b4 <tanf+0x30>
 800e3aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e3ae:	b003      	add	sp, #12
 800e3b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3b4:	4668      	mov	r0, sp
 800e3b6:	f000 fcc9 	bl	800ed4c <__ieee754_rem_pio2f>
 800e3ba:	0040      	lsls	r0, r0, #1
 800e3bc:	f000 0002 	and.w	r0, r0, #2
 800e3c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3c4:	ed9d 0a00 	vldr	s0, [sp]
 800e3c8:	f1c0 0001 	rsb	r0, r0, #1
 800e3cc:	f001 f874 	bl	800f4b8 <__kernel_tanf>
 800e3d0:	e7ed      	b.n	800e3ae <tanf+0x2a>
 800e3d2:	bf00      	nop
 800e3d4:	3f490fda 	.word	0x3f490fda
 800e3d8:	00000000 	.word	0x00000000

0800e3dc <sinf_poly>:
 800e3dc:	07cb      	lsls	r3, r1, #31
 800e3de:	d412      	bmi.n	800e406 <sinf_poly+0x2a>
 800e3e0:	ee21 5b00 	vmul.f64	d5, d1, d0
 800e3e4:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800e3e8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800e3ec:	eea6 7b01 	vfma.f64	d7, d6, d1
 800e3f0:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800e3f4:	ee21 1b05 	vmul.f64	d1, d1, d5
 800e3f8:	eea6 0b05 	vfma.f64	d0, d6, d5
 800e3fc:	eea7 0b01 	vfma.f64	d0, d7, d1
 800e400:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e404:	4770      	bx	lr
 800e406:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800e40a:	ee21 5b01 	vmul.f64	d5, d1, d1
 800e40e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800e412:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800e416:	eea1 7b06 	vfma.f64	d7, d1, d6
 800e41a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800e41e:	eea1 0b06 	vfma.f64	d0, d1, d6
 800e422:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800e426:	ee21 1b05 	vmul.f64	d1, d1, d5
 800e42a:	eea5 0b06 	vfma.f64	d0, d5, d6
 800e42e:	e7e5      	b.n	800e3fc <sinf_poly+0x20>

0800e430 <sinf>:
 800e430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e432:	ee10 4a10 	vmov	r4, s0
 800e436:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800e43a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800e43e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800e442:	eef0 7a40 	vmov.f32	s15, s0
 800e446:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800e44a:	d218      	bcs.n	800e47e <sinf+0x4e>
 800e44c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e450:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800e454:	d20a      	bcs.n	800e46c <sinf+0x3c>
 800e456:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800e45a:	d103      	bne.n	800e464 <sinf+0x34>
 800e45c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800e460:	ed8d 1a01 	vstr	s2, [sp, #4]
 800e464:	eeb0 0a67 	vmov.f32	s0, s15
 800e468:	b003      	add	sp, #12
 800e46a:	bd30      	pop	{r4, r5, pc}
 800e46c:	483a      	ldr	r0, [pc, #232]	; (800e558 <sinf+0x128>)
 800e46e:	eeb0 0b46 	vmov.f64	d0, d6
 800e472:	2100      	movs	r1, #0
 800e474:	b003      	add	sp, #12
 800e476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e47a:	f7ff bfaf 	b.w	800e3dc <sinf_poly>
 800e47e:	f240 422e 	movw	r2, #1070	; 0x42e
 800e482:	4293      	cmp	r3, r2
 800e484:	d824      	bhi.n	800e4d0 <sinf+0xa0>
 800e486:	4b34      	ldr	r3, [pc, #208]	; (800e558 <sinf+0x128>)
 800e488:	ed93 7b08 	vldr	d7, [r3, #32]
 800e48c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e490:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e494:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800e498:	ee17 1a90 	vmov	r1, s15
 800e49c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800e4a0:	1609      	asrs	r1, r1, #24
 800e4a2:	ee07 1a90 	vmov	s15, r1
 800e4a6:	f001 0203 	and.w	r2, r1, #3
 800e4aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e4ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e4b2:	ed92 0b00 	vldr	d0, [r2]
 800e4b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800e4ba:	f011 0f02 	tst.w	r1, #2
 800e4be:	eea5 6b47 	vfms.f64	d6, d5, d7
 800e4c2:	bf08      	it	eq
 800e4c4:	4618      	moveq	r0, r3
 800e4c6:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e4ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e4ce:	e7d1      	b.n	800e474 <sinf+0x44>
 800e4d0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800e4d4:	d237      	bcs.n	800e546 <sinf+0x116>
 800e4d6:	4a21      	ldr	r2, [pc, #132]	; (800e55c <sinf+0x12c>)
 800e4d8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800e4dc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800e4e0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800e4e4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800e4e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e4ec:	4083      	lsls	r3, r0
 800e4ee:	6a28      	ldr	r0, [r5, #32]
 800e4f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e4f4:	fba3 1000 	umull	r1, r0, r3, r0
 800e4f8:	6929      	ldr	r1, [r5, #16]
 800e4fa:	435a      	muls	r2, r3
 800e4fc:	fbe3 0201 	umlal	r0, r2, r3, r1
 800e500:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800e504:	0f8d      	lsrs	r5, r1, #30
 800e506:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800e50a:	1a51      	subs	r1, r2, r1
 800e50c:	f7f2 f8ce 	bl	80006ac <__aeabi_l2d>
 800e510:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800e514:	4b10      	ldr	r3, [pc, #64]	; (800e558 <sinf+0x128>)
 800e516:	f004 0203 	and.w	r2, r4, #3
 800e51a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e51e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e550 <sinf+0x120>
 800e522:	ed92 0b00 	vldr	d0, [r2]
 800e526:	ec41 0b16 	vmov	d6, r0, r1
 800e52a:	f014 0f02 	tst.w	r4, #2
 800e52e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e532:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800e536:	4629      	mov	r1, r5
 800e538:	bf08      	it	eq
 800e53a:	4618      	moveq	r0, r3
 800e53c:	ee27 1b07 	vmul.f64	d1, d7, d7
 800e540:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e544:	e796      	b.n	800e474 <sinf+0x44>
 800e546:	b003      	add	sp, #12
 800e548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e54c:	f7ff bc83 	b.w	800de56 <__math_invalidf>
 800e550:	54442d18 	.word	0x54442d18
 800e554:	3c1921fb 	.word	0x3c1921fb
 800e558:	08011280 	.word	0x08011280
 800e55c:	08011220 	.word	0x08011220

0800e560 <asin>:
 800e560:	b508      	push	{r3, lr}
 800e562:	ed2d 8b04 	vpush	{d8-d9}
 800e566:	eeb0 8b40 	vmov.f64	d8, d0
 800e56a:	f000 f895 	bl	800e698 <__ieee754_asin>
 800e56e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e576:	eeb0 9b40 	vmov.f64	d9, d0
 800e57a:	d615      	bvs.n	800e5a8 <asin+0x48>
 800e57c:	eeb0 0b48 	vmov.f64	d0, d8
 800e580:	f001 f9e4 	bl	800f94c <fabs>
 800e584:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e588:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e590:	dd0a      	ble.n	800e5a8 <asin+0x48>
 800e592:	f7fc fe5b 	bl	800b24c <__errno>
 800e596:	ecbd 8b04 	vpop	{d8-d9}
 800e59a:	2321      	movs	r3, #33	; 0x21
 800e59c:	6003      	str	r3, [r0, #0]
 800e59e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e5a2:	4804      	ldr	r0, [pc, #16]	; (800e5b4 <asin+0x54>)
 800e5a4:	f001 b9dc 	b.w	800f960 <nan>
 800e5a8:	eeb0 0b49 	vmov.f64	d0, d9
 800e5ac:	ecbd 8b04 	vpop	{d8-d9}
 800e5b0:	bd08      	pop	{r3, pc}
 800e5b2:	bf00      	nop
 800e5b4:	080100c8 	.word	0x080100c8

0800e5b8 <atan2>:
 800e5b8:	f000 b97e 	b.w	800e8b8 <__ieee754_atan2>
 800e5bc:	0000      	movs	r0, r0
	...

0800e5c0 <sqrt>:
 800e5c0:	b508      	push	{r3, lr}
 800e5c2:	ed2d 8b04 	vpush	{d8-d9}
 800e5c6:	eeb0 8b40 	vmov.f64	d8, d0
 800e5ca:	f000 fa37 	bl	800ea3c <__ieee754_sqrt>
 800e5ce:	eeb4 8b48 	vcmp.f64	d8, d8
 800e5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d6:	d60c      	bvs.n	800e5f2 <sqrt+0x32>
 800e5d8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800e5f8 <sqrt+0x38>
 800e5dc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e4:	d505      	bpl.n	800e5f2 <sqrt+0x32>
 800e5e6:	f7fc fe31 	bl	800b24c <__errno>
 800e5ea:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e5ee:	2321      	movs	r3, #33	; 0x21
 800e5f0:	6003      	str	r3, [r0, #0]
 800e5f2:	ecbd 8b04 	vpop	{d8-d9}
 800e5f6:	bd08      	pop	{r3, pc}
	...

0800e600 <asinf>:
 800e600:	b508      	push	{r3, lr}
 800e602:	ed2d 8b02 	vpush	{d8}
 800e606:	eeb0 8a40 	vmov.f32	s16, s0
 800e60a:	f000 fa1b 	bl	800ea44 <__ieee754_asinf>
 800e60e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	eef0 8a40 	vmov.f32	s17, s0
 800e61a:	d615      	bvs.n	800e648 <asinf+0x48>
 800e61c:	eeb0 0a48 	vmov.f32	s0, s16
 800e620:	f001 fa7a 	bl	800fb18 <fabsf>
 800e624:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e628:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e630:	dd0a      	ble.n	800e648 <asinf+0x48>
 800e632:	f7fc fe0b 	bl	800b24c <__errno>
 800e636:	ecbd 8b02 	vpop	{d8}
 800e63a:	2321      	movs	r3, #33	; 0x21
 800e63c:	6003      	str	r3, [r0, #0]
 800e63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e642:	4804      	ldr	r0, [pc, #16]	; (800e654 <asinf+0x54>)
 800e644:	f001 bab2 	b.w	800fbac <nanf>
 800e648:	eeb0 0a68 	vmov.f32	s0, s17
 800e64c:	ecbd 8b02 	vpop	{d8}
 800e650:	bd08      	pop	{r3, pc}
 800e652:	bf00      	nop
 800e654:	080100c8 	.word	0x080100c8

0800e658 <atan2f>:
 800e658:	f000 bada 	b.w	800ec10 <__ieee754_atan2f>

0800e65c <sqrtf>:
 800e65c:	b508      	push	{r3, lr}
 800e65e:	ed2d 8b02 	vpush	{d8}
 800e662:	eeb0 8a40 	vmov.f32	s16, s0
 800e666:	f000 fcad 	bl	800efc4 <__ieee754_sqrtf>
 800e66a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e672:	d60c      	bvs.n	800e68e <sqrtf+0x32>
 800e674:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e694 <sqrtf+0x38>
 800e678:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e680:	d505      	bpl.n	800e68e <sqrtf+0x32>
 800e682:	f7fc fde3 	bl	800b24c <__errno>
 800e686:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e68a:	2321      	movs	r3, #33	; 0x21
 800e68c:	6003      	str	r3, [r0, #0]
 800e68e:	ecbd 8b02 	vpop	{d8}
 800e692:	bd08      	pop	{r3, pc}
 800e694:	00000000 	.word	0x00000000

0800e698 <__ieee754_asin>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	ee10 5a90 	vmov	r5, s1
 800e69e:	4b82      	ldr	r3, [pc, #520]	; (800e8a8 <__ieee754_asin+0x210>)
 800e6a0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e6a4:	429c      	cmp	r4, r3
 800e6a6:	ed2d 8b06 	vpush	{d8-d10}
 800e6aa:	dd19      	ble.n	800e6e0 <__ieee754_asin+0x48>
 800e6ac:	ee10 3a10 	vmov	r3, s0
 800e6b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e6b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e6b8:	4323      	orrs	r3, r4
 800e6ba:	d10c      	bne.n	800e6d6 <__ieee754_asin+0x3e>
 800e6bc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800e830 <__ieee754_asin+0x198>
 800e6c0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800e838 <__ieee754_asin+0x1a0>
 800e6c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e6c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e6cc:	eeb0 0b47 	vmov.f64	d0, d7
 800e6d0:	ecbd 8b06 	vpop	{d8-d10}
 800e6d4:	bd38      	pop	{r3, r4, r5, pc}
 800e6d6:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e6da:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e6de:	e7f7      	b.n	800e6d0 <__ieee754_asin+0x38>
 800e6e0:	4b72      	ldr	r3, [pc, #456]	; (800e8ac <__ieee754_asin+0x214>)
 800e6e2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	dc0b      	bgt.n	800e702 <__ieee754_asin+0x6a>
 800e6ea:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800e6ee:	da52      	bge.n	800e796 <__ieee754_asin+0xfe>
 800e6f0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800e840 <__ieee754_asin+0x1a8>
 800e6f4:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e6f8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800e6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e700:	dce6      	bgt.n	800e6d0 <__ieee754_asin+0x38>
 800e702:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e706:	f001 f921 	bl	800f94c <fabs>
 800e70a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800e848 <__ieee754_asin+0x1b0>
 800e70e:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e712:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e716:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e850 <__ieee754_asin+0x1b8>
 800e71a:	eeb0 0b48 	vmov.f64	d0, d8
 800e71e:	eea8 6b07 	vfma.f64	d6, d8, d7
 800e722:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e858 <__ieee754_asin+0x1c0>
 800e726:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e72a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e860 <__ieee754_asin+0x1c8>
 800e72e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800e868 <__ieee754_asin+0x1d0>
 800e732:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e736:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800e870 <__ieee754_asin+0x1d8>
 800e73a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e73e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e878 <__ieee754_asin+0x1e0>
 800e742:	eea7 ab08 	vfma.f64	d10, d7, d8
 800e746:	ee2a ab08 	vmul.f64	d10, d10, d8
 800e74a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e880 <__ieee754_asin+0x1e8>
 800e74e:	eea8 7b06 	vfma.f64	d7, d8, d6
 800e752:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e888 <__ieee754_asin+0x1f0>
 800e756:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e75a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e890 <__ieee754_asin+0x1f8>
 800e75e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e762:	eea7 9b08 	vfma.f64	d9, d7, d8
 800e766:	f000 f969 	bl	800ea3c <__ieee754_sqrt>
 800e76a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800e76e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800e772:	4b4f      	ldr	r3, [pc, #316]	; (800e8b0 <__ieee754_asin+0x218>)
 800e774:	429c      	cmp	r4, r3
 800e776:	dd3d      	ble.n	800e7f4 <__ieee754_asin+0x15c>
 800e778:	eea0 0b05 	vfma.f64	d0, d0, d5
 800e77c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e898 <__ieee754_asin+0x200>
 800e780:	eea0 7b04 	vfma.f64	d7, d0, d4
 800e784:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800e838 <__ieee754_asin+0x1a0>
 800e788:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e78c:	2d00      	cmp	r5, #0
 800e78e:	bfd8      	it	le
 800e790:	eeb1 0b40 	vnegle.f64	d0, d0
 800e794:	e79c      	b.n	800e6d0 <__ieee754_asin+0x38>
 800e796:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e848 <__ieee754_asin+0x1b0>
 800e79a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800e79e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e850 <__ieee754_asin+0x1b8>
 800e7a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7a6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e858 <__ieee754_asin+0x1c0>
 800e7aa:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e7ae:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e860 <__ieee754_asin+0x1c8>
 800e7b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e7b6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800e870 <__ieee754_asin+0x1d8>
 800e7ba:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e7be:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800e868 <__ieee754_asin+0x1d0>
 800e7c2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800e878 <__ieee754_asin+0x1e0>
 800e7c6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e7ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7ce:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e880 <__ieee754_asin+0x1e8>
 800e7d2:	eea7 5b04 	vfma.f64	d5, d7, d4
 800e7d6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800e888 <__ieee754_asin+0x1f0>
 800e7da:	eea5 4b07 	vfma.f64	d4, d5, d7
 800e7de:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e890 <__ieee754_asin+0x1f8>
 800e7e2:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e7e6:	eea5 9b07 	vfma.f64	d9, d5, d7
 800e7ea:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800e7ee:	eea0 0b07 	vfma.f64	d0, d0, d7
 800e7f2:	e76d      	b.n	800e6d0 <__ieee754_asin+0x38>
 800e7f4:	ec53 2b10 	vmov	r2, r3, d0
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	ec43 2b16 	vmov	d6, r2, r3
 800e7fe:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e802:	eea6 8b46 	vfms.f64	d8, d6, d6
 800e806:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800e80a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800e830 <__ieee754_asin+0x198>
 800e80e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e812:	eea3 7b44 	vfms.f64	d7, d3, d4
 800e816:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800e81a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800e8a0 <__ieee754_asin+0x208>
 800e81e:	eeb0 0b45 	vmov.f64	d0, d5
 800e822:	eea6 0b44 	vfms.f64	d0, d6, d4
 800e826:	ee37 0b40 	vsub.f64	d0, d7, d0
 800e82a:	ee35 0b40 	vsub.f64	d0, d5, d0
 800e82e:	e7ad      	b.n	800e78c <__ieee754_asin+0xf4>
 800e830:	33145c07 	.word	0x33145c07
 800e834:	3c91a626 	.word	0x3c91a626
 800e838:	54442d18 	.word	0x54442d18
 800e83c:	3ff921fb 	.word	0x3ff921fb
 800e840:	8800759c 	.word	0x8800759c
 800e844:	7e37e43c 	.word	0x7e37e43c
 800e848:	0dfdf709 	.word	0x0dfdf709
 800e84c:	3f023de1 	.word	0x3f023de1
 800e850:	7501b288 	.word	0x7501b288
 800e854:	3f49efe0 	.word	0x3f49efe0
 800e858:	b5688f3b 	.word	0xb5688f3b
 800e85c:	bfa48228 	.word	0xbfa48228
 800e860:	0e884455 	.word	0x0e884455
 800e864:	3fc9c155 	.word	0x3fc9c155
 800e868:	55555555 	.word	0x55555555
 800e86c:	3fc55555 	.word	0x3fc55555
 800e870:	03eb6f7d 	.word	0x03eb6f7d
 800e874:	bfd4d612 	.word	0xbfd4d612
 800e878:	b12e9282 	.word	0xb12e9282
 800e87c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e880:	1b8d0159 	.word	0x1b8d0159
 800e884:	bfe6066c 	.word	0xbfe6066c
 800e888:	9c598ac8 	.word	0x9c598ac8
 800e88c:	40002ae5 	.word	0x40002ae5
 800e890:	1c8a2d4b 	.word	0x1c8a2d4b
 800e894:	c0033a27 	.word	0xc0033a27
 800e898:	33145c07 	.word	0x33145c07
 800e89c:	bc91a626 	.word	0xbc91a626
 800e8a0:	54442d18 	.word	0x54442d18
 800e8a4:	3fe921fb 	.word	0x3fe921fb
 800e8a8:	3fefffff 	.word	0x3fefffff
 800e8ac:	3fdfffff 	.word	0x3fdfffff
 800e8b0:	3fef3332 	.word	0x3fef3332
 800e8b4:	00000000 	.word	0x00000000

0800e8b8 <__ieee754_atan2>:
 800e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ba:	eeb0 7b40 	vmov.f64	d7, d0
 800e8be:	ee11 6a10 	vmov	r6, s2
 800e8c2:	ee11 0a90 	vmov	r0, s3
 800e8c6:	4273      	negs	r3, r6
 800e8c8:	4f59      	ldr	r7, [pc, #356]	; (800ea30 <__ieee754_atan2+0x178>)
 800e8ca:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e8ce:	4333      	orrs	r3, r6
 800e8d0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e8d4:	42bb      	cmp	r3, r7
 800e8d6:	d80d      	bhi.n	800e8f4 <__ieee754_atan2+0x3c>
 800e8d8:	ee10 ca10 	vmov	ip, s0
 800e8dc:	ee17 5a90 	vmov	r5, s15
 800e8e0:	f1cc 0100 	rsb	r1, ip, #0
 800e8e4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8e8:	ea41 010c 	orr.w	r1, r1, ip
 800e8ec:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800e8f0:	42b9      	cmp	r1, r7
 800e8f2:	d904      	bls.n	800e8fe <__ieee754_atan2+0x46>
 800e8f4:	ee37 7b01 	vadd.f64	d7, d7, d1
 800e8f8:	eeb0 0b47 	vmov.f64	d0, d7
 800e8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8fe:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800e902:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800e906:	4331      	orrs	r1, r6
 800e908:	d103      	bne.n	800e912 <__ieee754_atan2+0x5a>
 800e90a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e90e:	f000 bf23 	b.w	800f758 <atan>
 800e912:	1784      	asrs	r4, r0, #30
 800e914:	f004 0402 	and.w	r4, r4, #2
 800e918:	ea53 010c 	orrs.w	r1, r3, ip
 800e91c:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800e920:	d107      	bne.n	800e932 <__ieee754_atan2+0x7a>
 800e922:	2c02      	cmp	r4, #2
 800e924:	d05d      	beq.n	800e9e2 <__ieee754_atan2+0x12a>
 800e926:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800e9f8 <__ieee754_atan2+0x140>
 800e92a:	2c03      	cmp	r4, #3
 800e92c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800e930:	e7e2      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e932:	ea52 0106 	orrs.w	r1, r2, r6
 800e936:	d107      	bne.n	800e948 <__ieee754_atan2+0x90>
 800e938:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800ea00 <__ieee754_atan2+0x148>
 800e93c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 800ea08 <__ieee754_atan2+0x150>
 800e940:	2d00      	cmp	r5, #0
 800e942:	fe27 7b00 	vselge.f64	d7, d7, d0
 800e946:	e7d7      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e948:	42ba      	cmp	r2, r7
 800e94a:	d10f      	bne.n	800e96c <__ieee754_atan2+0xb4>
 800e94c:	4293      	cmp	r3, r2
 800e94e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e952:	d107      	bne.n	800e964 <__ieee754_atan2+0xac>
 800e954:	2c02      	cmp	r4, #2
 800e956:	d847      	bhi.n	800e9e8 <__ieee754_atan2+0x130>
 800e958:	4b36      	ldr	r3, [pc, #216]	; (800ea34 <__ieee754_atan2+0x17c>)
 800e95a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e95e:	ed94 7b00 	vldr	d7, [r4]
 800e962:	e7c9      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e964:	2c02      	cmp	r4, #2
 800e966:	d842      	bhi.n	800e9ee <__ieee754_atan2+0x136>
 800e968:	4b33      	ldr	r3, [pc, #204]	; (800ea38 <__ieee754_atan2+0x180>)
 800e96a:	e7f6      	b.n	800e95a <__ieee754_atan2+0xa2>
 800e96c:	42bb      	cmp	r3, r7
 800e96e:	d0e3      	beq.n	800e938 <__ieee754_atan2+0x80>
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e976:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e97a:	da1a      	bge.n	800e9b2 <__ieee754_atan2+0xfa>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	da01      	bge.n	800e984 <__ieee754_atan2+0xcc>
 800e980:	323c      	adds	r2, #60	; 0x3c
 800e982:	db19      	blt.n	800e9b8 <__ieee754_atan2+0x100>
 800e984:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800e988:	f000 ffe0 	bl	800f94c <fabs>
 800e98c:	f000 fee4 	bl	800f758 <atan>
 800e990:	eeb0 7b40 	vmov.f64	d7, d0
 800e994:	2c01      	cmp	r4, #1
 800e996:	d012      	beq.n	800e9be <__ieee754_atan2+0x106>
 800e998:	2c02      	cmp	r4, #2
 800e99a:	d019      	beq.n	800e9d0 <__ieee754_atan2+0x118>
 800e99c:	2c00      	cmp	r4, #0
 800e99e:	d0ab      	beq.n	800e8f8 <__ieee754_atan2+0x40>
 800e9a0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800ea10 <__ieee754_atan2+0x158>
 800e9a4:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e9a8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800ea18 <__ieee754_atan2+0x160>
 800e9ac:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e9b0:	e7a2      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9b2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ea00 <__ieee754_atan2+0x148>
 800e9b6:	e7ed      	b.n	800e994 <__ieee754_atan2+0xdc>
 800e9b8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800ea20 <__ieee754_atan2+0x168>
 800e9bc:	e7ea      	b.n	800e994 <__ieee754_atan2+0xdc>
 800e9be:	ee17 1a90 	vmov	r1, s15
 800e9c2:	ec53 2b17 	vmov	r2, r3, d7
 800e9c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ca:	ec43 2b17 	vmov	d7, r2, r3
 800e9ce:	e793      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9d0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800ea10 <__ieee754_atan2+0x158>
 800e9d4:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e9d8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800ea18 <__ieee754_atan2+0x160>
 800e9dc:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e9e0:	e78a      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ea18 <__ieee754_atan2+0x160>
 800e9e6:	e787      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ea28 <__ieee754_atan2+0x170>
 800e9ec:	e784      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ea20 <__ieee754_atan2+0x168>
 800e9f2:	e781      	b.n	800e8f8 <__ieee754_atan2+0x40>
 800e9f4:	f3af 8000 	nop.w
 800e9f8:	54442d18 	.word	0x54442d18
 800e9fc:	c00921fb 	.word	0xc00921fb
 800ea00:	54442d18 	.word	0x54442d18
 800ea04:	3ff921fb 	.word	0x3ff921fb
 800ea08:	54442d18 	.word	0x54442d18
 800ea0c:	bff921fb 	.word	0xbff921fb
 800ea10:	33145c07 	.word	0x33145c07
 800ea14:	3ca1a626 	.word	0x3ca1a626
 800ea18:	54442d18 	.word	0x54442d18
 800ea1c:	400921fb 	.word	0x400921fb
	...
 800ea28:	54442d18 	.word	0x54442d18
 800ea2c:	3fe921fb 	.word	0x3fe921fb
 800ea30:	7ff00000 	.word	0x7ff00000
 800ea34:	08011360 	.word	0x08011360
 800ea38:	08011378 	.word	0x08011378

0800ea3c <__ieee754_sqrt>:
 800ea3c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ea40:	4770      	bx	lr
	...

0800ea44 <__ieee754_asinf>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	ee10 5a10 	vmov	r5, s0
 800ea4a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ea4e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ea52:	ed2d 8b04 	vpush	{d8-d9}
 800ea56:	d10c      	bne.n	800ea72 <__ieee754_asinf+0x2e>
 800ea58:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800ebd0 <__ieee754_asinf+0x18c>
 800ea5c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800ebd4 <__ieee754_asinf+0x190>
 800ea60:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ea64:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea68:	eeb0 0a67 	vmov.f32	s0, s15
 800ea6c:	ecbd 8b04 	vpop	{d8-d9}
 800ea70:	bd38      	pop	{r3, r4, r5, pc}
 800ea72:	dd04      	ble.n	800ea7e <__ieee754_asinf+0x3a>
 800ea74:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea78:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ea7c:	e7f6      	b.n	800ea6c <__ieee754_asinf+0x28>
 800ea7e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ea82:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ea86:	da0b      	bge.n	800eaa0 <__ieee754_asinf+0x5c>
 800ea88:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ea8c:	da52      	bge.n	800eb34 <__ieee754_asinf+0xf0>
 800ea8e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800ebd8 <__ieee754_asinf+0x194>
 800ea92:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ea96:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ea9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9e:	dce5      	bgt.n	800ea6c <__ieee754_asinf+0x28>
 800eaa0:	f001 f83a 	bl	800fb18 <fabsf>
 800eaa4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800eaa8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800eaac:	ee20 8a08 	vmul.f32	s16, s0, s16
 800eab0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ebdc <__ieee754_asinf+0x198>
 800eab4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ebe0 <__ieee754_asinf+0x19c>
 800eab8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800ebe4 <__ieee754_asinf+0x1a0>
 800eabc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800eac0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800ebe8 <__ieee754_asinf+0x1a4>
 800eac4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eac8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ebec <__ieee754_asinf+0x1a8>
 800eacc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ead0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ebf0 <__ieee754_asinf+0x1ac>
 800ead4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ead8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ebf4 <__ieee754_asinf+0x1b0>
 800eadc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800eae0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800ebf8 <__ieee754_asinf+0x1b4>
 800eae4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800eae8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ebfc <__ieee754_asinf+0x1b8>
 800eaec:	eea7 7a88 	vfma.f32	s14, s15, s16
 800eaf0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ec00 <__ieee754_asinf+0x1bc>
 800eaf4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eaf8:	eeb0 0a48 	vmov.f32	s0, s16
 800eafc:	eee7 8a88 	vfma.f32	s17, s15, s16
 800eb00:	f000 fa60 	bl	800efc4 <__ieee754_sqrtf>
 800eb04:	4b3f      	ldr	r3, [pc, #252]	; (800ec04 <__ieee754_asinf+0x1c0>)
 800eb06:	ee29 9a08 	vmul.f32	s18, s18, s16
 800eb0a:	429c      	cmp	r4, r3
 800eb0c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800eb10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800eb14:	dd3d      	ble.n	800eb92 <__ieee754_asinf+0x14e>
 800eb16:	eea0 0a06 	vfma.f32	s0, s0, s12
 800eb1a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ec08 <__ieee754_asinf+0x1c4>
 800eb1e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800eb22:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ebd4 <__ieee754_asinf+0x190>
 800eb26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eb2a:	2d00      	cmp	r5, #0
 800eb2c:	bfd8      	it	le
 800eb2e:	eeb1 0a40 	vnegle.f32	s0, s0
 800eb32:	e79b      	b.n	800ea6c <__ieee754_asinf+0x28>
 800eb34:	ee60 7a00 	vmul.f32	s15, s0, s0
 800eb38:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ebdc <__ieee754_asinf+0x198>
 800eb3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ebe0 <__ieee754_asinf+0x19c>
 800eb40:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800ebf4 <__ieee754_asinf+0x1b0>
 800eb44:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800eb48:	eddf 6a27 	vldr	s13, [pc, #156]	; 800ebe8 <__ieee754_asinf+0x1a4>
 800eb4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eb50:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ebec <__ieee754_asinf+0x1a8>
 800eb54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb58:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ebf0 <__ieee754_asinf+0x1ac>
 800eb5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eb60:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800ebe4 <__ieee754_asinf+0x1a0>
 800eb64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb68:	eddf 6a23 	vldr	s13, [pc, #140]	; 800ebf8 <__ieee754_asinf+0x1b4>
 800eb6c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800eb70:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800ebfc <__ieee754_asinf+0x1b8>
 800eb74:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800eb78:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ec00 <__ieee754_asinf+0x1bc>
 800eb7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800eb80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb84:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800eb88:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800eb8c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800eb90:	e76c      	b.n	800ea6c <__ieee754_asinf+0x28>
 800eb92:	ee10 3a10 	vmov	r3, s0
 800eb96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eb9a:	f023 030f 	bic.w	r3, r3, #15
 800eb9e:	ee07 3a10 	vmov	s14, r3
 800eba2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800eba6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ebaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ebae:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800ebb2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ebd0 <__ieee754_asinf+0x18c>
 800ebb6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800ebba:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800ebbe:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ec0c <__ieee754_asinf+0x1c8>
 800ebc2:	eeb0 6a40 	vmov.f32	s12, s0
 800ebc6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ebca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ebce:	e7aa      	b.n	800eb26 <__ieee754_asinf+0xe2>
 800ebd0:	b33bbd2e 	.word	0xb33bbd2e
 800ebd4:	3fc90fdb 	.word	0x3fc90fdb
 800ebd8:	7149f2ca 	.word	0x7149f2ca
 800ebdc:	3811ef08 	.word	0x3811ef08
 800ebe0:	3a4f7f04 	.word	0x3a4f7f04
 800ebe4:	3e2aaaab 	.word	0x3e2aaaab
 800ebe8:	bd241146 	.word	0xbd241146
 800ebec:	3e4e0aa8 	.word	0x3e4e0aa8
 800ebf0:	bea6b090 	.word	0xbea6b090
 800ebf4:	3d9dc62e 	.word	0x3d9dc62e
 800ebf8:	bf303361 	.word	0xbf303361
 800ebfc:	4001572d 	.word	0x4001572d
 800ec00:	c019d139 	.word	0xc019d139
 800ec04:	3f799999 	.word	0x3f799999
 800ec08:	333bbd2e 	.word	0x333bbd2e
 800ec0c:	3f490fdb 	.word	0x3f490fdb

0800ec10 <__ieee754_atan2f>:
 800ec10:	ee10 2a90 	vmov	r2, s1
 800ec14:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ec18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ec1c:	b510      	push	{r4, lr}
 800ec1e:	eef0 7a40 	vmov.f32	s15, s0
 800ec22:	dc06      	bgt.n	800ec32 <__ieee754_atan2f+0x22>
 800ec24:	ee10 0a10 	vmov	r0, s0
 800ec28:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ec2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ec30:	dd04      	ble.n	800ec3c <__ieee754_atan2f+0x2c>
 800ec32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ec36:	eeb0 0a67 	vmov.f32	s0, s15
 800ec3a:	bd10      	pop	{r4, pc}
 800ec3c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ec40:	d103      	bne.n	800ec4a <__ieee754_atan2f+0x3a>
 800ec42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec46:	f000 be93 	b.w	800f970 <atanf>
 800ec4a:	1794      	asrs	r4, r2, #30
 800ec4c:	f004 0402 	and.w	r4, r4, #2
 800ec50:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ec54:	b93b      	cbnz	r3, 800ec66 <__ieee754_atan2f+0x56>
 800ec56:	2c02      	cmp	r4, #2
 800ec58:	d05c      	beq.n	800ed14 <__ieee754_atan2f+0x104>
 800ec5a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ed28 <__ieee754_atan2f+0x118>
 800ec5e:	2c03      	cmp	r4, #3
 800ec60:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800ec64:	e7e7      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ec66:	b939      	cbnz	r1, 800ec78 <__ieee754_atan2f+0x68>
 800ec68:	eddf 7a30 	vldr	s15, [pc, #192]	; 800ed2c <__ieee754_atan2f+0x11c>
 800ec6c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ed30 <__ieee754_atan2f+0x120>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	fe67 7a80 	vselge.f32	s15, s15, s0
 800ec76:	e7de      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ec78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ec7c:	d110      	bne.n	800eca0 <__ieee754_atan2f+0x90>
 800ec7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ec82:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec86:	d107      	bne.n	800ec98 <__ieee754_atan2f+0x88>
 800ec88:	2c02      	cmp	r4, #2
 800ec8a:	d846      	bhi.n	800ed1a <__ieee754_atan2f+0x10a>
 800ec8c:	4b29      	ldr	r3, [pc, #164]	; (800ed34 <__ieee754_atan2f+0x124>)
 800ec8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec92:	edd4 7a00 	vldr	s15, [r4]
 800ec96:	e7ce      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ec98:	2c02      	cmp	r4, #2
 800ec9a:	d841      	bhi.n	800ed20 <__ieee754_atan2f+0x110>
 800ec9c:	4b26      	ldr	r3, [pc, #152]	; (800ed38 <__ieee754_atan2f+0x128>)
 800ec9e:	e7f6      	b.n	800ec8e <__ieee754_atan2f+0x7e>
 800eca0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eca4:	d0e0      	beq.n	800ec68 <__ieee754_atan2f+0x58>
 800eca6:	1a5b      	subs	r3, r3, r1
 800eca8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800ecac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ecb0:	da1a      	bge.n	800ece8 <__ieee754_atan2f+0xd8>
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	da01      	bge.n	800ecba <__ieee754_atan2f+0xaa>
 800ecb6:	313c      	adds	r1, #60	; 0x3c
 800ecb8:	db19      	blt.n	800ecee <__ieee754_atan2f+0xde>
 800ecba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ecbe:	f000 ff2b 	bl	800fb18 <fabsf>
 800ecc2:	f000 fe55 	bl	800f970 <atanf>
 800ecc6:	eef0 7a40 	vmov.f32	s15, s0
 800ecca:	2c01      	cmp	r4, #1
 800eccc:	d012      	beq.n	800ecf4 <__ieee754_atan2f+0xe4>
 800ecce:	2c02      	cmp	r4, #2
 800ecd0:	d017      	beq.n	800ed02 <__ieee754_atan2f+0xf2>
 800ecd2:	2c00      	cmp	r4, #0
 800ecd4:	d0af      	beq.n	800ec36 <__ieee754_atan2f+0x26>
 800ecd6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ed3c <__ieee754_atan2f+0x12c>
 800ecda:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ecde:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800ed40 <__ieee754_atan2f+0x130>
 800ece2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ece6:	e7a6      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ece8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ed2c <__ieee754_atan2f+0x11c>
 800ecec:	e7ed      	b.n	800ecca <__ieee754_atan2f+0xba>
 800ecee:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ed44 <__ieee754_atan2f+0x134>
 800ecf2:	e7ea      	b.n	800ecca <__ieee754_atan2f+0xba>
 800ecf4:	ee17 3a90 	vmov	r3, s15
 800ecf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecfc:	ee07 3a90 	vmov	s15, r3
 800ed00:	e799      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ed02:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ed3c <__ieee754_atan2f+0x12c>
 800ed06:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ed0a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ed40 <__ieee754_atan2f+0x130>
 800ed0e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ed12:	e790      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ed14:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ed40 <__ieee754_atan2f+0x130>
 800ed18:	e78d      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ed1a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800ed48 <__ieee754_atan2f+0x138>
 800ed1e:	e78a      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ed20:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ed44 <__ieee754_atan2f+0x134>
 800ed24:	e787      	b.n	800ec36 <__ieee754_atan2f+0x26>
 800ed26:	bf00      	nop
 800ed28:	c0490fdb 	.word	0xc0490fdb
 800ed2c:	3fc90fdb 	.word	0x3fc90fdb
 800ed30:	bfc90fdb 	.word	0xbfc90fdb
 800ed34:	08011390 	.word	0x08011390
 800ed38:	0801139c 	.word	0x0801139c
 800ed3c:	33bbbd2e 	.word	0x33bbbd2e
 800ed40:	40490fdb 	.word	0x40490fdb
 800ed44:	00000000 	.word	0x00000000
 800ed48:	3f490fdb 	.word	0x3f490fdb

0800ed4c <__ieee754_rem_pio2f>:
 800ed4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed4e:	ee10 6a10 	vmov	r6, s0
 800ed52:	4b8e      	ldr	r3, [pc, #568]	; (800ef8c <__ieee754_rem_pio2f+0x240>)
 800ed54:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ed58:	429d      	cmp	r5, r3
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	eef0 7a40 	vmov.f32	s15, s0
 800ed60:	4604      	mov	r4, r0
 800ed62:	dc05      	bgt.n	800ed70 <__ieee754_rem_pio2f+0x24>
 800ed64:	2300      	movs	r3, #0
 800ed66:	ed80 0a00 	vstr	s0, [r0]
 800ed6a:	6043      	str	r3, [r0, #4]
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e01a      	b.n	800eda6 <__ieee754_rem_pio2f+0x5a>
 800ed70:	4b87      	ldr	r3, [pc, #540]	; (800ef90 <__ieee754_rem_pio2f+0x244>)
 800ed72:	429d      	cmp	r5, r3
 800ed74:	dc46      	bgt.n	800ee04 <__ieee754_rem_pio2f+0xb8>
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ef94 <__ieee754_rem_pio2f+0x248>
 800ed7c:	4b86      	ldr	r3, [pc, #536]	; (800ef98 <__ieee754_rem_pio2f+0x24c>)
 800ed7e:	f025 050f 	bic.w	r5, r5, #15
 800ed82:	dd1f      	ble.n	800edc4 <__ieee754_rem_pio2f+0x78>
 800ed84:	429d      	cmp	r5, r3
 800ed86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ed8a:	d00e      	beq.n	800edaa <__ieee754_rem_pio2f+0x5e>
 800ed8c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ef9c <__ieee754_rem_pio2f+0x250>
 800ed90:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ed94:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ed98:	ed80 0a00 	vstr	s0, [r0]
 800ed9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eda0:	2001      	movs	r0, #1
 800eda2:	edc4 7a01 	vstr	s15, [r4, #4]
 800eda6:	b007      	add	sp, #28
 800eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edaa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800efa0 <__ieee754_rem_pio2f+0x254>
 800edae:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800efa4 <__ieee754_rem_pio2f+0x258>
 800edb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800edb6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800edba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edbe:	edc0 6a00 	vstr	s13, [r0]
 800edc2:	e7eb      	b.n	800ed9c <__ieee754_rem_pio2f+0x50>
 800edc4:	429d      	cmp	r5, r3
 800edc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800edca:	d00e      	beq.n	800edea <__ieee754_rem_pio2f+0x9e>
 800edcc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ef9c <__ieee754_rem_pio2f+0x250>
 800edd0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800edd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800edd8:	ed80 0a00 	vstr	s0, [r0]
 800eddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ede0:	f04f 30ff 	mov.w	r0, #4294967295
 800ede4:	edc4 7a01 	vstr	s15, [r4, #4]
 800ede8:	e7dd      	b.n	800eda6 <__ieee754_rem_pio2f+0x5a>
 800edea:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800efa0 <__ieee754_rem_pio2f+0x254>
 800edee:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800efa4 <__ieee754_rem_pio2f+0x258>
 800edf2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800edf6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800edfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edfe:	edc0 6a00 	vstr	s13, [r0]
 800ee02:	e7eb      	b.n	800eddc <__ieee754_rem_pio2f+0x90>
 800ee04:	4b68      	ldr	r3, [pc, #416]	; (800efa8 <__ieee754_rem_pio2f+0x25c>)
 800ee06:	429d      	cmp	r5, r3
 800ee08:	dc72      	bgt.n	800eef0 <__ieee754_rem_pio2f+0x1a4>
 800ee0a:	f000 fe85 	bl	800fb18 <fabsf>
 800ee0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800efac <__ieee754_rem_pio2f+0x260>
 800ee12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ee16:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ee1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee22:	ee17 0a90 	vmov	r0, s15
 800ee26:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ef94 <__ieee754_rem_pio2f+0x248>
 800ee2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ee2e:	281f      	cmp	r0, #31
 800ee30:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ef9c <__ieee754_rem_pio2f+0x250>
 800ee34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee38:	eeb1 6a47 	vneg.f32	s12, s14
 800ee3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ee40:	ee16 2a90 	vmov	r2, s13
 800ee44:	dc1c      	bgt.n	800ee80 <__ieee754_rem_pio2f+0x134>
 800ee46:	495a      	ldr	r1, [pc, #360]	; (800efb0 <__ieee754_rem_pio2f+0x264>)
 800ee48:	1e47      	subs	r7, r0, #1
 800ee4a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ee4e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ee52:	428b      	cmp	r3, r1
 800ee54:	d014      	beq.n	800ee80 <__ieee754_rem_pio2f+0x134>
 800ee56:	6022      	str	r2, [r4, #0]
 800ee58:	ed94 7a00 	vldr	s14, [r4]
 800ee5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee60:	2e00      	cmp	r6, #0
 800ee62:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee66:	ed84 0a01 	vstr	s0, [r4, #4]
 800ee6a:	da9c      	bge.n	800eda6 <__ieee754_rem_pio2f+0x5a>
 800ee6c:	eeb1 7a47 	vneg.f32	s14, s14
 800ee70:	eeb1 0a40 	vneg.f32	s0, s0
 800ee74:	ed84 7a00 	vstr	s14, [r4]
 800ee78:	ed84 0a01 	vstr	s0, [r4, #4]
 800ee7c:	4240      	negs	r0, r0
 800ee7e:	e792      	b.n	800eda6 <__ieee754_rem_pio2f+0x5a>
 800ee80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ee84:	15eb      	asrs	r3, r5, #23
 800ee86:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ee8a:	2d08      	cmp	r5, #8
 800ee8c:	dde3      	ble.n	800ee56 <__ieee754_rem_pio2f+0x10a>
 800ee8e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800efa0 <__ieee754_rem_pio2f+0x254>
 800ee92:	eddf 5a44 	vldr	s11, [pc, #272]	; 800efa4 <__ieee754_rem_pio2f+0x258>
 800ee96:	eef0 6a40 	vmov.f32	s13, s0
 800ee9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ee9e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800eea2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800eea6:	eef0 7a40 	vmov.f32	s15, s0
 800eeaa:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800eeae:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800eeb2:	ee15 2a90 	vmov	r2, s11
 800eeb6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800eeba:	1a5b      	subs	r3, r3, r1
 800eebc:	2b19      	cmp	r3, #25
 800eebe:	dc04      	bgt.n	800eeca <__ieee754_rem_pio2f+0x17e>
 800eec0:	edc4 5a00 	vstr	s11, [r4]
 800eec4:	eeb0 0a66 	vmov.f32	s0, s13
 800eec8:	e7c6      	b.n	800ee58 <__ieee754_rem_pio2f+0x10c>
 800eeca:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800efb4 <__ieee754_rem_pio2f+0x268>
 800eece:	eeb0 0a66 	vmov.f32	s0, s13
 800eed2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800eed6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800eeda:	eddf 6a37 	vldr	s13, [pc, #220]	; 800efb8 <__ieee754_rem_pio2f+0x26c>
 800eede:	eee6 7a25 	vfma.f32	s15, s12, s11
 800eee2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800eee6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eeea:	ed84 7a00 	vstr	s14, [r4]
 800eeee:	e7b3      	b.n	800ee58 <__ieee754_rem_pio2f+0x10c>
 800eef0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800eef4:	db06      	blt.n	800ef04 <__ieee754_rem_pio2f+0x1b8>
 800eef6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eefa:	edc0 7a01 	vstr	s15, [r0, #4]
 800eefe:	edc0 7a00 	vstr	s15, [r0]
 800ef02:	e733      	b.n	800ed6c <__ieee754_rem_pio2f+0x20>
 800ef04:	15ea      	asrs	r2, r5, #23
 800ef06:	3a86      	subs	r2, #134	; 0x86
 800ef08:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ef0c:	ee07 3a90 	vmov	s15, r3
 800ef10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ef14:	eddf 6a29 	vldr	s13, [pc, #164]	; 800efbc <__ieee754_rem_pio2f+0x270>
 800ef18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef20:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ef24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ef2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef34:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ef38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	edcd 7a05 	vstr	s15, [sp, #20]
 800ef48:	d11e      	bne.n	800ef88 <__ieee754_rem_pio2f+0x23c>
 800ef4a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef52:	bf14      	ite	ne
 800ef54:	2302      	movne	r3, #2
 800ef56:	2301      	moveq	r3, #1
 800ef58:	4919      	ldr	r1, [pc, #100]	; (800efc0 <__ieee754_rem_pio2f+0x274>)
 800ef5a:	9101      	str	r1, [sp, #4]
 800ef5c:	2102      	movs	r1, #2
 800ef5e:	9100      	str	r1, [sp, #0]
 800ef60:	a803      	add	r0, sp, #12
 800ef62:	4621      	mov	r1, r4
 800ef64:	f000 f832 	bl	800efcc <__kernel_rem_pio2f>
 800ef68:	2e00      	cmp	r6, #0
 800ef6a:	f6bf af1c 	bge.w	800eda6 <__ieee754_rem_pio2f+0x5a>
 800ef6e:	edd4 7a00 	vldr	s15, [r4]
 800ef72:	eef1 7a67 	vneg.f32	s15, s15
 800ef76:	edc4 7a00 	vstr	s15, [r4]
 800ef7a:	edd4 7a01 	vldr	s15, [r4, #4]
 800ef7e:	eef1 7a67 	vneg.f32	s15, s15
 800ef82:	edc4 7a01 	vstr	s15, [r4, #4]
 800ef86:	e779      	b.n	800ee7c <__ieee754_rem_pio2f+0x130>
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e7e5      	b.n	800ef58 <__ieee754_rem_pio2f+0x20c>
 800ef8c:	3f490fd8 	.word	0x3f490fd8
 800ef90:	4016cbe3 	.word	0x4016cbe3
 800ef94:	3fc90f80 	.word	0x3fc90f80
 800ef98:	3fc90fd0 	.word	0x3fc90fd0
 800ef9c:	37354443 	.word	0x37354443
 800efa0:	37354400 	.word	0x37354400
 800efa4:	2e85a308 	.word	0x2e85a308
 800efa8:	43490f80 	.word	0x43490f80
 800efac:	3f22f984 	.word	0x3f22f984
 800efb0:	080113a8 	.word	0x080113a8
 800efb4:	2e85a300 	.word	0x2e85a300
 800efb8:	248d3132 	.word	0x248d3132
 800efbc:	43800000 	.word	0x43800000
 800efc0:	08011428 	.word	0x08011428

0800efc4 <__ieee754_sqrtf>:
 800efc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800efc8:	4770      	bx	lr
	...

0800efcc <__kernel_rem_pio2f>:
 800efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd0:	ed2d 8b04 	vpush	{d8-d9}
 800efd4:	b0d9      	sub	sp, #356	; 0x164
 800efd6:	4688      	mov	r8, r1
 800efd8:	9002      	str	r0, [sp, #8]
 800efda:	49bb      	ldr	r1, [pc, #748]	; (800f2c8 <__kernel_rem_pio2f+0x2fc>)
 800efdc:	9866      	ldr	r0, [sp, #408]	; 0x198
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800efe4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800efe8:	1e59      	subs	r1, r3, #1
 800efea:	1d13      	adds	r3, r2, #4
 800efec:	db27      	blt.n	800f03e <__kernel_rem_pio2f+0x72>
 800efee:	f1b2 0b03 	subs.w	fp, r2, #3
 800eff2:	bf48      	it	mi
 800eff4:	f102 0b04 	addmi.w	fp, r2, #4
 800eff8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800effc:	1c45      	adds	r5, r0, #1
 800effe:	00ec      	lsls	r4, r5, #3
 800f000:	1a47      	subs	r7, r0, r1
 800f002:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f006:	9403      	str	r4, [sp, #12]
 800f008:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f00c:	eb0a 0c01 	add.w	ip, sl, r1
 800f010:	ae1c      	add	r6, sp, #112	; 0x70
 800f012:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f016:	2400      	movs	r4, #0
 800f018:	4564      	cmp	r4, ip
 800f01a:	dd12      	ble.n	800f042 <__kernel_rem_pio2f+0x76>
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	ac1c      	add	r4, sp, #112	; 0x70
 800f020:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f024:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f028:	f04f 0c00 	mov.w	ip, #0
 800f02c:	45d4      	cmp	ip, sl
 800f02e:	dc27      	bgt.n	800f080 <__kernel_rem_pio2f+0xb4>
 800f030:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f034:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f038:	4627      	mov	r7, r4
 800f03a:	2600      	movs	r6, #0
 800f03c:	e016      	b.n	800f06c <__kernel_rem_pio2f+0xa0>
 800f03e:	2000      	movs	r0, #0
 800f040:	e7dc      	b.n	800effc <__kernel_rem_pio2f+0x30>
 800f042:	42e7      	cmn	r7, r4
 800f044:	bf5d      	ittte	pl
 800f046:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f04a:	ee07 3a90 	vmovpl	s15, r3
 800f04e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f052:	eef0 7a47 	vmovmi.f32	s15, s14
 800f056:	ece6 7a01 	vstmia	r6!, {s15}
 800f05a:	3401      	adds	r4, #1
 800f05c:	e7dc      	b.n	800f018 <__kernel_rem_pio2f+0x4c>
 800f05e:	ecf9 6a01 	vldmia	r9!, {s13}
 800f062:	ed97 7a00 	vldr	s14, [r7]
 800f066:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f06a:	3601      	adds	r6, #1
 800f06c:	428e      	cmp	r6, r1
 800f06e:	f1a7 0704 	sub.w	r7, r7, #4
 800f072:	ddf4      	ble.n	800f05e <__kernel_rem_pio2f+0x92>
 800f074:	eceb 7a01 	vstmia	fp!, {s15}
 800f078:	f10c 0c01 	add.w	ip, ip, #1
 800f07c:	3404      	adds	r4, #4
 800f07e:	e7d5      	b.n	800f02c <__kernel_rem_pio2f+0x60>
 800f080:	ab08      	add	r3, sp, #32
 800f082:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f086:	eddf 8a93 	vldr	s17, [pc, #588]	; 800f2d4 <__kernel_rem_pio2f+0x308>
 800f08a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800f2d0 <__kernel_rem_pio2f+0x304>
 800f08e:	9304      	str	r3, [sp, #16]
 800f090:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f094:	4656      	mov	r6, sl
 800f096:	00b3      	lsls	r3, r6, #2
 800f098:	9305      	str	r3, [sp, #20]
 800f09a:	ab58      	add	r3, sp, #352	; 0x160
 800f09c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f0a0:	ac08      	add	r4, sp, #32
 800f0a2:	ab44      	add	r3, sp, #272	; 0x110
 800f0a4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800f0a8:	46a4      	mov	ip, r4
 800f0aa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f0ae:	4637      	mov	r7, r6
 800f0b0:	2f00      	cmp	r7, #0
 800f0b2:	f1a0 0004 	sub.w	r0, r0, #4
 800f0b6:	dc4f      	bgt.n	800f158 <__kernel_rem_pio2f+0x18c>
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f0be:	f000 fd7b 	bl	800fbb8 <scalbnf>
 800f0c2:	eeb0 8a40 	vmov.f32	s16, s0
 800f0c6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f0ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f0ce:	f000 fd2b 	bl	800fb28 <floorf>
 800f0d2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f0d6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f0da:	2d00      	cmp	r5, #0
 800f0dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f0e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f0e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800f0e8:	ee17 9a90 	vmov	r9, s15
 800f0ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f0f0:	dd44      	ble.n	800f17c <__kernel_rem_pio2f+0x1b0>
 800f0f2:	f106 3cff 	add.w	ip, r6, #4294967295
 800f0f6:	ab08      	add	r3, sp, #32
 800f0f8:	f1c5 0e08 	rsb	lr, r5, #8
 800f0fc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800f100:	fa47 f00e 	asr.w	r0, r7, lr
 800f104:	4481      	add	r9, r0
 800f106:	fa00 f00e 	lsl.w	r0, r0, lr
 800f10a:	1a3f      	subs	r7, r7, r0
 800f10c:	f1c5 0007 	rsb	r0, r5, #7
 800f110:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800f114:	4107      	asrs	r7, r0
 800f116:	2f00      	cmp	r7, #0
 800f118:	dd3f      	ble.n	800f19a <__kernel_rem_pio2f+0x1ce>
 800f11a:	f04f 0e00 	mov.w	lr, #0
 800f11e:	f109 0901 	add.w	r9, r9, #1
 800f122:	4673      	mov	r3, lr
 800f124:	4576      	cmp	r6, lr
 800f126:	dc6b      	bgt.n	800f200 <__kernel_rem_pio2f+0x234>
 800f128:	2d00      	cmp	r5, #0
 800f12a:	dd04      	ble.n	800f136 <__kernel_rem_pio2f+0x16a>
 800f12c:	2d01      	cmp	r5, #1
 800f12e:	d078      	beq.n	800f222 <__kernel_rem_pio2f+0x256>
 800f130:	2d02      	cmp	r5, #2
 800f132:	f000 8081 	beq.w	800f238 <__kernel_rem_pio2f+0x26c>
 800f136:	2f02      	cmp	r7, #2
 800f138:	d12f      	bne.n	800f19a <__kernel_rem_pio2f+0x1ce>
 800f13a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f13e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f142:	b353      	cbz	r3, 800f19a <__kernel_rem_pio2f+0x1ce>
 800f144:	4628      	mov	r0, r5
 800f146:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f14a:	f000 fd35 	bl	800fbb8 <scalbnf>
 800f14e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f152:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f156:	e020      	b.n	800f19a <__kernel_rem_pio2f+0x1ce>
 800f158:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f15c:	3f01      	subs	r7, #1
 800f15e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f166:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f16a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f16e:	ecac 0a01 	vstmia	ip!, {s0}
 800f172:	ed90 0a00 	vldr	s0, [r0]
 800f176:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f17a:	e799      	b.n	800f0b0 <__kernel_rem_pio2f+0xe4>
 800f17c:	d105      	bne.n	800f18a <__kernel_rem_pio2f+0x1be>
 800f17e:	1e70      	subs	r0, r6, #1
 800f180:	ab08      	add	r3, sp, #32
 800f182:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800f186:	11ff      	asrs	r7, r7, #7
 800f188:	e7c5      	b.n	800f116 <__kernel_rem_pio2f+0x14a>
 800f18a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f18e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	da31      	bge.n	800f1fc <__kernel_rem_pio2f+0x230>
 800f198:	2700      	movs	r7, #0
 800f19a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a2:	f040 809b 	bne.w	800f2dc <__kernel_rem_pio2f+0x310>
 800f1a6:	1e74      	subs	r4, r6, #1
 800f1a8:	46a4      	mov	ip, r4
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	45d4      	cmp	ip, sl
 800f1ae:	da4a      	bge.n	800f246 <__kernel_rem_pio2f+0x27a>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d07a      	beq.n	800f2aa <__kernel_rem_pio2f+0x2de>
 800f1b4:	ab08      	add	r3, sp, #32
 800f1b6:	3d08      	subs	r5, #8
 800f1b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 8081 	beq.w	800f2c4 <__kernel_rem_pio2f+0x2f8>
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f1c8:	00a5      	lsls	r5, r4, #2
 800f1ca:	f000 fcf5 	bl	800fbb8 <scalbnf>
 800f1ce:	aa44      	add	r2, sp, #272	; 0x110
 800f1d0:	1d2b      	adds	r3, r5, #4
 800f1d2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f2d4 <__kernel_rem_pio2f+0x308>
 800f1d6:	18d1      	adds	r1, r2, r3
 800f1d8:	4622      	mov	r2, r4
 800f1da:	2a00      	cmp	r2, #0
 800f1dc:	f280 80ae 	bge.w	800f33c <__kernel_rem_pio2f+0x370>
 800f1e0:	4622      	mov	r2, r4
 800f1e2:	2a00      	cmp	r2, #0
 800f1e4:	f2c0 80cc 	blt.w	800f380 <__kernel_rem_pio2f+0x3b4>
 800f1e8:	a944      	add	r1, sp, #272	; 0x110
 800f1ea:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800f1ee:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800f2cc <__kernel_rem_pio2f+0x300>
 800f1f2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	1aa1      	subs	r1, r4, r2
 800f1fa:	e0b6      	b.n	800f36a <__kernel_rem_pio2f+0x39e>
 800f1fc:	2702      	movs	r7, #2
 800f1fe:	e78c      	b.n	800f11a <__kernel_rem_pio2f+0x14e>
 800f200:	6820      	ldr	r0, [r4, #0]
 800f202:	b94b      	cbnz	r3, 800f218 <__kernel_rem_pio2f+0x24c>
 800f204:	b118      	cbz	r0, 800f20e <__kernel_rem_pio2f+0x242>
 800f206:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800f20a:	6020      	str	r0, [r4, #0]
 800f20c:	2001      	movs	r0, #1
 800f20e:	f10e 0e01 	add.w	lr, lr, #1
 800f212:	3404      	adds	r4, #4
 800f214:	4603      	mov	r3, r0
 800f216:	e785      	b.n	800f124 <__kernel_rem_pio2f+0x158>
 800f218:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800f21c:	6020      	str	r0, [r4, #0]
 800f21e:	4618      	mov	r0, r3
 800f220:	e7f5      	b.n	800f20e <__kernel_rem_pio2f+0x242>
 800f222:	1e74      	subs	r4, r6, #1
 800f224:	a808      	add	r0, sp, #32
 800f226:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f22a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f22e:	f10d 0c20 	add.w	ip, sp, #32
 800f232:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800f236:	e77e      	b.n	800f136 <__kernel_rem_pio2f+0x16a>
 800f238:	1e74      	subs	r4, r6, #1
 800f23a:	a808      	add	r0, sp, #32
 800f23c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f240:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f244:	e7f3      	b.n	800f22e <__kernel_rem_pio2f+0x262>
 800f246:	ab08      	add	r3, sp, #32
 800f248:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f24c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f250:	4318      	orrs	r0, r3
 800f252:	e7ab      	b.n	800f1ac <__kernel_rem_pio2f+0x1e0>
 800f254:	f10c 0c01 	add.w	ip, ip, #1
 800f258:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d0f9      	beq.n	800f254 <__kernel_rem_pio2f+0x288>
 800f260:	9b05      	ldr	r3, [sp, #20]
 800f262:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f266:	eb0d 0003 	add.w	r0, sp, r3
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	18f4      	adds	r4, r6, r3
 800f26e:	ab1c      	add	r3, sp, #112	; 0x70
 800f270:	1c77      	adds	r7, r6, #1
 800f272:	384c      	subs	r0, #76	; 0x4c
 800f274:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f278:	4466      	add	r6, ip
 800f27a:	42be      	cmp	r6, r7
 800f27c:	f6ff af0b 	blt.w	800f096 <__kernel_rem_pio2f+0xca>
 800f280:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800f284:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f288:	ee07 3a90 	vmov	s15, r3
 800f28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f290:	f04f 0c00 	mov.w	ip, #0
 800f294:	ece4 7a01 	vstmia	r4!, {s15}
 800f298:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f29c:	46a1      	mov	r9, r4
 800f29e:	458c      	cmp	ip, r1
 800f2a0:	dd07      	ble.n	800f2b2 <__kernel_rem_pio2f+0x2e6>
 800f2a2:	ece0 7a01 	vstmia	r0!, {s15}
 800f2a6:	3701      	adds	r7, #1
 800f2a8:	e7e7      	b.n	800f27a <__kernel_rem_pio2f+0x2ae>
 800f2aa:	9804      	ldr	r0, [sp, #16]
 800f2ac:	f04f 0c01 	mov.w	ip, #1
 800f2b0:	e7d2      	b.n	800f258 <__kernel_rem_pio2f+0x28c>
 800f2b2:	ecfe 6a01 	vldmia	lr!, {s13}
 800f2b6:	ed39 7a01 	vldmdb	r9!, {s14}
 800f2ba:	f10c 0c01 	add.w	ip, ip, #1
 800f2be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f2c2:	e7ec      	b.n	800f29e <__kernel_rem_pio2f+0x2d2>
 800f2c4:	3c01      	subs	r4, #1
 800f2c6:	e775      	b.n	800f1b4 <__kernel_rem_pio2f+0x1e8>
 800f2c8:	08011fdc 	.word	0x08011fdc
 800f2cc:	08011fb0 	.word	0x08011fb0
 800f2d0:	43800000 	.word	0x43800000
 800f2d4:	3b800000 	.word	0x3b800000
 800f2d8:	00000000 	.word	0x00000000
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	eeb0 0a48 	vmov.f32	s0, s16
 800f2e2:	1a98      	subs	r0, r3, r2
 800f2e4:	f000 fc68 	bl	800fbb8 <scalbnf>
 800f2e8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f2d0 <__kernel_rem_pio2f+0x304>
 800f2ec:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f4:	db19      	blt.n	800f32a <__kernel_rem_pio2f+0x35e>
 800f2f6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f2d4 <__kernel_rem_pio2f+0x308>
 800f2fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f2fe:	aa08      	add	r2, sp, #32
 800f300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f304:	1c74      	adds	r4, r6, #1
 800f306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f30a:	3508      	adds	r5, #8
 800f30c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f314:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f318:	ee10 3a10 	vmov	r3, s0
 800f31c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f320:	ee17 3a90 	vmov	r3, s15
 800f324:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f328:	e74b      	b.n	800f1c2 <__kernel_rem_pio2f+0x1f6>
 800f32a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f32e:	aa08      	add	r2, sp, #32
 800f330:	ee10 3a10 	vmov	r3, s0
 800f334:	4634      	mov	r4, r6
 800f336:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f33a:	e742      	b.n	800f1c2 <__kernel_rem_pio2f+0x1f6>
 800f33c:	a808      	add	r0, sp, #32
 800f33e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f342:	9001      	str	r0, [sp, #4]
 800f344:	ee07 0a90 	vmov	s15, r0
 800f348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f34c:	3a01      	subs	r2, #1
 800f34e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f352:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f356:	ed61 7a01 	vstmdb	r1!, {s15}
 800f35a:	e73e      	b.n	800f1da <__kernel_rem_pio2f+0x20e>
 800f35c:	ecfc 6a01 	vldmia	ip!, {s13}
 800f360:	ecb6 7a01 	vldmia	r6!, {s14}
 800f364:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f368:	3001      	adds	r0, #1
 800f36a:	4550      	cmp	r0, sl
 800f36c:	dc01      	bgt.n	800f372 <__kernel_rem_pio2f+0x3a6>
 800f36e:	4288      	cmp	r0, r1
 800f370:	ddf4      	ble.n	800f35c <__kernel_rem_pio2f+0x390>
 800f372:	a858      	add	r0, sp, #352	; 0x160
 800f374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f378:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800f37c:	3a01      	subs	r2, #1
 800f37e:	e730      	b.n	800f1e2 <__kernel_rem_pio2f+0x216>
 800f380:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800f382:	2a02      	cmp	r2, #2
 800f384:	dc09      	bgt.n	800f39a <__kernel_rem_pio2f+0x3ce>
 800f386:	2a00      	cmp	r2, #0
 800f388:	dc2a      	bgt.n	800f3e0 <__kernel_rem_pio2f+0x414>
 800f38a:	d043      	beq.n	800f414 <__kernel_rem_pio2f+0x448>
 800f38c:	f009 0007 	and.w	r0, r9, #7
 800f390:	b059      	add	sp, #356	; 0x164
 800f392:	ecbd 8b04 	vpop	{d8-d9}
 800f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f39a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d1f5      	bne.n	800f38c <__kernel_rem_pio2f+0x3c0>
 800f3a0:	ab30      	add	r3, sp, #192	; 0xc0
 800f3a2:	442b      	add	r3, r5
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f1a1 0104 	sub.w	r1, r1, #4
 800f3b0:	dc51      	bgt.n	800f456 <__kernel_rem_pio2f+0x48a>
 800f3b2:	4621      	mov	r1, r4
 800f3b4:	2901      	cmp	r1, #1
 800f3b6:	f1a2 0204 	sub.w	r2, r2, #4
 800f3ba:	dc5c      	bgt.n	800f476 <__kernel_rem_pio2f+0x4aa>
 800f3bc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	2c01      	cmp	r4, #1
 800f3c4:	dc67      	bgt.n	800f496 <__kernel_rem_pio2f+0x4ca>
 800f3c6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f3ca:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800f3ce:	2f00      	cmp	r7, #0
 800f3d0:	d167      	bne.n	800f4a2 <__kernel_rem_pio2f+0x4d6>
 800f3d2:	edc8 6a00 	vstr	s13, [r8]
 800f3d6:	ed88 7a01 	vstr	s14, [r8, #4]
 800f3da:	edc8 7a02 	vstr	s15, [r8, #8]
 800f3de:	e7d5      	b.n	800f38c <__kernel_rem_pio2f+0x3c0>
 800f3e0:	aa30      	add	r2, sp, #192	; 0xc0
 800f3e2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f3e6:	4413      	add	r3, r2
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	2a00      	cmp	r2, #0
 800f3ec:	da24      	bge.n	800f438 <__kernel_rem_pio2f+0x46c>
 800f3ee:	b34f      	cbz	r7, 800f444 <__kernel_rem_pio2f+0x478>
 800f3f0:	eef1 7a47 	vneg.f32	s15, s14
 800f3f4:	edc8 7a00 	vstr	s15, [r8]
 800f3f8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800f3fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f400:	aa31      	add	r2, sp, #196	; 0xc4
 800f402:	2301      	movs	r3, #1
 800f404:	429c      	cmp	r4, r3
 800f406:	da20      	bge.n	800f44a <__kernel_rem_pio2f+0x47e>
 800f408:	b10f      	cbz	r7, 800f40e <__kernel_rem_pio2f+0x442>
 800f40a:	eef1 7a67 	vneg.f32	s15, s15
 800f40e:	edc8 7a01 	vstr	s15, [r8, #4]
 800f412:	e7bb      	b.n	800f38c <__kernel_rem_pio2f+0x3c0>
 800f414:	aa30      	add	r2, sp, #192	; 0xc0
 800f416:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800f2d8 <__kernel_rem_pio2f+0x30c>
 800f41a:	4413      	add	r3, r2
 800f41c:	2c00      	cmp	r4, #0
 800f41e:	da05      	bge.n	800f42c <__kernel_rem_pio2f+0x460>
 800f420:	b10f      	cbz	r7, 800f426 <__kernel_rem_pio2f+0x45a>
 800f422:	eef1 7a67 	vneg.f32	s15, s15
 800f426:	edc8 7a00 	vstr	s15, [r8]
 800f42a:	e7af      	b.n	800f38c <__kernel_rem_pio2f+0x3c0>
 800f42c:	ed33 7a01 	vldmdb	r3!, {s14}
 800f430:	3c01      	subs	r4, #1
 800f432:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f436:	e7f1      	b.n	800f41c <__kernel_rem_pio2f+0x450>
 800f438:	ed73 7a01 	vldmdb	r3!, {s15}
 800f43c:	3a01      	subs	r2, #1
 800f43e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f442:	e7d2      	b.n	800f3ea <__kernel_rem_pio2f+0x41e>
 800f444:	eef0 7a47 	vmov.f32	s15, s14
 800f448:	e7d4      	b.n	800f3f4 <__kernel_rem_pio2f+0x428>
 800f44a:	ecb2 7a01 	vldmia	r2!, {s14}
 800f44e:	3301      	adds	r3, #1
 800f450:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f454:	e7d6      	b.n	800f404 <__kernel_rem_pio2f+0x438>
 800f456:	edd1 7a00 	vldr	s15, [r1]
 800f45a:	edd1 6a01 	vldr	s13, [r1, #4]
 800f45e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f462:	3801      	subs	r0, #1
 800f464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f468:	ed81 7a00 	vstr	s14, [r1]
 800f46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f470:	edc1 7a01 	vstr	s15, [r1, #4]
 800f474:	e799      	b.n	800f3aa <__kernel_rem_pio2f+0x3de>
 800f476:	edd2 7a00 	vldr	s15, [r2]
 800f47a:	edd2 6a01 	vldr	s13, [r2, #4]
 800f47e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f482:	3901      	subs	r1, #1
 800f484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f488:	ed82 7a00 	vstr	s14, [r2]
 800f48c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f490:	edc2 7a01 	vstr	s15, [r2, #4]
 800f494:	e78e      	b.n	800f3b4 <__kernel_rem_pio2f+0x3e8>
 800f496:	ed33 7a01 	vldmdb	r3!, {s14}
 800f49a:	3c01      	subs	r4, #1
 800f49c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4a0:	e78f      	b.n	800f3c2 <__kernel_rem_pio2f+0x3f6>
 800f4a2:	eef1 6a66 	vneg.f32	s13, s13
 800f4a6:	eeb1 7a47 	vneg.f32	s14, s14
 800f4aa:	edc8 6a00 	vstr	s13, [r8]
 800f4ae:	ed88 7a01 	vstr	s14, [r8, #4]
 800f4b2:	eef1 7a67 	vneg.f32	s15, s15
 800f4b6:	e790      	b.n	800f3da <__kernel_rem_pio2f+0x40e>

0800f4b8 <__kernel_tanf>:
 800f4b8:	b508      	push	{r3, lr}
 800f4ba:	ee10 3a10 	vmov	r3, s0
 800f4be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f4c2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800f4c6:	eef0 7a40 	vmov.f32	s15, s0
 800f4ca:	da17      	bge.n	800f4fc <__kernel_tanf+0x44>
 800f4cc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800f4d0:	ee17 1a10 	vmov	r1, s14
 800f4d4:	bb41      	cbnz	r1, 800f528 <__kernel_tanf+0x70>
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	d108      	bne.n	800f4ee <__kernel_tanf+0x36>
 800f4dc:	f000 fb1c 	bl	800fb18 <fabsf>
 800f4e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f4e8:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ec:	bd08      	pop	{r3, pc}
 800f4ee:	2801      	cmp	r0, #1
 800f4f0:	d0fa      	beq.n	800f4e8 <__kernel_tanf+0x30>
 800f4f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f4f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f4fa:	e7f5      	b.n	800f4e8 <__kernel_tanf+0x30>
 800f4fc:	494c      	ldr	r1, [pc, #304]	; (800f630 <__kernel_tanf+0x178>)
 800f4fe:	428a      	cmp	r2, r1
 800f500:	db12      	blt.n	800f528 <__kernel_tanf+0x70>
 800f502:	2b00      	cmp	r3, #0
 800f504:	bfb8      	it	lt
 800f506:	eef1 7a40 	vneglt.f32	s15, s0
 800f50a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800f634 <__kernel_tanf+0x17c>
 800f50e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f512:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800f638 <__kernel_tanf+0x180>
 800f516:	bfb8      	it	lt
 800f518:	eef1 0a60 	vneglt.f32	s1, s1
 800f51c:	ee70 0a60 	vsub.f32	s1, s0, s1
 800f520:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800f524:	eddf 0a45 	vldr	s1, [pc, #276]	; 800f63c <__kernel_tanf+0x184>
 800f528:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f640 <__kernel_tanf+0x188>
 800f52c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800f644 <__kernel_tanf+0x18c>
 800f530:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800f648 <__kernel_tanf+0x190>
 800f534:	493e      	ldr	r1, [pc, #248]	; (800f630 <__kernel_tanf+0x178>)
 800f536:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f53a:	428a      	cmp	r2, r1
 800f53c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f540:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f544:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f64c <__kernel_tanf+0x194>
 800f548:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f54c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f650 <__kernel_tanf+0x198>
 800f550:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f554:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f654 <__kernel_tanf+0x19c>
 800f558:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f55c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800f658 <__kernel_tanf+0x1a0>
 800f560:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f564:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800f65c <__kernel_tanf+0x1a4>
 800f568:	eee7 5a05 	vfma.f32	s11, s14, s10
 800f56c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f660 <__kernel_tanf+0x1a8>
 800f570:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f574:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800f664 <__kernel_tanf+0x1ac>
 800f578:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f57c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f668 <__kernel_tanf+0x1b0>
 800f580:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f584:	eddf 5a39 	vldr	s11, [pc, #228]	; 800f66c <__kernel_tanf+0x1b4>
 800f588:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f58c:	eeb0 7a46 	vmov.f32	s14, s12
 800f590:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f594:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800f598:	eeb0 6a60 	vmov.f32	s12, s1
 800f59c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800f5a0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f670 <__kernel_tanf+0x1b8>
 800f5a4:	eee6 0a26 	vfma.f32	s1, s12, s13
 800f5a8:	eee5 0a07 	vfma.f32	s1, s10, s14
 800f5ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f5b0:	db1d      	blt.n	800f5ee <__kernel_tanf+0x136>
 800f5b2:	ee06 0a90 	vmov	s13, r0
 800f5b6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800f5ba:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f5be:	ee37 7a00 	vadd.f32	s14, s14, s0
 800f5c2:	179b      	asrs	r3, r3, #30
 800f5c4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800f5c8:	f003 0302 	and.w	r3, r3, #2
 800f5cc:	f1c3 0301 	rsb	r3, r3, #1
 800f5d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f5d4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800f5d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f5dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f5e0:	ee07 3a90 	vmov	s15, r3
 800f5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f5ec:	e77c      	b.n	800f4e8 <__kernel_tanf+0x30>
 800f5ee:	2801      	cmp	r0, #1
 800f5f0:	d01b      	beq.n	800f62a <__kernel_tanf+0x172>
 800f5f2:	4b20      	ldr	r3, [pc, #128]	; (800f674 <__kernel_tanf+0x1bc>)
 800f5f4:	ee17 2a10 	vmov	r2, s14
 800f5f8:	401a      	ands	r2, r3
 800f5fa:	ee06 2a10 	vmov	s12, r2
 800f5fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f602:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f606:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f60a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f60e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f612:	ee16 2a90 	vmov	r2, s13
 800f616:	4013      	ands	r3, r2
 800f618:	ee07 3a90 	vmov	s15, r3
 800f61c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f620:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800f624:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f628:	e75e      	b.n	800f4e8 <__kernel_tanf+0x30>
 800f62a:	eef0 7a47 	vmov.f32	s15, s14
 800f62e:	e75b      	b.n	800f4e8 <__kernel_tanf+0x30>
 800f630:	3f2ca140 	.word	0x3f2ca140
 800f634:	3f490fda 	.word	0x3f490fda
 800f638:	33222168 	.word	0x33222168
 800f63c:	00000000 	.word	0x00000000
 800f640:	b79bae5f 	.word	0xb79bae5f
 800f644:	38a3f445 	.word	0x38a3f445
 800f648:	37d95384 	.word	0x37d95384
 800f64c:	3a1a26c8 	.word	0x3a1a26c8
 800f650:	3b6b6916 	.word	0x3b6b6916
 800f654:	3cb327a4 	.word	0x3cb327a4
 800f658:	3e088889 	.word	0x3e088889
 800f65c:	3895c07a 	.word	0x3895c07a
 800f660:	398137b9 	.word	0x398137b9
 800f664:	3abede48 	.word	0x3abede48
 800f668:	3c11371f 	.word	0x3c11371f
 800f66c:	3d5d0dd1 	.word	0x3d5d0dd1
 800f670:	3eaaaaab 	.word	0x3eaaaaab
 800f674:	fffff000 	.word	0xfffff000

0800f678 <with_errno>:
 800f678:	b513      	push	{r0, r1, r4, lr}
 800f67a:	4604      	mov	r4, r0
 800f67c:	ed8d 0b00 	vstr	d0, [sp]
 800f680:	f7fb fde4 	bl	800b24c <__errno>
 800f684:	ed9d 0b00 	vldr	d0, [sp]
 800f688:	6004      	str	r4, [r0, #0]
 800f68a:	b002      	add	sp, #8
 800f68c:	bd10      	pop	{r4, pc}

0800f68e <xflow>:
 800f68e:	b082      	sub	sp, #8
 800f690:	b158      	cbz	r0, 800f6aa <xflow+0x1c>
 800f692:	eeb1 7b40 	vneg.f64	d7, d0
 800f696:	ed8d 7b00 	vstr	d7, [sp]
 800f69a:	ed9d 7b00 	vldr	d7, [sp]
 800f69e:	2022      	movs	r0, #34	; 0x22
 800f6a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f6a4:	b002      	add	sp, #8
 800f6a6:	f7ff bfe7 	b.w	800f678 <with_errno>
 800f6aa:	eeb0 7b40 	vmov.f64	d7, d0
 800f6ae:	e7f2      	b.n	800f696 <xflow+0x8>

0800f6b0 <__math_uflow>:
 800f6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f6b8 <__math_uflow+0x8>
 800f6b4:	f7ff bfeb 	b.w	800f68e <xflow>
 800f6b8:	00000000 	.word	0x00000000
 800f6bc:	10000000 	.word	0x10000000

0800f6c0 <__math_oflow>:
 800f6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f6c8 <__math_oflow+0x8>
 800f6c4:	f7ff bfe3 	b.w	800f68e <xflow>
 800f6c8:	00000000 	.word	0x00000000
 800f6cc:	70000000 	.word	0x70000000

0800f6d0 <__math_divzero>:
 800f6d0:	b082      	sub	sp, #8
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f6d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800f6dc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800f6e0:	ed8d 7b00 	vstr	d7, [sp]
 800f6e4:	ed9d 0b00 	vldr	d0, [sp]
 800f6e8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800f6f8 <__math_divzero+0x28>
 800f6ec:	2022      	movs	r0, #34	; 0x22
 800f6ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f6f2:	b002      	add	sp, #8
 800f6f4:	f7ff bfc0 	b.w	800f678 <with_errno>
	...

0800f700 <__math_invalid>:
 800f700:	eeb0 7b40 	vmov.f64	d7, d0
 800f704:	eeb4 7b47 	vcmp.f64	d7, d7
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f710:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f714:	d602      	bvs.n	800f71c <__math_invalid+0x1c>
 800f716:	2021      	movs	r0, #33	; 0x21
 800f718:	f7ff bfae 	b.w	800f678 <with_errno>
 800f71c:	4770      	bx	lr

0800f71e <__math_check_uflow>:
 800f71e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f726:	d102      	bne.n	800f72e <__math_check_uflow+0x10>
 800f728:	2022      	movs	r0, #34	; 0x22
 800f72a:	f7ff bfa5 	b.w	800f678 <with_errno>
 800f72e:	4770      	bx	lr

0800f730 <__math_check_oflow>:
 800f730:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f750 <__math_check_oflow+0x20>
 800f734:	eeb0 7bc0 	vabs.f64	d7, d0
 800f738:	eeb4 7b46 	vcmp.f64	d7, d6
 800f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f740:	dd02      	ble.n	800f748 <__math_check_oflow+0x18>
 800f742:	2022      	movs	r0, #34	; 0x22
 800f744:	f7ff bf98 	b.w	800f678 <with_errno>
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w
 800f750:	ffffffff 	.word	0xffffffff
 800f754:	7fefffff 	.word	0x7fefffff

0800f758 <atan>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	eeb0 7b40 	vmov.f64	d7, d0
 800f75e:	ee17 5a90 	vmov	r5, s15
 800f762:	4b73      	ldr	r3, [pc, #460]	; (800f930 <atan+0x1d8>)
 800f764:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f768:	429c      	cmp	r4, r3
 800f76a:	dd13      	ble.n	800f794 <atan+0x3c>
 800f76c:	4b71      	ldr	r3, [pc, #452]	; (800f934 <atan+0x1dc>)
 800f76e:	429c      	cmp	r4, r3
 800f770:	dc03      	bgt.n	800f77a <atan+0x22>
 800f772:	d107      	bne.n	800f784 <atan+0x2c>
 800f774:	ee10 3a10 	vmov	r3, s0
 800f778:	b123      	cbz	r3, 800f784 <atan+0x2c>
 800f77a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f77e:	eeb0 0b47 	vmov.f64	d0, d7
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f8c0 <atan+0x168>
 800f788:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800f8c8 <atan+0x170>
 800f78c:	2d00      	cmp	r5, #0
 800f78e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800f792:	e7f4      	b.n	800f77e <atan+0x26>
 800f794:	4b68      	ldr	r3, [pc, #416]	; (800f938 <atan+0x1e0>)
 800f796:	429c      	cmp	r4, r3
 800f798:	dc11      	bgt.n	800f7be <atan+0x66>
 800f79a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f79e:	429c      	cmp	r4, r3
 800f7a0:	dc0a      	bgt.n	800f7b8 <atan+0x60>
 800f7a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800f7a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800f8d0 <atan+0x178>
 800f7aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 800f7ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b6:	dce2      	bgt.n	800f77e <atan+0x26>
 800f7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7bc:	e013      	b.n	800f7e6 <atan+0x8e>
 800f7be:	f000 f8c5 	bl	800f94c <fabs>
 800f7c2:	4b5e      	ldr	r3, [pc, #376]	; (800f93c <atan+0x1e4>)
 800f7c4:	429c      	cmp	r4, r3
 800f7c6:	dc4f      	bgt.n	800f868 <atan+0x110>
 800f7c8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f7cc:	429c      	cmp	r4, r3
 800f7ce:	dc41      	bgt.n	800f854 <atan+0xfc>
 800f7d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f7d4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f7d8:	2300      	movs	r3, #0
 800f7da:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f7de:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f7e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f7e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f8d8 <atan+0x180>
 800f7ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f7ee:	ee24 5b04 	vmul.f64	d5, d4, d4
 800f7f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f8e0 <atan+0x188>
 800f7f6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f7fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f8e8 <atan+0x190>
 800f7fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f802:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f8f0 <atan+0x198>
 800f806:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f80a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f8f8 <atan+0x1a0>
 800f80e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f812:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f900 <atan+0x1a8>
 800f816:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f908 <atan+0x1b0>
 800f81a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f81e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f910 <atan+0x1b8>
 800f822:	eea5 2b06 	vfma.f64	d2, d5, d6
 800f826:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f918 <atan+0x1c0>
 800f82a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f82e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f920 <atan+0x1c8>
 800f832:	eea6 2b05 	vfma.f64	d2, d6, d5
 800f836:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f928 <atan+0x1d0>
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f840:	ee26 6b05 	vmul.f64	d6, d6, d5
 800f844:	eea3 6b04 	vfma.f64	d6, d3, d4
 800f848:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f84c:	d121      	bne.n	800f892 <atan+0x13a>
 800f84e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f852:	e794      	b.n	800f77e <atan+0x26>
 800f854:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f858:	2301      	movs	r3, #1
 800f85a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f85e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f862:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f866:	e7be      	b.n	800f7e6 <atan+0x8e>
 800f868:	4b35      	ldr	r3, [pc, #212]	; (800f940 <atan+0x1e8>)
 800f86a:	429c      	cmp	r4, r3
 800f86c:	da0b      	bge.n	800f886 <atan+0x12e>
 800f86e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f872:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f876:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f87a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f87e:	2302      	movs	r3, #2
 800f880:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800f884:	e7af      	b.n	800f7e6 <atan+0x8e>
 800f886:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f88a:	2303      	movs	r3, #3
 800f88c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f890:	e7a9      	b.n	800f7e6 <atan+0x8e>
 800f892:	4a2c      	ldr	r2, [pc, #176]	; (800f944 <atan+0x1ec>)
 800f894:	492c      	ldr	r1, [pc, #176]	; (800f948 <atan+0x1f0>)
 800f896:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f89a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f89e:	ed93 5b00 	vldr	d5, [r3]
 800f8a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f8aa:	ed92 6b00 	vldr	d6, [r2]
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f8b4:	bfb8      	it	lt
 800f8b6:	eeb1 7b47 	vneglt.f64	d7, d7
 800f8ba:	e760      	b.n	800f77e <atan+0x26>
 800f8bc:	f3af 8000 	nop.w
 800f8c0:	54442d18 	.word	0x54442d18
 800f8c4:	3ff921fb 	.word	0x3ff921fb
 800f8c8:	54442d18 	.word	0x54442d18
 800f8cc:	bff921fb 	.word	0xbff921fb
 800f8d0:	8800759c 	.word	0x8800759c
 800f8d4:	7e37e43c 	.word	0x7e37e43c
 800f8d8:	e322da11 	.word	0xe322da11
 800f8dc:	3f90ad3a 	.word	0x3f90ad3a
 800f8e0:	24760deb 	.word	0x24760deb
 800f8e4:	3fa97b4b 	.word	0x3fa97b4b
 800f8e8:	a0d03d51 	.word	0xa0d03d51
 800f8ec:	3fb10d66 	.word	0x3fb10d66
 800f8f0:	c54c206e 	.word	0xc54c206e
 800f8f4:	3fb745cd 	.word	0x3fb745cd
 800f8f8:	920083ff 	.word	0x920083ff
 800f8fc:	3fc24924 	.word	0x3fc24924
 800f900:	5555550d 	.word	0x5555550d
 800f904:	3fd55555 	.word	0x3fd55555
 800f908:	52defd9a 	.word	0x52defd9a
 800f90c:	bfadde2d 	.word	0xbfadde2d
 800f910:	2c6a6c2f 	.word	0x2c6a6c2f
 800f914:	bfa2b444 	.word	0xbfa2b444
 800f918:	af749a6d 	.word	0xaf749a6d
 800f91c:	bfb3b0f2 	.word	0xbfb3b0f2
 800f920:	fe231671 	.word	0xfe231671
 800f924:	bfbc71c6 	.word	0xbfbc71c6
 800f928:	9998ebc4 	.word	0x9998ebc4
 800f92c:	bfc99999 	.word	0xbfc99999
 800f930:	440fffff 	.word	0x440fffff
 800f934:	7ff00000 	.word	0x7ff00000
 800f938:	3fdbffff 	.word	0x3fdbffff
 800f93c:	3ff2ffff 	.word	0x3ff2ffff
 800f940:	40038000 	.word	0x40038000
 800f944:	08011fe8 	.word	0x08011fe8
 800f948:	08012008 	.word	0x08012008

0800f94c <fabs>:
 800f94c:	ec51 0b10 	vmov	r0, r1, d0
 800f950:	ee10 2a10 	vmov	r2, s0
 800f954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f958:	ec43 2b10 	vmov	d0, r2, r3
 800f95c:	4770      	bx	lr
	...

0800f960 <nan>:
 800f960:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f968 <nan+0x8>
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	00000000 	.word	0x00000000
 800f96c:	7ff80000 	.word	0x7ff80000

0800f970 <atanf>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	ee10 5a10 	vmov	r5, s0
 800f976:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f97a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f97e:	eef0 7a40 	vmov.f32	s15, s0
 800f982:	db0f      	blt.n	800f9a4 <atanf+0x34>
 800f984:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f988:	dd04      	ble.n	800f994 <atanf+0x24>
 800f98a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f98e:	eeb0 0a67 	vmov.f32	s0, s15
 800f992:	bd38      	pop	{r3, r4, r5, pc}
 800f994:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800facc <atanf+0x15c>
 800f998:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fad0 <atanf+0x160>
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800f9a2:	e7f4      	b.n	800f98e <atanf+0x1e>
 800f9a4:	4b4b      	ldr	r3, [pc, #300]	; (800fad4 <atanf+0x164>)
 800f9a6:	429c      	cmp	r4, r3
 800f9a8:	dc10      	bgt.n	800f9cc <atanf+0x5c>
 800f9aa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f9ae:	da0a      	bge.n	800f9c6 <atanf+0x56>
 800f9b0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fad8 <atanf+0x168>
 800f9b4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f9b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9bc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c4:	dce3      	bgt.n	800f98e <atanf+0x1e>
 800f9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ca:	e013      	b.n	800f9f4 <atanf+0x84>
 800f9cc:	f000 f8a4 	bl	800fb18 <fabsf>
 800f9d0:	4b42      	ldr	r3, [pc, #264]	; (800fadc <atanf+0x16c>)
 800f9d2:	429c      	cmp	r4, r3
 800f9d4:	dc4f      	bgt.n	800fa76 <atanf+0x106>
 800f9d6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f9da:	429c      	cmp	r4, r3
 800f9dc:	dc41      	bgt.n	800fa62 <atanf+0xf2>
 800f9de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f9e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f9e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f9f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f9fa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800fae0 <atanf+0x170>
 800f9fe:	eddf 5a39 	vldr	s11, [pc, #228]	; 800fae4 <atanf+0x174>
 800fa02:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800fae8 <atanf+0x178>
 800fa06:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fa0a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fa0e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800faec <atanf+0x17c>
 800fa12:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fa16:	eddf 5a36 	vldr	s11, [pc, #216]	; 800faf0 <atanf+0x180>
 800fa1a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fa1e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800faf4 <atanf+0x184>
 800fa22:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fa26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800faf8 <atanf+0x188>
 800fa2a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fa2e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fafc <atanf+0x18c>
 800fa32:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fa36:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fb00 <atanf+0x190>
 800fa3a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fa3e:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800fb04 <atanf+0x194>
 800fa42:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fa46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800fb08 <atanf+0x198>
 800fa4a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fa4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fa52:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fa56:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fa5a:	d121      	bne.n	800faa0 <atanf+0x130>
 800fa5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa60:	e795      	b.n	800f98e <atanf+0x1e>
 800fa62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa66:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa6e:	2301      	movs	r3, #1
 800fa70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa74:	e7be      	b.n	800f9f4 <atanf+0x84>
 800fa76:	4b25      	ldr	r3, [pc, #148]	; (800fb0c <atanf+0x19c>)
 800fa78:	429c      	cmp	r4, r3
 800fa7a:	dc0b      	bgt.n	800fa94 <atanf+0x124>
 800fa7c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fa80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa84:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fa88:	2302      	movs	r3, #2
 800fa8a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fa8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa92:	e7af      	b.n	800f9f4 <atanf+0x84>
 800fa94:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fa98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e7a9      	b.n	800f9f4 <atanf+0x84>
 800faa0:	4a1b      	ldr	r2, [pc, #108]	; (800fb10 <atanf+0x1a0>)
 800faa2:	491c      	ldr	r1, [pc, #112]	; (800fb14 <atanf+0x1a4>)
 800faa4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800faa8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800faac:	ed93 0a00 	vldr	s0, [r3]
 800fab0:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fab4:	ed92 0a00 	vldr	s0, [r2]
 800fab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fabc:	2d00      	cmp	r5, #0
 800fabe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fac2:	bfb8      	it	lt
 800fac4:	eef1 7a67 	vneglt.f32	s15, s15
 800fac8:	e761      	b.n	800f98e <atanf+0x1e>
 800faca:	bf00      	nop
 800facc:	3fc90fdb 	.word	0x3fc90fdb
 800fad0:	bfc90fdb 	.word	0xbfc90fdb
 800fad4:	3edfffff 	.word	0x3edfffff
 800fad8:	7149f2ca 	.word	0x7149f2ca
 800fadc:	3f97ffff 	.word	0x3f97ffff
 800fae0:	3c8569d7 	.word	0x3c8569d7
 800fae4:	3d4bda59 	.word	0x3d4bda59
 800fae8:	bd6ef16b 	.word	0xbd6ef16b
 800faec:	3d886b35 	.word	0x3d886b35
 800faf0:	3dba2e6e 	.word	0x3dba2e6e
 800faf4:	3e124925 	.word	0x3e124925
 800faf8:	3eaaaaab 	.word	0x3eaaaaab
 800fafc:	bd15a221 	.word	0xbd15a221
 800fb00:	bd9d8795 	.word	0xbd9d8795
 800fb04:	bde38e38 	.word	0xbde38e38
 800fb08:	be4ccccd 	.word	0xbe4ccccd
 800fb0c:	401bffff 	.word	0x401bffff
 800fb10:	08012028 	.word	0x08012028
 800fb14:	08012038 	.word	0x08012038

0800fb18 <fabsf>:
 800fb18:	ee10 3a10 	vmov	r3, s0
 800fb1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb20:	ee00 3a10 	vmov	s0, r3
 800fb24:	4770      	bx	lr
	...

0800fb28 <floorf>:
 800fb28:	ee10 3a10 	vmov	r3, s0
 800fb2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb30:	3a7f      	subs	r2, #127	; 0x7f
 800fb32:	2a16      	cmp	r2, #22
 800fb34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb38:	dc2a      	bgt.n	800fb90 <floorf+0x68>
 800fb3a:	2a00      	cmp	r2, #0
 800fb3c:	da11      	bge.n	800fb62 <floorf+0x3a>
 800fb3e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fba0 <floorf+0x78>
 800fb42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	dd05      	ble.n	800fb5c <floorf+0x34>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da23      	bge.n	800fb9c <floorf+0x74>
 800fb54:	4a13      	ldr	r2, [pc, #76]	; (800fba4 <floorf+0x7c>)
 800fb56:	2900      	cmp	r1, #0
 800fb58:	bf18      	it	ne
 800fb5a:	4613      	movne	r3, r2
 800fb5c:	ee00 3a10 	vmov	s0, r3
 800fb60:	4770      	bx	lr
 800fb62:	4911      	ldr	r1, [pc, #68]	; (800fba8 <floorf+0x80>)
 800fb64:	4111      	asrs	r1, r2
 800fb66:	420b      	tst	r3, r1
 800fb68:	d0fa      	beq.n	800fb60 <floorf+0x38>
 800fb6a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fba0 <floorf+0x78>
 800fb6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7a:	ddef      	ble.n	800fb5c <floorf+0x34>
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfbe      	ittt	lt
 800fb80:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fb84:	fa40 f202 	asrlt.w	r2, r0, r2
 800fb88:	189b      	addlt	r3, r3, r2
 800fb8a:	ea23 0301 	bic.w	r3, r3, r1
 800fb8e:	e7e5      	b.n	800fb5c <floorf+0x34>
 800fb90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fb94:	d3e4      	bcc.n	800fb60 <floorf+0x38>
 800fb96:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb9a:	4770      	bx	lr
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	e7dd      	b.n	800fb5c <floorf+0x34>
 800fba0:	7149f2ca 	.word	0x7149f2ca
 800fba4:	bf800000 	.word	0xbf800000
 800fba8:	007fffff 	.word	0x007fffff

0800fbac <nanf>:
 800fbac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fbb4 <nanf+0x8>
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	7fc00000 	.word	0x7fc00000

0800fbb8 <scalbnf>:
 800fbb8:	ee10 3a10 	vmov	r3, s0
 800fbbc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fbc0:	d024      	beq.n	800fc0c <scalbnf+0x54>
 800fbc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fbc6:	d302      	bcc.n	800fbce <scalbnf+0x16>
 800fbc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbcc:	4770      	bx	lr
 800fbce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fbd2:	d121      	bne.n	800fc18 <scalbnf+0x60>
 800fbd4:	4b29      	ldr	r3, [pc, #164]	; (800fc7c <scalbnf+0xc4>)
 800fbd6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800fc80 <scalbnf+0xc8>
 800fbda:	4298      	cmp	r0, r3
 800fbdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbe0:	db15      	blt.n	800fc0e <scalbnf+0x56>
 800fbe2:	ee10 3a10 	vmov	r3, s0
 800fbe6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fbea:	3a19      	subs	r2, #25
 800fbec:	4402      	add	r2, r0
 800fbee:	2afe      	cmp	r2, #254	; 0xfe
 800fbf0:	dd14      	ble.n	800fc1c <scalbnf+0x64>
 800fbf2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fc84 <scalbnf+0xcc>
 800fbf6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fc88 <scalbnf+0xd0>
 800fbfa:	ee10 3a10 	vmov	r3, s0
 800fbfe:	eeb0 7a67 	vmov.f32	s14, s15
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800fc08:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fc0c:	4770      	bx	lr
 800fc0e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc8c <scalbnf+0xd4>
 800fc12:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc16:	4770      	bx	lr
 800fc18:	0dd2      	lsrs	r2, r2, #23
 800fc1a:	e7e7      	b.n	800fbec <scalbnf+0x34>
 800fc1c:	2a00      	cmp	r2, #0
 800fc1e:	dd06      	ble.n	800fc2e <scalbnf+0x76>
 800fc20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fc28:	ee00 3a10 	vmov	s0, r3
 800fc2c:	4770      	bx	lr
 800fc2e:	f112 0f16 	cmn.w	r2, #22
 800fc32:	da19      	bge.n	800fc68 <scalbnf+0xb0>
 800fc34:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fc38:	4298      	cmp	r0, r3
 800fc3a:	ee10 3a10 	vmov	r3, s0
 800fc3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc42:	dd09      	ble.n	800fc58 <scalbnf+0xa0>
 800fc44:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800fc84 <scalbnf+0xcc>
 800fc48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800fc88 <scalbnf+0xd0>
 800fc4c:	eef0 7a40 	vmov.f32	s15, s0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800fc56:	e7dc      	b.n	800fc12 <scalbnf+0x5a>
 800fc58:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fc8c <scalbnf+0xd4>
 800fc5c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fc90 <scalbnf+0xd8>
 800fc60:	eef0 7a40 	vmov.f32	s15, s0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	e7f4      	b.n	800fc52 <scalbnf+0x9a>
 800fc68:	3219      	adds	r2, #25
 800fc6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fc72:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fc94 <scalbnf+0xdc>
 800fc76:	ee07 3a10 	vmov	s14, r3
 800fc7a:	e7c5      	b.n	800fc08 <scalbnf+0x50>
 800fc7c:	ffff3cb0 	.word	0xffff3cb0
 800fc80:	4c000000 	.word	0x4c000000
 800fc84:	7149f2ca 	.word	0x7149f2ca
 800fc88:	f149f2ca 	.word	0xf149f2ca
 800fc8c:	0da24260 	.word	0x0da24260
 800fc90:	8da24260 	.word	0x8da24260
 800fc94:	33000000 	.word	0x33000000

0800fc98 <_init>:
 800fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9a:	bf00      	nop
 800fc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc9e:	bc08      	pop	{r3}
 800fca0:	469e      	mov	lr, r3
 800fca2:	4770      	bx	lr

0800fca4 <_fini>:
 800fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca6:	bf00      	nop
 800fca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcaa:	bc08      	pop	{r3}
 800fcac:	469e      	mov	lr, r3
 800fcae:	4770      	bx	lr
